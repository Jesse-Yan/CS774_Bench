{
    "debit_card_specializing": [
        {
            "sql_idx": 0,
            "predicted_sql": "SELECT SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS ratio FROM customers",
            "ground_truth_sql": "SELECT  CAST(SUM(CASE WHEN `Currency` = 'EUR' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `Currency` = 'CZK' THEN 1 ELSE 0 END) FROM `customers`",
            "res": 0
        },
        {
            "sql_idx": 1,
            "predicted_sql": "SELECT T1.`CustomerID` FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '2012%' AND T1.Segment = 'LAM' ORDER BY T2.Consumption ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`CustomerID` FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Segment` = 'LAM' AND SUBSTR(`T2`.`Date`, 1, 4) = '2012' GROUP BY   `T1`.`CustomerID` ORDER BY   SUM(`T2`.`Consumption`) ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 2,
            "predicted_sql": "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'SME' )",
            "ground_truth_sql": "SELECT   AVG(`T2`.`Consumption`) / 12 FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2013' AND `T1`.`Segment` = 'SME'",
            "res": 1
        },
        {
            "sql_idx": 3,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN T3.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN T3.Consumption ELSE 0 END) AS DIFFERENCE FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T2.TransactionID = T3.CustomerID WHERE T3.Date LIKE '2012%'",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`Currency` = 'CZK' THEN `T2`.`Consumption` ELSE 0 END) - SUM(CASE WHEN `T1`.`Currency` = 'EUR' THEN `T2`.`Consumption` ELSE 0 END) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2012'",
            "res": 0
        },
        {
            "sql_idx": 4,
            "predicted_sql": "SELECT `Date` FROM yearmonth GROUP BY `Date` ORDER BY SUM(Consumption) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   SUBSTR(`T2`.`Date`, 1, 4) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Currency` = 'CZK' GROUP BY   SUBSTR(`T2`.`Date`, 1, 4) ORDER BY   SUM(`T2`.`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 5,
            "predicted_sql": "SELECT `Date` FROM yearmonth WHERE `Date` LIKE '2013%' ORDER BY `Consumption` DESC LIMIT 1",
            "ground_truth_sql": "SELECT   SUBSTR(`T2`.`Date`, 5, 2) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2013' AND `T1`.`Segment` = 'SME' GROUP BY   SUBSTR(`T2`.`Date`, 5, 2) ORDER BY   SUM(`T2`.`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 6,
            "predicted_sql": "SELECT ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'SME' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'LAM' ) AS SME_LAM, ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'LAM' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'KAM' ) AS LAM_KAM, ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'KAM' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'SME' ) AS KAM_SME",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),   CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),   CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Currency` = 'CZK'   AND `T2`.`Consumption` = (     SELECT       MIN(`Consumption`)     FROM `yearmonth`   )   AND `T2`.`Date` BETWEEN 201301 AND 201312",
            "res": 0
        },
        {
            "sql_idx": 7,
            "predicted_sql": "SELECT segment ,MAX(percentage_increase) ,MIN(percentage_increase) FROM ( SELECT segment ,CASE WHEN (SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2013 THEN 1 ELSE 0 END) - SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2012 THEN 1 ELSE 0 END)) / SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2013 THEN 1 ELSE 0 END) * 100 > 0 THEN (SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2013 THEN 1 ELSE 0 END) - SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2012 THEN 1 ELSE 0 END)) / SUM(CASE WHEN YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2013 THEN 1 ELSE 0 END) * 100 ELSE 0 END AS percentage_increase FROM yearmonth WHERE Currency = 'EUR' GROUP BY segment ) AS T",
            "ground_truth_sql": "SELECT   CAST((     SUM(       CASE         WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2013%'         THEN `T2`.`Consumption`         ELSE 0       END     ) - SUM(       CASE         WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'         THEN `T2`.`Consumption`         ELSE 0       END     )   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ),   CAST(SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2013%'       THEN `T2`.`Consumption`       ELSE 0     END   ) - SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ),   CAST(SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2013%'       THEN `T2`.`Consumption`       ELSE 0     END   ) - SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID`",
            "res": 0
        },
        {
            "sql_idx": 8,
            "predicted_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
            "ground_truth_sql": "SELECT   SUM(`Consumption`) FROM `yearmonth` WHERE   `CustomerID` = 6 AND `Date` BETWEEN '201308' AND '201311'",
            "res": 1
        },
        {
            "sql_idx": 9,
            "predicted_sql": "SELECT SUM(CASE WHEN Country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN Country = 'SVK' THEN 1 ELSE 0 END) AS diff FROM gasstations",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `Country` = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN `Country` = 'SVK' THEN 1 ELSE 0 END) FROM `gasstations` WHERE   `Segment` = 'Discount'",
            "res": 0
        },
        {
            "sql_idx": 10,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS difference FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID",
            "ground_truth_sql": "SELECT   SUM(`Currency` = 'CZK') - SUM(`Currency` = 'EUR') FROM `customers` WHERE   `Segment` = 'SME'",
            "res": 0
        },
        {
            "sql_idx": 11,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.Consumption > 46.73 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Consumption` > 46.73 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`CustomerID`) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Segment` = 'LAM'",
            "res": 0
        },
        {
            "sql_idx": 12,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN `Consumption` > 528.3 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(`CustomerID`) FROM yearmonth WHERE `Date` = '201202'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Consumption` > 528.3 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`CustomerID`) FROM `yearmonth` WHERE   `Date` = '201202'",
            "res": 0
        },
        {
            "sql_idx": 13,
            "predicted_sql": "SELECT MAX(Consumption) FROM yearmonth WHERE YEAR(STR_TO_DATE(Date,'%Y-%m-%d')) = 2012",
            "ground_truth_sql": "SELECT   SUM(`Consumption`) FROM `yearmonth` WHERE   SUBSTR(`Date`, 1, 4) = '2012' GROUP BY   SUBSTR(`Date`, 5, 2) ORDER BY   SUM(`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 14,
            "predicted_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Date = '201309'",
            "ground_truth_sql": "SELECT   `T3`.`Description` FROM `transactions_1k` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` INNER JOIN `products` AS `T3`   ON `T1`.`ProductID` = `T3`.`ProductID` WHERE   `T2`.`Date` = '201309'",
            "res": 0
        },
        {
            "sql_idx": 15,
            "predicted_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '201306'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`Country` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `yearmonth` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T3`.`Date` = '201306'",
            "res": 0
        },
        {
            "sql_idx": 16,
            "predicted_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `yearmonth` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T2`.`Currency` = 'EUR' AND `T1`.`Consumption` > 1000.00",
            "res": 1
        },
        {
            "sql_idx": 17,
            "predicted_sql": "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T3.Country = 'CZE'",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`Description` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `products` AS `T3`   ON `T1`.`ProductID` = `T3`.`ProductID` WHERE   `T2`.`Country` = 'CZE'",
            "res": 1
        },
        {
            "sql_idx": 18,
            "predicted_sql": "SELECT T1.`Time` FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11 GROUP BY T1.`Time`",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`Time` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T2`.`ChainID` = 11",
            "res": 1
        },
        {
            "sql_idx": 19,
            "predicted_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STR_TO_DATE(T1.Date, '%Y-%m-%d') > '2012-01-01'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`TransactionID`) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T2`.`Country` = 'CZE'   AND DATE_FORMAT(CAST(`T1`.`Date` AS DATETIME), '%Y') >= '2012'",
            "res": 1
        },
        {
            "sql_idx": 20,
            "predicted_sql": "SELECT DISTINCT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`Currency` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `customers` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T1`.`Date` = '2012-08-24' AND `T1`.`Time` = '16:25:00'",
            "res": 1
        },
        {
            "sql_idx": 21,
            "predicted_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.`Date` = '2012-08-23' AND T1.`Time` = '21:20:00'",
            "ground_truth_sql": "SELECT   `T2`.`Segment` FROM `transactions_1k` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`date` = '2012-08-23' AND `T1`.`time` = '21:20:00'",
            "res": 1
        },
        {
            "sql_idx": 22,
            "predicted_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`TransactionID`) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T1`.`Date` = '2012-08-26'   AND `T1`.`Time` BETWEEN '08:00:00' AND '09:00:00'   AND `T2`.`Country` = 'CZE'",
            "res": 1
        },
        {
            "sql_idx": 23,
            "predicted_sql": "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Amount = 548.4",
            "ground_truth_sql": "SELECT   `T2`.`Country` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T1`.`Date` = '2012-08-24' AND  `T1`.`Price` = 548.4",
            "res": 0
        },
        {
            "sql_idx": 24,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Currency` = 'EUR' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`CustomerID`) FROM `transactions_1k` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Date` = '2012-08-25'",
            "res": 0
        },
        {
            "sql_idx": 25,
            "predicted_sql": "SELECT (SUM(CASE WHEN YEAR(Date) = 2012 THEN Consumption ELSE 0 END) - SUM(CASE WHEN YEAR(Date) = 2013 THEN Consumption ELSE 0 END)) / SUM(CASE WHEN YEAR(Date) = 2012 THEN Consumption ELSE 0 END) FROM yearmonth WHERE Date = '2012-08-25'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END) - SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2013' THEN `Consumption` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END) FROM `yearmonth` WHERE   `CustomerID` = (     SELECT       `T1`.`CustomerID`     FROM `transactions_1k` AS `T1`     INNER JOIN `gasstations` AS `T2`       ON `T1`.`GasStationID` = `T2`.`GasStationID`     WHERE       `T1`.`Date` = '2012-08-25' AND `T1`.`Price`  = 1513.12   )",
            "res": 1
        },
        {
            "sql_idx": 26,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.Segment = 'premium' THEN 1 ELSE 0 END) AS DECIMAL(10, 4)) * 100 / COUNT(T2.Segment) FROM gasstations AS T1 INNER JOIN customers AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Country = 'SVK'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Country` = 'SVK' AND `Segment` = 'Premium' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN `Country` = 'SVK' THEN 1 ELSE 0 END) FROM `gasstations`",
            "res": 0
        },
        {
            "sql_idx": 27,
            "predicted_sql": "SELECT SUM(T1.Amount) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = 38508 AND T1.Date = '201201'",
            "ground_truth_sql": "SELECT   SUM(`T1`.`Price` ),   SUM(CASE WHEN `T3`.`Date` = '201201' THEN `T1`.`Price` ELSE 0 END) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `yearmonth` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T1`.`CustomerID` = '38508'",
            "res": 0
        },
        {
            "sql_idx": 28,
            "predicted_sql": "SELECT T1.CustomerID, T2.Segment, T2.Currency, AVG(T2.Price) AS average_price FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID, T2.Segment, T2.Currency ORDER BY SUM(T1.Amount) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`CustomerID`,   SUM(`T2`.`Price` / `T2`.`Amount`),   `T1`.`Currency` FROM `customers` AS `T1` INNER JOIN `transactions_1k` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T2`.`CustomerID` = (     SELECT       `CustomerID`     FROM `yearmonth`     ORDER BY       `Consumption` DESC     LIMIT 1   ) GROUP BY   `T2`.`CustomerID`,   `T1`.`Currency`",
            "res": 0
        },
        {
            "sql_idx": 29,
            "predicted_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.TransactionID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T2.Date = '201208'",
            "ground_truth_sql": "SELECT   `T2`.`Consumption` FROM `transactions_1k` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Price` / `T1`.`Amount` > 29.00   AND `T1`.`ProductID` = 5   AND `T2`.`Date` = '201208'",
            "res": 0
        }
    ],
    "student_club": [
        {
            "sql_idx": 30,
            "predicted_sql": "SELECT T1.link_to_major FROM member AS T1 WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`first_name` = 'Angela' AND `T1`.`last_name` = 'Sanders'",
            "res": 0
        },
        {
            "sql_idx": 31,
            "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer' AND T1.t_shirt_size = 'Medium'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`event_id`) FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `member` AS `T3`   ON `T2`.`link_to_member` = `T3`.`member_id` WHERE   `T1`.`event_name` = 'Women''s Soccer' AND `T3`.`t_shirt_size` = 'Medium'",
            "res": 1
        },
        {
            "sql_idx": 32,
            "predicted_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member WHERE T3.position = 'Student_Club' GROUP BY T1.event_id HAVING COUNT(T1.event_id) > 10",
            "ground_truth_sql": "SELECT   `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` GROUP BY   `T1`.`event_id` HAVING   COUNT(`T2`.`link_to_event`) > 10 EXCEPT SELECT   `T1`.`event_name` FROM `event` AS `T1` WHERE   `T1`.`type` = 'Meeting'",
            "res": 0
        },
        {
            "sql_idx": 33,
            "predicted_sql": "SELECT T1.event_name FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'fundraiser' GROUP BY T1.event_name HAVING COUNT(T2.link_to_member) > 20",
            "ground_truth_sql": "SELECT `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2` ON `T1`.`event_id` = `T2`.`link_to_event` GROUP BY `T1`.`event_id` HAVING COUNT(`T2`.`link_to_event`) > 20 AND NOT EXISTS (SELECT 1 FROM `event` AS `E` WHERE `E`.`event_id` = `T1`.`event_id` AND `E`.`type` = 'Fundraiser')",
            "res": 0
        },
        {
            "sql_idx": 34,
            "predicted_sql": "SELECT SUM(T2.amount) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
            "ground_truth_sql": "SELECT   `T2`.`amount` FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`position` = 'Vice President'",
            "res": 1
        },
        {
            "sql_idx": 35,
            "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'IL'",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `zip_code` AS `T2`   ON `T1`.`zip` = `T2`.`zip_code` WHERE   `T2`.`state` = 'Illinois'",
            "res": 0
        },
        {
            "sql_idx": 36,
            "predicted_sql": "SELECT T1.approved FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.`link_to_member` = T2.`link_to_member` INNER JOIN event AS T3 ON T2.`link_to_event` = T3.event_id WHERE T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08'",
            "ground_truth_sql": "SELECT   `T3`.`approved` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE   `T1`.`event_name` = 'October Meeting' AND `T1`.`event_date` LIKE '2019-10-08%'",
            "res": 0
        },
        {
            "sql_idx": 37,
            "predicted_sql": "SELECT AVG(T3.cost) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN expense AS T3 ON T2.link_to_member = T3.link_to_member WHERE T1.first_name = 'Elijah' AND T1.last_name = 'Allen' AND MONTH(T3.expense_date) BETWEEN 9 AND 10",
            "ground_truth_sql": "SELECT   AVG(`T2`.`cost`) FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`last_name` = 'Allen'   AND `T1`.`first_name` = 'Elijah'   AND (     SUBSTR(`T2`.`expense_date`, 6, 2) = '09'     OR SUBSTR(`T2`.`expense_date`, 6, 2) = '10'   )",
            "res": 1
        },
        {
            "sql_idx": 38,
            "predicted_sql": "SELECT SUM(CASE WHEN YEAR(T1.event_date) = 2019 THEN T2.amount ELSE 0 END) - SUM(CASE WHEN YEAR(T1.event_date) = 2020 THEN T2.amount ELSE 0 END) AS diff FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Student_Club'",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN SUBSTR(`T1`.`event_date`, 1, 4) = '2019' THEN `T2`.`spent` ELSE 0 END) - SUM(CASE WHEN SUBSTR(`T1`.`event_date`, 1, 4) = '2020' THEN `T2`.`spent` ELSE 0 END) AS `num` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event`",
            "res": 0
        },
        {
            "sql_idx": 39,
            "predicted_sql": "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'",
            "ground_truth_sql": "SELECT   `notes` FROM `income` WHERE   `source` = 'Fundraising' AND `date_received` = '2019-09-14'",
            "res": 1
        },
        {
            "sql_idx": 40,
            "predicted_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
            "ground_truth_sql": "SELECT   `phone` FROM `member` WHERE   `first_name` = 'Carlo' AND `last_name` = 'Jacobs'",
            "res": 1
        },
        {
            "sql_idx": 41,
            "predicted_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
            "ground_truth_sql": "SELECT   `T1`.`event_status` FROM `budget` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`budget_id` = `T2`.`link_to_budget` WHERE   `T2`.`expense_description` = 'Post Cards, Posters'   AND `T2`.`expense_date` = '2019-08-20'",
            "res": 1
        },
        {
            "sql_idx": 42,
            "predicted_sql": "SELECT T1.link_to_major FROM member AS T1 WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`first_name` = 'Brent' AND `T1`.`last_name` = 'Thomason'",
            "res": 0
        },
        {
            "sql_idx": 43,
            "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`member_id`) FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T2`.`major_name` = 'Business' AND `T1`.`t_shirt_size` = 'Medium'",
            "res": 1
        },
        {
            "sql_idx": 44,
            "predicted_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
            "ground_truth_sql": "SELECT   `T2`.`department` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`position` = 'President'",
            "res": 1
        },
        {
            "sql_idx": 45,
            "predicted_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
            "ground_truth_sql": "SELECT   `T2`.`date_received` FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`first_name` = 'Connor'   AND `T1`.`last_name` = 'Hilton'   AND `T2`.`source` = 'Dues'",
            "res": 1
        },
        {
            "sql_idx": 46,
            "predicted_sql": "SELECT COUNT(T1.link_to_event) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' AND T1.category = 'Advertisement' AND T1.amount > ( SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Meeting' AND T1.category = 'Advertisement' )",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`event_name` = 'Yearly Kickoff' THEN `T1`.`amount` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`event_name` = 'October Meeting' THEN `T1`.`amount` ELSE 0 END) FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T1`.`category` = 'Advertisement' AND `T2`.`type` = 'Meeting'",
            "res": 0
        },
        {
            "sql_idx": 47,
            "predicted_sql": "SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Pizza'",
            "ground_truth_sql": "SELECT   SUM(`cost`) FROM `expense` WHERE   `expense_description` = 'Pizza'",
            "res": 1
        },
        {
            "sql_idx": 48,
            "predicted_sql": "SELECT COUNT(*) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
            "ground_truth_sql": "SELECT   COUNT(`city`) FROM `zip_code` WHERE   `county` = 'Orange County' AND `state` = 'Virginia'",
            "res": 1
        },
        {
            "sql_idx": 49,
            "predicted_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T2.link_to_major = T1.major_id WHERE T2.phone = '809-555-3360'",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`phone` = '809-555-3360'",
            "res": 1
        },
        {
            "sql_idx": 50,
            "predicted_sql": "SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`link_to_member`) FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`event_name` = 'Women''s Soccer'",
            "res": 1
        },
        {
            "sql_idx": 51,
            "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T2`.`department` = 'School of Applied Sciences, Technology and Education'",
            "res": 1
        },
        {
            "sql_idx": 52,
            "predicted_sql": "SELECT T1.event_name FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.spent / T2.amount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T2`.`status` = 'Closed' ORDER BY   `T1`.`spent` / `T1`.`amount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 53,
            "predicted_sql": "SELECT MAX(remaining) FROM budget",
            "ground_truth_sql": "SELECT   MAX(`spent`) FROM `budget`",
            "res": 0
        },
        {
            "sql_idx": 54,
            "predicted_sql": "SELECT SUM(remaining) FROM budget WHERE category = 'Food'",
            "ground_truth_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
            "res": 0
        },
        {
            "sql_idx": 55,
            "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` GROUP BY   `T2`.`link_to_member` HAVING   COUNT(`T2`.`link_to_event`) > 7",
            "res": 1
        },
        {
            "sql_idx": 56,
            "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
            "ground_truth_sql": "SELECT   `T4`.`first_name`,   `T4`.`last_name` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` INNER JOIN `member` AS `T4`   ON `T3`.`link_to_member` = `T4`.`member_id` WHERE   `T1`.`event_name` = 'Yearly Kickoff'",
            "res": 0
        },
        {
            "sql_idx": 57,
            "predicted_sql": "SELECT event_name FROM event ORDER BY cost ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` ORDER BY   `T3`.`cost` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 58,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS DECIMAL(10, 2)) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T2.link_to_event = T1.event_id",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`event_name` = 'Yearly Kickoff' THEN `T3`.`cost` ELSE 0 END) AS DOUBLE) * 100 / SUM(`T3`.`cost`) FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget`",
            "res": 0
        },
        {
            "sql_idx": 59,
            "predicted_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `source` FROM `income` WHERE   `date_received` BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY   `source` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 60,
            "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Physics Teaching' AND T1.position = 'Student_Club'",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`member_id`) FROM `major` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`major_id` = `T2`.`link_to_major` WHERE   `T1`.`major_name` = 'Physics Teaching'",
            "res": 0
        },
        {
            "sql_idx": 61,
            "predicted_sql": "SELECT T1.event_name FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T1`.`category` = 'Advertisement' ORDER BY   `T1`.`spent` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 62,
            "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T3.event_id = T2.link_to_event WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
            "ground_truth_sql": "SELECT   CASE WHEN `T3`.`event_name` = 'Women''s Soccer' THEN 'YES' END AS `result` FROM `member` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` INNER JOIN `event` AS `T3`   ON `T2`.`link_to_event` = `T3`.`event_id` WHERE   `T1`.`first_name` = 'Maya' AND `T1`.`last_name` = 'Mclean'",
            "res": 0
        },
        {
            "sql_idx": 63,
            "predicted_sql": "SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker' AND T1.expense_description = 'Posters'",
            "ground_truth_sql": "SELECT   `T3`.`cost` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE   `T1`.`event_name` = 'September Speaker'   AND `T3`.`expense_description` = 'Posters'",
            "res": 0
        },
        {
            "sql_idx": 64,
            "predicted_sql": "SELECT T1.event_name FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.remaining LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T2`.`event_id` = `T1`.`link_to_event` WHERE   `T1`.`event_status` = 'Closed' AND `T1`.`remaining` < 0 ORDER BY   `T1`.`remaining` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 65,
            "predicted_sql": "SELECT T1.type, SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Meeting' AND T1.approved = 'Yes' GROUP BY T1.type",
            "ground_truth_sql": "SELECT `T1`.`type`, SUM(`T3`.`cost`) AS `total_cost` FROM `event` AS `T1` INNER JOIN `budget` AS `T2` ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3` ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE `T1`.`event_name` = 'October Meeting' GROUP BY `T1`.`type`",
            "res": 0
        },
        {
            "sql_idx": 66,
            "predicted_sql": "SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'April Speaker' ORDER BY T1.amount ASC",
            "ground_truth_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
            "res": 1
        },
        {
            "sql_idx": 67,
            "predicted_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
            "ground_truth_sql": "SELECT   SUM(`cost`) FROM `expense` WHERE   `expense_date` = '2019-08-20'",
            "res": 1
        },
        {
            "sql_idx": 68,
            "predicted_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name`,   SUM(`T2`.`cost`) FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`member_id` = 'rec4BLdZHS2Blfp4v'",
            "res": 1
        },
        {
            "sql_idx": 69,
            "predicted_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
            "ground_truth_sql": "SELECT   `T2`.`expense_description` FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`first_name` = 'Sacha' AND `T1`.`last_name` = 'Harrison'",
            "res": 1
        },
        {
            "sql_idx": 70,
            "predicted_sql": "SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`category` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`location` = 'MU 215'",
            "res": 1
        },
        {
            "sql_idx": 71,
            "predicted_sql": "SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Environmental Engineering'",
            "ground_truth_sql": "SELECT   `T2`.`last_name`,   `T1`.`department`,   `T1`.`college` FROM `major` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`major_id` = `T2`.`link_to_major` WHERE   `T2`.`position` = 'Member' AND `T1`.`major_name` = 'Environmental Engineering'",
            "res": 1
        },
        {
            "sql_idx": 72,
            "predicted_sql": "SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`category`,   `T1`.`type` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`location` = 'MU 215' AND `T2`.`spent` = 0 AND `T1`.`type` = 'Guest Speaker'",
            "res": 0
        },
        {
            "sql_idx": 73,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T2.link_to_member) FROM income AS T1 INNER JOIN income AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.amount = 50 AND T1.link_to_member = 'Student_Club'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`amount` = 50 THEN 1.0 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T2`.`income_id`) FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`position` = 'Member' AND `T1`.`t_shirt_size` = 'Medium'",
            "res": 0
        },
        {
            "sql_idx": 74,
            "predicted_sql": "SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed' AND type = 'Game'",
            "ground_truth_sql": "SELECT DISTINCT   `event_name` FROM `event` WHERE   `type` = 'Game'   AND DATE(SUBSTR(`event_date`, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20'   AND `status` = 'Closed'",
            "res": 1
        },
        {
            "sql_idx": 75,
            "predicted_sql": "SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > ( SELECT AVG(cost) FROM expense )",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`first_name`,   `T3`.`last_name`,   `T3`.`phone` FROM `expense` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`link_to_budget` = `T2`.`budget_id` INNER JOIN `member` AS `T3`   ON `T3`.`member_id` = `T1`.`link_to_member` WHERE   `T1`.`cost` > (     SELECT       AVG(`T1`.`cost`)     FROM `expense` AS `T1`     INNER JOIN `budget` AS `T2`       ON `T1`.`link_to_budget` = `T2`.`budget_id`     INNER JOIN `member` AS `T3`       ON `T3`.`member_id` = `T1`.`link_to_member`   )",
            "res": 1
        },
        {
            "sql_idx": 76,
            "predicted_sql": "SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'",
            "ground_truth_sql": "SELECT   `T2`.`first_name`,   `T2`.`last_name`,   `T1`.`cost` FROM `expense` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`link_to_member` = `T2`.`member_id` WHERE   `T1`.`expense_description` = 'Water, Veggie tray, supplies'",
            "res": 1
        },
        {
            "sql_idx": 77,
            "predicted_sql": "SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019'",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`first_name`,   `T3`.`last_name`,   `T4`.`amount` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `member` AS `T3`   ON `T3`.`member_id` = `T2`.`link_to_member` INNER JOIN `income` AS `T4`   ON `T4`.`link_to_member` = `T3`.`member_id` WHERE   `T4`.`date_received` = '2019-09-09'",
            "res": 0
        }
    ],
    "thrombosis_prediction": [
        {
            "sql_idx": 78,
            "predicted_sql": "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE NULL END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE NULL END)) * 100.0 / COUNT(CASE WHEN SEX = 'M' THEN 1 ELSE NULL END) AS deviation_percentage FROM Patient;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) FROM `Patient` WHERE   `SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 79,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN YEAR(Birthday) > 1930 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(ID) FROM Patient WHERE SEX = 'F'",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE WHEN DATE_FORMAT(CAST(`Birthday` AS DATETIME), '%Y') > '1930' THEN 1 ELSE 0 END   ) AS DOUBLE) * 100 / COUNT(*) FROM `Patient` WHERE   `SEX` = 'F'",
            "res": 0
        },
        {
            "sql_idx": 80,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS ratio FROM Examination WHERE Diagnosis = 'SLE'",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) / SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) FROM `Patient` WHERE   `Diagnosis` = 'SLE'",
            "res": 0
        },
        {
            "sql_idx": 81,
            "predicted_sql": "SELECT Diagnosis, `Examination Date` FROM Examination WHERE ID = 30609",
            "ground_truth_sql": "SELECT   `T1`.`Diagnosis`,   `T2`.`Date` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` = 30609",
            "res": 0
        },
        {
            "sql_idx": 82,
            "predicted_sql": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`LDH` > 500",
            "res": 0
        },
        {
            "sql_idx": 83,
            "predicted_sql": "SELECT ID , TIMESTAMPDIFF(YEAR , Birthday , CURDATE()) AS age FROM Examination WHERE RVVT = '+'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RVVT` = '+'",
            "res": 0
        },
        {
            "sql_idx": 84,
            "predicted_sql": "SELECT T1.ID, T1.SEX, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.thrombosis = 2",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`Thrombosis` = 2",
            "res": 0
        },
        {
            "sql_idx": 85,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND YEAR(T1.Description) = 1997 AND T1.Admission = '-'",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Patient` WHERE   DATE_FORMAT(CAST(`Description` AS DATETIME), '%Y') = '1997'   AND `SEX` = 'F'   AND `Admission` = '-'",
            "res": 0
        },
        {
            "sql_idx": 86,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Thrombosis` = 1 AND T2.SEX = 'F' AND YEAR(T1.`Examination Date`) = 1997",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`SEX` = 'F'   AND DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') = '1997'   AND `T2`.`Thrombosis` = 1",
            "res": 1
        },
        {
            "sql_idx": 87,
            "predicted_sql": "SELECT T2.Symptoms, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID ORDER BY T1.Birthday DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`Symptoms`,   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   NOT `T2`.`Symptoms` IS NULL ORDER BY   `T1`.`Birthday` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 88,
            "predicted_sql": "SELECT T2.`Examination Date`, TIMESTAMPDIFF(YEAR, T1.Birthday, T2.`Examination Date`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`Date`,   DATE_FORMAT(CAST(`T2`.`First Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T2`.`Birthday` AS DATETIME), '%Y'),   `T2`.`Birthday` FROM `Laboratory` AS `T1` INNER JOIN `Patient` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`Diagnosis` = 'SJS' AND NOT `T2`.`Birthday` IS NULL ORDER BY   `T2`.`Birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 89,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS male , SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS female FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 8.0",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`UA` <= 8.0 AND `T1`.`SEX` = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`UA` <= 6.5 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID`",
            "res": 0
        },
        {
            "sql_idx": 90,
            "predicted_sql": "SELECT COUNT(DISTINCT ID) FROM Examination WHERE YEAR(`Examination Date`) BETWEEN 1990 AND 1993 AND YEAR(Birthday) < 1993",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') BETWEEN '1990' AND '1993'   AND DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < '18'",
            "res": 0
        },
        {
            "sql_idx": 91,
            "predicted_sql": "SELECT T1.`First Date`, T2.HGB, T2.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
            "ground_truth_sql": "SELECT   DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y'),   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` ORDER BY   `T2`.`HGB` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 92,
            "predicted_sql": "SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12' AND T2.Diagnosis = 'SLE'",
            "ground_truth_sql": "SELECT   `aCL IgA`,   `aCL IgG`,   `aCL IgM` FROM `Examination` WHERE   `ID` IN (     SELECT       `ID`     FROM `Patient`     WHERE       `Diagnosis` = 'SLE' AND `Description` = '1994-02-19'   )   AND `Examination Date` = '1993-11-12'",
            "res": 0
        },
        {
            "sql_idx": 93,
            "predicted_sql": "SELECT (SUM(CASE WHEN `Date` LIKE '1981-11-%' THEN T-CHO ELSE 0 END) - SUM(CASE WHEN `Date` LIKE '1981-12-%' THEN T-CHO ELSE 0 END)) / SUM(CASE WHEN `Date` LIKE '1981-12-%' THEN T-CHO ELSE 0 END) AS decrease_rate FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE Birthday = '1959-02-18' )",
            "ground_truth_sql": "SELECT   CAST((     SUM(CASE WHEN `T2`.`Date` LIKE '1981-11-%' THEN `T2`.`T-CHO` ELSE 0 END) - SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END)   ) AS DOUBLE) / SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Birthday` = '1959-02-18'",
            "res": 0
        },
        {
            "sql_idx": 94,
            "predicted_sql": "SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4",
            "ground_truth_sql": "SELECT DISTINCT   `ID` FROM `Laboratory` WHERE   `Date` BETWEEN '1987-07-06' AND '1996-01-31' AND `GPT` > 30 AND `ALB` < 4",
            "res": 0
        },
        {
            "sql_idx": 95,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.ANA = 'S' AND T1.`aCL IgM` > ( SELECT AVG(`aCL IgM`) FROM Examination ) * 1.2",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Examination` WHERE   `Thrombosis` = 2   AND `ANA Pattern` = 'S'   AND `aCL IgM` > (     SELECT       AVG(`aCL IgM`) * 1.2     FROM `Examination`     WHERE       `Thrombosis` = 2 AND `ANA Pattern` = 'S'   )",
            "res": 0
        },
        {
            "sql_idx": 96,
            "predicted_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`Examination Date` LIKE '1991-10%' AND T2.T-BIL < 2.0",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Admission` = '-' AND `T2`.`T-BIL` < 2.0 AND `T2`.`Date` LIKE '1991-10-%'",
            "res": 0
        },
        {
            "sql_idx": 97,
            "predicted_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.PLT > 400 AND T1.Diagnosis = 'SLE'",
            "ground_truth_sql": "SELECT   AVG(`T2`.`ALB`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`PLT` > 400 AND `T1`.`Diagnosis` = 'SLE' AND `T1`.`SEX` = 'F'",
            "res": 0
        },
        {
            "sql_idx": 98,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'",
            "ground_truth_sql": "SELECT   COUNT(`ID`) FROM `Patient` WHERE   `SEX` = 'F' AND `Diagnosis` = 'APS'",
            "res": 0
        },
        {
            "sql_idx": 99,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) = 1980 AND T2.Diagnosis = 'RA'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `SEX` = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`ID`) FROM `Patient` WHERE   `Diagnosis` = 'RA' AND DATE_FORMAT(CAST(`Birthday` AS DATETIME), '%Y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 100,
            "predicted_sql": "SELECT T1.ID, T1.UA FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 57266 AND (T1.UA > 8.0 AND T2.SEX = 'M' OR T1.UA > 6.5 AND T2.SEX = 'F')",
            "ground_truth_sql": "SELECT   CASE     WHEN (       `T1`.`SEX` = 'F' AND `T2`.`UA` > 6.5     )     OR (       `T1`.`SEX` = 'M' AND `T2`.`UA` > 8.0     )     THEN TRUE     ELSE FALSE   END FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` = 57266",
            "res": 0
        },
        {
            "sql_idx": 101,
            "predicted_sql": "SELECT ID FROM Laboratory WHERE GPT >= 60 AND SEX = 'M'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`SEX` = 'M' AND `T2`.`GPT` >= 60",
            "res": 0
        },
        {
            "sql_idx": 102,
            "predicted_sql": "SELECT Diagnosis FROM Examination WHERE GPT > 60 ORDER BY Birthday ASC",
            "ground_truth_sql": "SELECT `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GPT` > 60 ORDER BY   `T1`.`Birthday` ASC",
            "res": 0
        },
        {
            "sql_idx": 103,
            "predicted_sql": "SELECT ID ,SEX ,Birthday FROM Patient WHERE ID IN ( SELECT ID FROM Examination WHERE UN BETWEEN 28 AND 30 )",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`UN` = 29",
            "res": 0
        },
        {
            "sql_idx": 104,
            "predicted_sql": "SELECT T1.SEX, COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.T-BIL >= 2.0 GROUP BY T1.SEX",
            "ground_truth_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX, T1.ID",
            "res": 0
        },
        {
            "sql_idx": 105,
            "predicted_sql": "SELECT AVG(TIMESTAMPDIFF(YEAR, Birthday, CURDATE())) AS average_age FROM Patient WHERE SEX = 'M' AND Diagnosis = 'high cholesterol'",
            "ground_truth_sql": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(T1.Birthday)) FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
            "res": 0
        },
        {
            "sql_idx": 106,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND TIMESTAMPDIFF(YEAR, T1.Birthday, CURDATE()) > 50",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`TG` >= 200   AND DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') > 50",
            "res": 0
        },
        {
            "sql_idx": 107,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CPK > 250 AND YEAR(T1.Birthday) BETWEEN 1936 AND 1956",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') BETWEEN '1936' AND '1956'   AND `T1`.`SEX` = 'M'   AND `T2`.`CPK` >= 250",
            "res": 0
        },
        {
            "sql_idx": 108,
            "predicted_sql": "SELECT ID ,SEX ,TIMESTAMPDIFF(YEAR,Birthday,CURDATE()) AS age FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GLU >= 180 ) AND ID IN ( SELECT ID FROM Laboratory WHERE T-CHO < 250 )",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GLU` >= 180 AND `T2`.`T-CHO` < 250",
            "res": 0
        },
        {
            "sql_idx": 109,
            "predicted_sql": "SELECT Diagnosis, ID, TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) AS Age FROM Patient WHERE RBC < 3.5",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`Diagnosis`,   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RBC` < 3.5",
            "res": 0
        },
        {
            "sql_idx": 110,
            "predicted_sql": "SELECT ID ,SEX FROM Patient WHERE Diagnosis = 'SLE' AND HGB BETWEEN 10 AND 17 ORDER BY Birthday ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`ID`,   `T1`.`SEX` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Diagnosis` = 'SLE' AND `T2`.`HGB` > 10 AND `T2`.`HGB` < 17 ORDER BY   `T1`.`Birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 111,
            "predicted_sql": "SELECT T1.ID, TIMESTAMPDIFF(YEAR, T1.Birthday, CURDATE()) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T2.ID) > 2",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` IN (     SELECT       `ID`     FROM `Laboratory`     WHERE       `HCT` >= 52     GROUP BY       `ID`     HAVING       COUNT(`ID`) >= 2   )",
            "res": 0
        },
        {
            "sql_idx": 112,
            "predicted_sql": "SELECT SUM(PLT < 100) AS lower_than_normal_range, SUM(PLT > 400) AS higher_than_normal_range FROM Laboratory WHERE PLT < 100 OR PLT > 400",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`PLT` <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`PLT` >= 400 THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID`",
            "res": 0
        },
        {
            "sql_idx": 113,
            "predicted_sql": "SELECT T1.ID, T1.First_Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T2.`Date`) = 1984 AND T1.SEX = 'M' AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 50 AND T2.PLT BETWEEN 100 AND 400",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`PLT` BETWEEN 100 AND 400   AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < 50   AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') = '1984'",
            "res": 0
        },
        {
            "sql_idx": 114,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday < CURDATE() - INTERVAL 55 YEAR AND T2.PT >= 14",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`PT` >= 14 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`PT` >= 14 THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') > 55",
            "res": 0
        },
        {
            "sql_idx": 115,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND T2.FG <= 150 OR T2.FG >= 450",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`FG` <= 150   OR `T2`.`FG` >= 450   AND `T2`.`WBC` > 3.5   AND `T2`.`WBC` < 9.0   AND `T1`.`SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 116,
            "predicted_sql": "SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   `T2`.`IGG` >= 2000",
            "res": 0
        },
        {
            "sql_idx": 117,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T2.Symptoms IS NOT NULL",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   `T2`.`IGG` BETWEEN 900 AND 2000 AND NOT `T3`.`Symptoms` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 118,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND YEAR(T1.`First Date`) > 1990",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`IGA` BETWEEN 80 AND 500   AND DATE_FORMAT(CAST(`T1`.`First Date` AS DATETIME), '%Y') > '1990'",
            "res": 0
        },
        {
            "sql_idx": 119,
            "predicted_sql": "SELECT Diagnosis FROM Examination WHERE IGM <= 40 OR IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   NOT `T2`.`IGM` BETWEEN 40 AND 400 GROUP BY   `T1`.`Diagnosis` ORDER BY   COUNT(`T1`.`Diagnosis`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 120,
            "predicted_sql": "SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL",
            "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL;",
            "res": 1
        },
        {
            "sql_idx": 121,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND YEAR(CURDATE()) - YEAR(T1.Birthday) < 70",
            "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND YEAR(CURDATE()) - YEAR(T1.Birthday) < 70",
            "res": 0
        },
        {
            "sql_idx": 122,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ANA = 0 AND T1.Admission = '+'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RNP` = 'negative' OR `T2`.`RNP` = '0' AND `T1`.`Admission` = '+'",
            "res": 0
        },
        {
            "sql_idx": 123,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 WHERE T1.ana = 0 AND T1.thrombosis = 0",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Examination` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`SM` IN ('negative', '0') AND `T1`.`Thrombosis` = 0",
            "res": 0
        },
        {
            "sql_idx": 124,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 = 'negative' AND T1.Sex = 'F' AND T1.Symptoms IS NULL",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   (     `T2`.`SC170` = 'negative' OR `T2`.`SC170` = '0'   )   AND `T1`.`SEX` = 'F'   AND `T3`.`Symptoms` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 125,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`CENTROMEA` IN ('negative', '0')   AND `T2`.`SSB` IN ('negative', '0')   AND `T1`.`SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 126,
            "predicted_sql": "SELECT MIN(Birthday) AS youngest_birthday FROM Patient WHERE ID IN ( SELECT ID FROM Examination WHERE GOT >= 60 )",
            "ground_truth_sql": "SELECT   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GOT` >= 60 ORDER BY   `T1`.`Birthday` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 127,
            "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T1.KCT = '+' OR T1.RVVT = '+' OR T1.LAC = '+')",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T1`.`ID` = `T3`.`ID` WHERE   `T2`.`CPK` < 250   AND (     `T3`.`KCT` = '+' OR `T3`.`RVVT` = '+' OR `T3`.`LAC` = '+'   )",
            "res": 1
        }
    ],
    "european_football_2": [
        {
            "sql_idx": 128,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' ORDER BY T1.home_team_goal + T1.away_team_goal DESC LIMIT 1",
            "ground_truth_sql": "SELECT  `t2`.`name` FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` WHERE   `t1`.`season` = '2015/2016' GROUP BY   `t2`.`name` ORDER BY   SUM(`t1`.`home_team_goal` + `t1`.`away_team_goal`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 129,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.season = '2009/2010' AND T2.away_team_goal > T2.home_team_goal GROUP BY T1.team_long_name ORDER BY COUNT(T2.away_team_goal) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `teamInfo`.`team_long_name` FROM `League` AS `leagueData` INNER JOIN `Match` AS `matchData`   ON `leagueData`.`id` = `matchData`.`league_id` INNER JOIN `Team` AS `teamInfo`   ON `matchData`.`away_team_api_id` = `teamInfo`.`team_api_id` WHERE   `leagueData`.`name` = 'Scotland Premier League'   AND `matchData`.`season` = '2009/2010'   AND `matchData`.`away_team_goal` - `matchData`.`home_team_goal` > 0 GROUP BY   `matchData`.`away_team_api_id` ORDER BY   COUNT(*) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 130,
            "predicted_sql": "SELECT T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4",
            "ground_truth_sql": "SELECT   `t1`.`buildUpPlaySpeed` FROM `Team_Attributes` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` ORDER BY   `t1`.`buildUpPlaySpeed` ASC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 131,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(CASE WHEN T1.home_team_goal = T1.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `t2`.`name` FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` WHERE   `t1`.`season` = '2015/2016' AND `t1`.`home_team_goal` = `t1`.`away_team_goal` GROUP BY   `t2`.`name` ORDER BY   COUNT(`t1`.`id`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 132,
            "predicted_sql": "SELECT TIMESTAMPDIFF(YEAR, birthday, CURDATE()) AS age FROM Player_Attributes WHERE sprint_speed >= 97 AND YEAR(date) BETWEEN 2013 AND 2015",
            "ground_truth_sql": "SELECT DISTINCT YEAR(CURDATE()) - YEAR(t2.birthday) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE YEAR(t1.`date`) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
            "res": 0
        },
        {
            "sql_idx": 133,
            "predicted_sql": "SELECT T1.name, COUNT(T2.id) AS matches FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY matches DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `t2`.`name`,   COUNT(`t1`.`id`) FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` GROUP BY   `t2`.`name` ORDER BY   COUNT(`t1`.`id`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 134,
            "predicted_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
            "ground_truth_sql": "SELECT DISTINCT   `team_fifa_api_id` FROM `Team_Attributes` WHERE   `buildUpPlaySpeed` > 50 AND `buildUpPlaySpeed` < 60",
            "res": 1
        },
        {
            "sql_idx": 135,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE STR_TO_DATE(date,'%Y-%m-%d') = STR_TO_DATE('2012-01-01','%Y-%m-%d') )",
            "ground_truth_sql": "SELECT DISTINCT   `t4`.`team_long_name` FROM `Team_Attributes` AS `t3` INNER JOIN `Team` AS `t4`   ON `t3`.`team_api_id` = `t4`.`team_api_id` WHERE   SUBSTR(`t3`.`date`, 1, 4) = '2012'   AND `t3`.`buildUpPlayPassing` > (     SELECT       CAST(SUM(`t2`.`buildUpPlayPassing`) AS DOUBLE) / COUNT(`t1`.`id`)     FROM `Team` AS `t1`     INNER JOIN `Team_Attributes` AS `t2`       ON `t1`.`team_api_id` = `t2`.`team_api_id`     WHERE       DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') = '2012'   )",
            "res": 0
        },
        {
            "sql_idx": 136,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE STR_TO_DATE(T2.birthday, '%d/%m/%Y') BETWEEN '1987-01-01' AND '1992-12-31'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `t2`.`preferred_foot` = 'left' THEN `t1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`t1`.`id`) AS `percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t1`.`birthday`, 1, 4) BETWEEN '1987' AND '1992'",
            "res": 0
        },
        {
            "sql_idx": 137,
            "predicted_sql": "SELECT AVG(T2.long_shots) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T1.player_name = 'Ahmed Samir Farag'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`long_shots`) AS DOUBLE) / COUNT(`t2`.`date`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`player_name` = 'Ahmed Samir Farag'",
            "res": 0
        },
        {
            "sql_idx": 138,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T1.height > 180 ORDER BY T2.heading_accuracy DESC LIMIT 10",
            "ground_truth_sql": "SELECT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`height` > 180 GROUP BY   `t1`.`id` ORDER BY   CAST(SUM(`t2`.`heading_accuracy`) AS DOUBLE) / COUNT(`t2`.`player_fifa_api_id`) DESC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 139,
            "predicted_sql": "SELECT T1.name FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2009/2010' GROUP BY T1.name HAVING AVG(T2.home_team_goal) > AVG(T2.away_team_goal)",
            "ground_truth_sql": "SELECT   `t1`.`name` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t2`.`season` = '2009/2010' GROUP BY   `t1`.`name` HAVING   (     CAST(SUM(`t2`.`home_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)   ) - (     CAST(SUM(`t2`.`away_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)   ) > 0",
            "res": 0
        },
        {
            "sql_idx": 140,
            "predicted_sql": "SELECT player_name FROM Player WHERE player_name LIKE '%1970-10%'",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` WHERE   SUBSTR(`birthday`, 1, 7) = '1970-10'",
            "res": 0
        },
        {
            "sql_idx": 141,
            "predicted_sql": "SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND T2.date LIKE '2011%'",
            "ground_truth_sql": "SELECT  `t2`.`overall_rating` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE  `t1`.`player_name` = 'Gabriel Tamas'  AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 142,
            "predicted_sql": "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match WHERE season = '2010/2011' AND country_id = ( SELECT id FROM Country WHERE name = 'Poland' )",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`home_team_goal`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Country` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`country_id` WHERE   `t1`.`name` = 'Poland' AND `t2`.`season` = '2010/2011'",
            "res": 0
        },
        {
            "sql_idx": 143,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id ORDER BY T2.finishing DESC LIMIT 1",
            "ground_truth_sql": "SELECT `A` FROM (SELECT AVG(`finishing`) AS `result`, 'Max' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MAX(`height`) FROM `Player`) UNION SELECT AVG(`finishing`) AS `result`, 'Min' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MIN(`height`) FROM `Player`)) AS `derived` ORDER BY `result` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 144,
            "predicted_sql": "SELECT AVG(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.id = t2.player_fifa_api_id WHERE t1.height > 170 AND STR_TO_DATE(t2.date, '%Y-%m-%d') BETWEEN '2010-01-01' AND '2015-12-31'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`height` > 170   AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') >= '2010'   AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') <= '2015'",
            "res": 0
        },
        {
            "sql_idx": 145,
            "predicted_sql": "SELECT AVG(T1.ball_control) - AVG(T2.ball_control) AS diff FROM Player_Attributes AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id JOIN Player AS T3 ON T1.player_api_id = T3.id WHERE T3.player_name = 'Abdou Diallo' OR T3.player_name = 'Aaron Appindangoye'",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`ball_control` ELSE 0 END   ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`id` ELSE NULL END) - CAST(SUM(     CASE       WHEN `t1`.`player_name` = 'Aaron Appindangoye'       THEN `t2`.`ball_control`       ELSE 0     END   ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Aaron Appindangoye' THEN `t2`.`id` ELSE NULL END) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        },
        {
            "sql_idx": 146,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 WHERE T1.player_name = 'Aaron Lennon' ORDER BY T1.birthday DESC LIMIT 1 UNION SELECT T1.player_name FROM Player AS T1 WHERE T1.player_name = 'Abdelaziz Barrada' ORDER BY T1.birthday DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` WHERE   `player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY   `birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 147,
            "predicted_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` ORDER BY   `height` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 148,
            "predicted_sql": "SELECT COUNT(T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.preferred_foot = 'left' AND T2.attacking_work_rate = 'low'",
            "ground_truth_sql": "SELECT   COUNT(`player_api_id`) FROM `Player_Attributes` WHERE   `preferred_foot` = 'left' AND `attacking_work_rate` = 'low'",
            "res": 0
        },
        {
            "sql_idx": 149,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE STR_TO_DATE(T1.birthday, '%d/%m/%Y') < '1986-01-01' AND T2.defensive_work_rate = 'high'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `t1`.`player_name`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   DATE_FORMAT(CAST(`t1`.`birthday` AS DATETIME), '%Y') < '1986'   AND `t2`.`defensive_work_rate` = 'high'",
            "res": 0
        },
        {
            "sql_idx": 150,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`volleys` > 70 AND `t2`.`dribbling` > 70",
            "res": 0
        },
        {
            "sql_idx": 151,
            "predicted_sql": "SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Belgium Jupiler League' AND SUBSTR(T1.`date`, 1, 7) = '2009-04'",
            "ground_truth_sql": "SELECT   COUNT(`t2`.`id`) FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t1`.`name` = 'Belgium Jupiler League' AND SUBSTR(`t2`.`date`, 1, 7) = '2009-04'",
            "res": 0
        },
        {
            "sql_idx": 152,
            "predicted_sql": "SELECT T1.name FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2008/2009' GROUP BY T1.name ORDER BY COUNT(T2.id) DESC LIMIT 1",
            "ground_truth_sql": "SELECT `t1`.`name` FROM `League` AS `t1`JOIN `Match` AS `t2` ON `t1`.`id` = `t2`.`league_id` WHERE  `t2`.`season` = '2008/2009' GROUP BY  `t1`.`name` HAVING COUNT(`t2`.`id`) = (SELECT MAX(match_count) FROM (SELECT COUNT(`t2`.`id`) AS match_count FROM `Match` AS `t2` WHERE `t2`.`season` = '2008/2009' GROUP BY  `t2`.`league_id`) AS subquery)",
            "res": 0
        },
        {
            "sql_idx": 153,
            "predicted_sql": "SELECT (T1.overall_rating - T2.overall_rating) * 100.0 / T2.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk' AND T2.player_name = 'Paulin Puel'",
            "ground_truth_sql": "SELECT   (     SUM(       CASE         WHEN `t1`.`player_name` = 'Ariel Borysiuk'         THEN `t2`.`overall_rating`         ELSE 0       END     ) * 1.0 - SUM(       CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END     )   ) * 100 / SUM(     CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END   ) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        },
        {
            "sql_idx": 154,
            "predicted_sql": "SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Pietro Marino'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`player_name` = 'Pietro Marino'",
            "res": 0
        },
        {
            "sql_idx": 155,
            "predicted_sql": "SELECT MAX(T1.chanceCreationPassing), T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Ajax'",
            "ground_truth_sql": "SELECT   `t2`.`chanceCreationPassing`,   `t2`.`chanceCreationPassingClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'Ajax' ORDER BY   `t2`.`chanceCreationPassing` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 156,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date = '2016-06-23' ORDER BY T1.birthday DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2016-06-23' AND `t2`.`overall_rating` = 77 ORDER BY   `t1`.`birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 157,
            "predicted_sql": "SELECT T1.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Aaron Mooy' AND T1.date LIKE '2016-02-04%'",
            "ground_truth_sql": "SELECT   `t2`.`overall_rating` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2016-02-04' AND `t1`.`player_name` = 'Aaron Mooy'",
            "res": 1
        },
        {
            "sql_idx": 158,
            "predicted_sql": "SELECT T2.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.id WHERE T2.player_name = 'Francesco Migliore' AND T1.date LIKE '2015-05-01%'",
            "ground_truth_sql": "SELECT   `t2`.`attacking_work_rate` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`date` LIKE '2015-05-01%' AND `t1`.`player_name` = 'Francesco Migliore'",
            "res": 0
        },
        {
            "sql_idx": 159,
            "predicted_sql": "SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.id WHERE T2.player_name = 'Kevin Constant' ORDER BY T1.crossing DESC LIMIT 1",
            "ground_truth_sql": "SELECT `date` FROM (SELECT `t2`.`crossing`, `t2`.`date` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2` ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE `t1`.`player_name` = 'Kevin Constant' ORDER BY `t2`.`crossing` DESC) AS `subquery` ORDER BY `date` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 160,
            "predicted_sql": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date LIKE '2010-02-22%'",
            "ground_truth_sql": "SELECT   `t2`.`buildUpPlayPassingClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'FC Lorient' AND `t2`.`date` LIKE '2010-02-22%'",
            "res": 1
        },
        {
            "sql_idx": 161,
            "predicted_sql": "SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'",
            "ground_truth_sql": "SELECT   `t2`.`defenceAggressionClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'Hannover 96' AND `t2`.`date` LIKE '2015-09-10%'",
            "res": 0
        },
        {
            "sql_idx": 162,
            "predicted_sql": "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND T2.date LIKE '2007-02-22%' AND T2.date LIKE '%2016-04-21'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE   `t1`.`player_name` = 'Marko Arnautovic'   AND SUBSTR(`t2`.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
            "res": 0
        },
        {
            "sql_idx": 163,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Jordan Bowery' THEN T2.overall_rating ELSE 0 END) AS DECIMAL(10, 2)) * 100 / SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.date = '2013-07-12'",
            "ground_truth_sql": "SELECT   (     SUM(       CASE         WHEN `t1`.`player_name` = 'Landon Donovan'         THEN `t2`.`overall_rating`         ELSE 0       END     ) * 1.0 - SUM(       CASE WHEN `t1`.`player_name` = 'Jordan Bowery' THEN `t2`.`overall_rating` ELSE 0 END     )   ) * 100 / SUM(     CASE       WHEN `t1`.`player_name` = 'Landon Donovan'       THEN `t2`.`overall_rating`       ELSE 0     END   ) AS `LvsJ_percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2013-07-12'",
            "res": 0
        },
        {
            "sql_idx": 164,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id ORDER BY T2.height DESC LIMIT 1",
            "ground_truth_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as `rank`FROM Player) AS ranked_players WHERE `rank` = 1",
            "res": 0
        },
        {
            "sql_idx": 165,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1",
            "ground_truth_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
            "res": 0
        },
        {
            "sql_idx": 166,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T2.attacking_work_rate = 'high'",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`attacking_work_rate` = 'high'",
            "res": 0
        },
        {
            "sql_idx": 167,
            "predicted_sql": "SELECT T1.team_short_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`team_short_name` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t2`.`chanceCreationPassingClass` = 'Safe'",
            "res": 0
        },
        {
            "sql_idx": 168,
            "predicted_sql": "SELECT COUNT(T1.player_api_id) FROM Player AS T1 WHERE T1.player_name LIKE 'Aaron%' AND T1.birthday > '1990'",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `Player` WHERE   `birthday` > '1990' AND `player_name` LIKE 'Aaron%'",
            "res": 1
        },
        {
            "sql_idx": 169,
            "predicted_sql": "SELECT ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 6 ) - ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 23 ) AS difference",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `t1`.`id` = 6 THEN `t1`.`jumping` ELSE 0 END) - SUM(CASE WHEN `t1`.`id` = 23 THEN `t1`.`jumping` ELSE 0 END) FROM `Player_Attributes` AS `t1`",
            "res": 0
        },
        {
            "sql_idx": 170,
            "predicted_sql": "SELECT player_api_id FROM Player_Attributes ORDER BY potential ASC, preferred_foot = 'right' LIMIT 4",
            "ground_truth_sql": "SELECT   `id` FROM `Player_Attributes` WHERE   `preferred_foot` = 'right' ORDER BY   `potential` ASC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 171,
            "predicted_sql": "SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) AND T2.preferred_foot = 'left'",
            "ground_truth_sql": "SELECT   COUNT(`t1`.`id`) FROM `Player_Attributes` AS `t1` WHERE   `t1`.`preferred_foot` = 'left'   AND `t1`.`crossing` = (     SELECT       MAX(`crossing`)     FROM `Player_Attributes`   )",
            "res": 0
        },
        {
            "sql_idx": 172,
            "predicted_sql": "SELECT T1.home_team_goal, T1.away_team_goal FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2008-09-24%' AND T2.name = 'Belgium Jupiler League'",
            "ground_truth_sql": "SELECT   `t2`.`home_team_goal`,   `t2`.`away_team_goal` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t1`.`name` = 'Belgium Jupiler League' AND `t2`.`date` LIKE '2008-09-24%'",
            "res": 0
        },
        {
            "sql_idx": 173,
            "predicted_sql": "SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`buildUpPlaySpeedClass` FROM `Team_Attributes` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t2`.`team_long_name` = 'KSV Cercle Brugge'",
            "res": 1
        },
        {
            "sql_idx": 174,
            "predicted_sql": "SELECT T2.finishing, T2.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id ORDER BY T1.weight DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `id`,   `finishing`,   `curve` FROM `Player_Attributes` WHERE   `player_api_id` = (     SELECT       `player_api_id`     FROM `Player`     ORDER BY       `weight` DESC     LIMIT 1   ) LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 175,
            "predicted_sql": "SELECT T1.name FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2015/2016' GROUP BY T1.name ORDER BY COUNT(T2.id) DESC LIMIT 4",
            "ground_truth_sql": "SELECT   `t1`.`name` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t2`.`season` = '2015/2016' GROUP BY   `t1`.`name` ORDER BY   COUNT(`t2`.`id`) DESC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 176,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id ORDER BY T2.away_team_goal DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `t2`.`team_long_name` FROM `Match` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`away_team_api_id` = `t2`.`team_api_id` ORDER BY   `t1`.`away_team_goal` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 177,
            "predicted_sql": "SELECT player_name FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`overall_rating` = (     SELECT       MAX(`overall_rating`)     FROM `Player_Attributes`   )",
            "res": 0
        },
        {
            "sql_idx": 178,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `t2`.`overall_rating` > 70 AND `t1`.`height` < 180 THEN `t1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`t1`.`id`) AS `percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        }
    ],
    "formula_1": [
        {
            "sql_idx": 179,
            "predicted_sql": "SELECT T1.driverRef FROM driverStandings AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.raceId = 20 AND T1.position = 5",
            "ground_truth_sql": "SELECT   `T2`.`driverRef` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 20 ORDER BY   `T1`.`q1` DESC LIMIT 5",
            "res": 0
        },
        {
            "sql_idx": 180,
            "predicted_sql": "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 19 AND T2.q2 = ( SELECT MIN(q2) FROM qualifying WHERE raceid = 19 )",
            "ground_truth_sql": "SELECT   `T2`.`surname` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 19 ORDER BY   `T1`.`q2` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 181,
            "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T1`.`country` = 'Germany'",
            "res": 1
        },
        {
            "sql_idx": 182,
            "predicted_sql": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Australian Grand Prix'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Australian Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 183,
            "predicted_sql": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Abu Dhabi Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 184,
            "predicted_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.position = 354",
            "ground_truth_sql": "SELECT   `T1`.`q1` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 354 AND `T2`.`forename` = 'Bruno' AND `T2`.`surname` = 'Senna'",
            "res": 0
        },
        {
            "sql_idx": 185,
            "predicted_sql": "SELECT T1.number FROM qualifying AS T1 JOIN results AS T2 ON T1.qualifyId = T2.raceId WHERE T2.position = 1 AND T1.q3 = '1:54' AND T1.raceId = 903",
            "ground_truth_sql": "SELECT   `T2`.`number` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 903 AND `T1`.`q3` LIKE '1:54%'",
            "res": 0
        },
        {
            "sql_idx": 186,
            "predicted_sql": "SELECT COUNT(T1.driverid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.position IS NULL",
            "ground_truth_sql": "SELECT   COUNT(`T3`.`driverId`) FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T1`.`year` = 2007 AND `T1`.`name` = 'Bahrain Grand Prix' AND `T2`.`time` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 187,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`raceId` = 592 AND NOT `T2`.`time` IS NULL AND NOT `T1`.`dob` IS NULL ORDER BY   `T1`.`dob` ASC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 188,
            "predicted_sql": "SELECT T1.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.lap = 161 AND T2.time = '1:27'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`forename`,   `T2`.`surname`,   `T2`.`url` FROM `lapTimes` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 161 AND `T1`.`time` LIKE '1:27%'",
            "res": 0
        },
        {
            "sql_idx": 189,
            "predicted_sql": "SELECT T1.location, T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Malaysian Grand Prix'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Malaysian Grand Prix'",
            "res": 0
        },
        {
            "sql_idx": 190,
            "predicted_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`url` FROM `constructorResults` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T2`.`constructorId` = `T1`.`constructorId` WHERE   `T1`.`raceId` = 9 ORDER BY   `T1`.`points` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 191,
            "predicted_sql": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q3 = '1:33' AND T2.raceid = 45",
            "ground_truth_sql": "SELECT   `T2`.`code` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 45 AND `T1`.`q3` LIKE '1:33%'",
            "res": 0
        },
        {
            "sql_idx": 192,
            "predicted_sql": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901",
            "ground_truth_sql": "SELECT   `T2`.`url` FROM `races` AS `T1` INNER JOIN `seasons` AS `T2`   ON `T2`.`year` = `T1`.`year` WHERE   `T1`.`raceId` = 901",
            "res": 1
        },
        {
            "sql_idx": 193,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 872 ORDER BY T1.dob DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`raceId` = 872 AND NOT `T2`.`time` IS NULL ORDER BY   `T1`.`dob` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 194,
            "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid ORDER BY T2.fastestlapspeed DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`nationality` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` ORDER BY   `T2`.`fastestLapSpeed` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 195,
            "predicted_sql": "SELECT (T1.fastestLapSpeed - T2.fastestLapSpeed) * 100 / T2.fastestLapSpeed FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta' ) AND T1.raceId = 853 AND T2.raceId = 854",
            "ground_truth_sql": "SELECT   (     SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END) - SUM(CASE WHEN `T2`.`raceId` = 854 THEN `T2`.`fastestLapSpeed` ELSE 0 END)   ) * 100 / SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END) FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`forename` = 'Paul' AND `T1`.`surname` = 'di Resta'",
            "res": 0
        },
        {
            "sql_idx": 196,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.position IS NOT NULL THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.position) AS completion_rate FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.date = '1983-07-16'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN NOT `T2`.`time` IS NULL THEN `T2`.`driverId` END) AS DOUBLE) * 100 / COUNT(`T2`.`driverId`) FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` WHERE   `T1`.`date` = '1983-07-16'",
            "res": 0
        },
        {
            "sql_idx": 197,
            "predicted_sql": "SELECT name FROM races ORDER BY YEAR(date) ASC, MONTH(date) ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `name` FROM `races` WHERE   DATE_FORMAT(CAST(`date` AS DATETIME), '%Y') = (     SELECT       DATE_FORMAT(CAST(`date` AS DATETIME), '%Y')     FROM `races`     ORDER BY       `date` ASC     LIMIT 1   )   AND DATE_FORMAT(CAST(`date` AS DATETIME), '%m') = (     SELECT       DATE_FORMAT(CAST(`date` AS DATETIME), '%m')     FROM `races`     ORDER BY       `date` ASC     LIMIT 1   )",
            "res": 0
        },
        {
            "sql_idx": 198,
            "predicted_sql": "SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN driverstandings AS T2 ON T1.driverid = T2.driverid ORDER BY T2.points DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T3`.`forename`,   `T3`.`surname`,   `T2`.`points` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` ORDER BY   `T2`.`points` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 199,
            "predicted_sql": "SELECT T1.time, T2.forename, T2.surname, T3.name FROM laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T1.raceid = T3.raceid ORDER BY T1.milliseconds LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`milliseconds`,   `T1`.`forename`,   `T1`.`surname`,   `T3`.`name` FROM `drivers` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T2`.`raceId` = `T3`.`raceId` ORDER BY   `T2`.`milliseconds` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 200,
            "predicted_sql": "SELECT AVG(T2.milliseconds) AS average_lap_time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Malaysian Grand Prix' AND T3.year = 2009",
            "ground_truth_sql": "SELECT   AVG(`T2`.`milliseconds`) FROM `races` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis'   AND `T3`.`surname` = 'Hamilton'   AND `T1`.`year` = 2009   AND `T1`.`name` = 'Malaysian Grand Prix'",
            "res": 0
        },
        {
            "sql_idx": 201,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T2.position) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.year >= 2010 AND T3.surname = 'Hamilton'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`position` <> 1 THEN `T2`.`position` END) AS DOUBLE) * 100 / COUNT(`T2`.`driverStandingsId`) FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`surname` = 'Hamilton' AND `T1`.`year` >= 2010",
            "res": 0
        },
        {
            "sql_idx": 202,
            "predicted_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.wins) AS max_wins, MAX(T2.points) AS max_points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY max_wins DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname`,   `T1`.`nationality`,   MAX(`T2`.`points`) FROM `drivers` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`wins` >= 1 GROUP BY   `T1`.`forename`,   `T1`.`surname`,   `T1`.`nationality` ORDER BY   COUNT(`T2`.`wins`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 203,
            "predicted_sql": "SELECT T1.dob, T1.surname FROM drivers AS T1 WHERE T1.nationality = 'Japanese' ORDER BY T1.dob DESC LIMIT 1",
            "ground_truth_sql": "SELECT   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`dob` AS DATETIME), '%Y'),   `forename`,   `surname` FROM `drivers` WHERE   `nationality` = 'Japanese' ORDER BY   `dob` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 204,
            "predicted_sql": "SELECT T1.name AS race_name, T2.name AS circuit_name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE MONTH(T1.date) = 9 AND YEAR(T1.date) = 2005",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name`,   `T1`.`name`,   `T1`.`location` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`year` = 2005 AND DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%m') = '09'",
            "res": 1
        },
        {
            "sql_idx": 205,
            "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
            "ground_truth_sql": "SELECT   `T1`.`name` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Alex' AND `T3`.`surname` = 'Yoong' AND `T2`.`position` < 20",
            "res": 0
        },
        {
            "sql_idx": 206,
            "predicted_sql": "SELECT T1.name AS race_name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T1`.`year` FROM `races` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Michael' AND `T3`.`surname` = 'Schumacher' ORDER BY   `T2`.`milliseconds` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 207,
            "predicted_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T2`.`points` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis' AND `T3`.`surname` = 'Hamilton' ORDER BY   `T1`.`year` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 208,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.country = 'Germany' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T1`.`country` = 'Germany' THEN `T2`.`circuitID` END) AS DOUBLE) * 100 / COUNT(`T2`.`circuitId`) FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'European Grand Prix'",
            "res": 0
        },
        {
            "sql_idx": 209,
            "predicted_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
            "ground_truth_sql": "SELECT   `lat`,   `lng` FROM `circuits` WHERE   `name` = 'Silverstone Circuit'",
            "res": 1
        },
        {
            "sql_idx": 210,
            "predicted_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
            "ground_truth_sql": "SELECT   `circuitRef` FROM `circuits` WHERE   `name` = 'Marina Bay Street Circuit'",
            "res": 1
        },
        {
            "sql_idx": 211,
            "predicted_sql": "SELECT T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitid = T2.circuitid JOIN results AS T3 ON T2.raceid = T3.raceid JOIN drivers AS T4 ON T3.driverid = T4.driverid ORDER BY T4.dob LIMIT 1",
            "ground_truth_sql": "SELECT   `nationality` FROM `drivers` WHERE   NOT `dob` IS NULL ORDER BY   `dob` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 212,
            "predicted_sql": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T2.position = 1",
            "ground_truth_sql": "SELECT   `T3`.`forename`,   `T3`.`surname`,   `T3`.`driverRef` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T1`.`name` = 'Canadian Grand Prix' AND `T2`.`rank` = 1 AND `T1`.`year` = 2007",
            "res": 0
        },
        {
            "sql_idx": 213,
            "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `name` FROM `races` WHERE   `raceId` IN (     SELECT       `raceId`     FROM `results`     WHERE       `rank` = 1       AND `driverId` = (         SELECT           `driverId`         FROM `drivers`         WHERE           `forename` = 'Lewis' AND `surname` = 'Hamilton'       )   )",
            "res": 0
        },
        {
            "sql_idx": 214,
            "predicted_sql": "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
            "ground_truth_sql": "SELECT   `T2`.`fastestLapSpeed` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` WHERE   `T1`.`name` = 'Spanish Grand Prix'   AND `T1`.`year` = 2009   AND NOT `T2`.`fastestLapSpeed` IS NULL ORDER BY   `T2`.`fastestLapSpeed` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 215,
            "predicted_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Chinese Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2008",
            "ground_truth_sql": "SELECT   `T2`.`positionOrder` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis'   AND `T3`.`surname` = 'Hamilton'   AND `T1`.`name` = 'Chinese Grand Prix'   AND `T1`.`year` = 2008",
            "res": 1
        },
        {
            "sql_idx": 216,
            "predicted_sql": "SELECT T2.time FROM driverstandings AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.raceid = ( SELECT raceid FROM races WHERE name = 'Chinese Grand Prix' AND YEAR = 2008 ) AND T1.position = 2",
            "ground_truth_sql": "SELECT   `T1`.`time` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T1`.`rank` = 2 AND `T2`.`name` = 'Chinese Grand Prix' AND `T2`.`year` = 2008",
            "res": 0
        },
        {
            "sql_idx": 217,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = '2008 Chinese Grand Prix' AND T1.position IS NOT NULL",
            "ground_truth_sql": "SELECT COUNT(*) FROM (SELECT `T1`.`driverId` FROM `results` AS `T1` INNER JOIN `races` AS `T2` ON `T1`.`raceId` = `T2`.`raceId` WHERE `T2`.`name` = 'Chinese Grand Prix' AND `T2`.`year` = 2008 AND `T1`.`time` IS NOT NULL GROUP BY `T1`.`driverId` HAVING COUNT(`T2`.`raceId`) > 0) AS derived_table",
            "res": 0
        },
        {
            "sql_idx": 218,
            "predicted_sql": "SELECT (SUM(T1.milliseconds) - SUM(T2.milliseconds)) * 100.0 / SUM(T2.milliseconds) FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = ( SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 ) AND T1.position = 1 AND T2.position = 2",
            "ground_truth_sql": "WITH `time_in_seconds` AS (   SELECT     `T1`.`positionOrder`,     CASE       WHEN `T1`.`positionOrder` = 1       THEN (         CAST(SUBSTR(`T1`.`time`, 1, 1) AS DOUBLE) * 3600       ) + (         CAST(SUBSTR(`T1`.`time`, 3, 2) AS DOUBLE) * 60       ) + CAST(SUBSTR(`T1`.`time`, 6) AS DOUBLE)       ELSE CAST(SUBSTR(`T1`.`time`, 2) AS DOUBLE)     END AS `time_seconds`   FROM `results` AS `T1`   INNER JOIN `races` AS `T2`     ON `T1`.`raceId` = `T2`.`raceId`   WHERE     `T2`.`name` = 'Australian Grand Prix'     AND NOT `T1`.`time` IS NULL     AND `T2`.`year` = 2008 ), `champion_time` AS (   SELECT     `time_seconds`   FROM `time_in_seconds`   WHERE     `positionOrder` = 1 ), `last_driver_incremental` AS (   SELECT     `time_seconds`   FROM `time_in_seconds`   WHERE     `positionOrder` = (       SELECT         MAX(`positionOrder`)       FROM `time_in_seconds`     ) ) SELECT   (     CAST((       SELECT         `time_seconds`       FROM `last_driver_incremental`     ) AS DOUBLE) * 100   ) / (     SELECT       `time_seconds` + (         SELECT           `time_seconds`         FROM `last_driver_incremental`       )     FROM `champion_time`   )",
            "res": 1
        },
        {
            "sql_idx": 219,
            "predicted_sql": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'",
            "ground_truth_sql": "SELECT   COUNT(`circuitId`) FROM `circuits` WHERE   `location` = 'Adelaide' AND `country` = 'Australia'",
            "res": 1
        },
        {
            "sql_idx": 220,
            "predicted_sql": "SELECT MAX(T1.points) FROM constructorstandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorid = T2.constructorid WHERE T2.nationality = 'British'",
            "ground_truth_sql": "SELECT   MAX(`T1`.`points`) FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T2`.`nationality` = 'British'",
            "res": 0
        },
        {
            "sql_idx": 221,
            "predicted_sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T2.raceid = 291 AND T2.points = 0",
            "ground_truth_sql": "SELECT   `T2`.`name` FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T1`.`points` = 0 AND `T1`.`raceId` = 291",
            "res": 0
        },
        {
            "sql_idx": 222,
            "predicted_sql": "SELECT COUNT(T1.constructorId) FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.points = 0 AND T1.constructorId IN ( SELECT constructorId FROM constructors WHERE nationality = 'Japanese' ) AND T2.raceId IN ( SELECT raceId FROM races GROUP BY raceId HAVING COUNT(raceId) = 2 )",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`raceId`) FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T1`.`points` = 0 AND `T2`.`nationality` = 'Japanese' GROUP BY   `T1`.`constructorId` HAVING   COUNT(`raceId`) = 2",
            "res": 0
        },
        {
            "sql_idx": 223,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.nationality = 'Japanese' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.driverid) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.time IS NOT NULL AND T2.year BETWEEN 2007 AND 2009",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN NOT `T1`.`time` IS NULL THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`raceId`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T1`.`driverId` = `T3`.`driverId` WHERE   `T3`.`nationality` = 'Japanese' AND `T2`.`year` BETWEEN 2007 AND 2009",
            "res": 0
        },
        {
            "sql_idx": 224,
            "predicted_sql": "SELECT AVG(T1.time) AS avg_time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.year < 1975 AND T1.position = 1",
            "ground_truth_sql": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS FLOAT) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS FLOAT) * 60) + CAST(SUBSTR(T1.time, 6, 2) AS FLOAT) + CAST(SUBSTR(T1.time, 9) AS FLOAT) / 1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE NOT T1.time IS NULL), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING NOT AVG(time_seconds) IS NULL",
            "res": 0
        },
        {
            "sql_idx": 225,
            "predicted_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.position = 1",
            "ground_truth_sql": "SELECT   `T1`.`fastestLap` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`year` = 2009 AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 1
        },
        {
            "sql_idx": 226,
            "predicted_sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
            "ground_truth_sql": "SELECT   AVG(`T1`.`fastestLapSpeed`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`year` = 2009 AND `T2`.`name` = 'Spanish Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 227,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.dob < 1985 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.driverid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.year BETWEEN 2000 AND 2005 AND T1.laps > 50",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`T3`.`dob` AS DATETIME), '%Y') < '1985' AND `T1`.`laps` > 50       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(*) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T1`.`driverId` = `T3`.`driverId` WHERE   `T2`.`year` BETWEEN 2000 AND 2005",
            "res": 0
        },
        {
            "sql_idx": 228,
            "predicted_sql": "SELECT COUNT(T1.driverid) FROM Laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.nationality = 'French' AND T1.time < '02:00:00'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`driverId`) FROM `drivers` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   `T1`.`nationality` = 'French'   AND (     CAST(SUBSTR(`T2`.`time`, 1, 2) AS SIGNED) * 60 + CAST(SUBSTR(`T2`.`time`, 4, 2) AS SIGNED) + CAST(SUBSTR(`T2`.`time`, 7, 2) AS DOUBLE) / 1000   ) < 120",
            "res": 0
        },
        {
            "sql_idx": 229,
            "predicted_sql": "SELECT code FROM drivers WHERE nationality = 'American'",
            "ground_truth_sql": "SELECT `code` FROM `drivers` WHERE `Nationality` = 'American'",
            "res": 1
        },
        {
            "sql_idx": 230,
            "predicted_sql": "SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 ORDER BY T1.dob DESC LIMIT 3;",
            "ground_truth_sql": "SELECT COUNT(*) FROM (SELECT `T1`.`nationality` FROM `drivers` AS `T1` ORDER BY `T1`.`dob` DESC LIMIT 3) AS `T3` WHERE `T3`.`nationality` = 'Dutch'",
            "res": 0
        },
        {
            "sql_idx": 231,
            "predicted_sql": "SELECT T1.driverRef FROM drivers AS T1 WHERE T1.nationality = 'German' ORDER BY T1.dob LIMIT 1",
            "ground_truth_sql": "SELECT `driverRef` FROM `drivers` WHERE `nationality` = 'German' ORDER BY `dob` ASC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 232,
            "predicted_sql": "SELECT T1.driverid, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.dob = '1971-01-01' AND T2.fastestlaptime IS NOT NULL",
            "ground_truth_sql": "SELECT   `T2`.`driverId`,   `T2`.`code` FROM `results` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   DATE_FORMAT(CAST(`T2`.`dob` AS DATETIME), '%Y') = '1971'   AND NOT `T1`.`fastestLapTime` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 233,
            "predicted_sql": "SELECT COUNT(*) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN NOT `time` IS NULL THEN 1 ELSE 0 END) FROM `results` WHERE   `statusId` = 2 AND `raceID` < 100 AND `raceId` > 50",
            "res": 0
        },
        {
            "sql_idx": 234,
            "predicted_sql": "SELECT COUNT(*) AS held_times, location, CONCAT(lat, ',', lng) AS coordinates FROM circuits WHERE country = 'Austria' GROUP BY location, CONCAT(lat, ',', lng)",
            "ground_truth_sql": "SELECT DISTINCT   `location`,   `lat`,   `lng` FROM `circuits` WHERE   `country` = 'Austria'",
            "res": 0
        },
        {
            "sql_idx": 235,
            "predicted_sql": "SELECT T2.year, T2.name, T2.date, T2.time FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId ORDER BY T3.dob DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T3`.`year`,   `T3`.`name`,   `T3`.`date`,   `T3`.`time` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T1`.`raceId` = `T3`.`raceId` WHERE   `T1`.`driverId` = (     SELECT       `driverId`     FROM `drivers`     ORDER BY       `dob` DESC     LIMIT 1   ) ORDER BY   `T3`.`date` ASC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 236,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitstops AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'German' AND T1.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY T1.driverid ORDER BY AVG(T2.duration) ASC LIMIT 3",
            "ground_truth_sql": "SELECT   `T2`.`forename`,   `T2`.`surname` FROM `pitStops` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   `T2`.`nationality` = 'German'   AND DATE_FORMAT(CAST(`T2`.`dob` AS DATETIME), '%Y') BETWEEN '1980' AND '1985' GROUP BY   `T2`.`forename`,   `T2`.`surname` ORDER BY   AVG(`T1`.`duration`) LIMIT 3",
            "res": 0
        },
        {
            "sql_idx": 237,
            "predicted_sql": "SELECT T1.forename, T1.surname, T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T2.position = 1",
            "ground_truth_sql": "SELECT   `T1`.`time` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`name` = 'Canadian Grand Prix'   AND `T2`.`year` = 2008   AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 238,
            "predicted_sql": "SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.position LIMIT 1",
            "ground_truth_sql": "SELECT   `T3`.`constructorRef`,   `T3`.`url` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `constructors` AS `T3`   ON `T1`.`constructorId` = `T3`.`constructorId` WHERE   `T2`.`name` = 'Singapore Grand Prix'   AND `T2`.`year` = 2009   AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 240,
            "predicted_sql": "SELECT T1.name, T1.nationality, T2.points FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T2.points DESC LIMIT 1",
            "ground_truth_sql": "SELECT   SUM(`T1`.`points`),   `T2`.`name`,   `T2`.`nationality` FROM `constructorResults` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` INNER JOIN `races` AS `T3`   ON `T3`.`raceid` = `T1`.`raceid` WHERE   `T3`.`name` = 'Monaco Grand Prix' AND `T3`.`year` BETWEEN 1980 AND 2010 GROUP BY   `T2`.`name` ORDER BY   SUM(`T1`.`points`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 241,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid INNER JOIN circuits AS T3 ON T3.circuitid = T2.circuitid WHERE T2.position = 1 AND T3.name = 'Marina Bay Street Circuit' AND T2.raceid = ( SELECT T4.raceid FROM races AS T4 INNER JOIN circuits AS T5 ON T5.circuitid = T4.circuitid WHERE T5.name = 'Marina Bay Street Circuit' AND T4.year = 2008 )",
            "ground_truth_sql": "SELECT   `T2`.`forename`,   `T2`.`surname` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T1`.`raceid` = `T3`.`raceid` WHERE   NOT `q3` IS NULL   AND `T3`.`year` = 2008   AND `T3`.`circuitId` IN (     SELECT       `circuitId`     FROM `circuits`     WHERE       `name` = 'Marina Bay Street Circuit'   ) ORDER BY   CAST(SUBSTR(`q3`, 1, INSTR(`q3`, ':') - 1) AS SIGNED) * 60 + CAST(SUBSTR(`q3`, INSTR(`q3`, ':') + 1, INSTR(`q3`, '.') - INSTR(`q3`, ':') - 1) AS DOUBLE) + CAST(SUBSTR(`q3`, INSTR(`q3`, '.') + 1) AS DOUBLE) / 1000 ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 242,
            "predicted_sql": "SELECT T1.forename, T1.surname, T1.nationality, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid ORDER BY T1.dob DESC LIMIT 1",
            "ground_truth_sql": "SELECT `T1`.`forename`, `T1`.`surname`, `T1`.`nationality`, `T3`.`name` FROM `drivers` AS `T1` INNER JOIN `driverStandings` AS `T2` ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3` ON `T2`.`raceId` = `T3`.`raceId` ORDER BY `T1`.`dob` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 243,
            "predicted_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`driverId`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `status` AS `T3`   ON `T1`.`statusId` = `T3`.`statusId` WHERE   `T3`.`statusId` = 3 AND `T2`.`name` = 'Canadian Grand Prix' GROUP BY   `T1`.`driverId` ORDER BY   COUNT(`T1`.`driverId`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 244,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid ORDER BY T2.time ASC LIMIT 20",
            "ground_truth_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS FLOAT) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS FLOAT) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS FLOAT) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
            "res": 0
        },
        {
            "sql_idx": 245,
            "predicted_sql": "SELECT T1.name, T2.time FROM circuits AS T1 INNER JOIN laptimes AS T2 ON T1.circuitid = T2.raceid WHERE T1.country = 'Italy'",
            "ground_truth_sql": "WITH `fastest_lap_times` AS (   SELECT     `T1`.`raceId`,     `T1`.`FastestLapTime`,     (       CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60     ) + (       CAST(SUBSTR(         `T1`.`FastestLapTime`,         INSTR(`T1`.`FastestLapTime`, ':') + 1,         INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1       ) AS DOUBLE)     ) + (       CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000     ) AS `time_in_seconds`   FROM `results` AS `T1`   WHERE     NOT `T1`.`FastestLapTime` IS NULL ) SELECT   `T1`.`FastestLapTime` AS `lap_record` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `circuits` AS `T3`   ON `T2`.`circuitId` = `T3`.`circuitId` INNER JOIN (   SELECT     MIN(`fastest_lap_times`.`time_in_seconds`) AS `min_time_in_seconds`   FROM `fastest_lap_times`   INNER JOIN `races` AS `T2`     ON `fastest_lap_times`.`raceId` = `T2`.`raceId`   INNER JOIN `circuits` AS `T3`     ON `T2`.`circuitId` = `T3`.`circuitId`   WHERE     `T3`.`country` = 'Italy' ) AS `T4`   ON (     CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60   ) + (     CAST(SUBSTR(       `T1`.`FastestLapTime`,       INSTR(`T1`.`FastestLapTime`, ':') + 1,       INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1     ) AS DOUBLE)   ) + (     CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000   ) = `T4`.`min_time_in_seconds` LIMIT 1",
            "res": 0
        }
    ],
    "superhero": [
        {
            "sql_idx": 239,
            "predicted_sql": "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = '3-D Man'",
            "ground_truth_sql": "SELECT  `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`  ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`  ON `T2`.`power_id` = `T3`.`id` WHERE  `T1`.`superhero_name` = '3-D Man'",
            "res": 1
        },
        {
            "sql_idx": 246,
            "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Super Strength' AND `T1`.`height_cm` > 200",
            "res": 1
        },
        {
            "sql_idx": 247,
            "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T4.colour = 'Blue' AND T3.attribute_name = 'Agility'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` INNER JOIN `colour` AS `T4`   ON `T1`.`eye_colour_id` = `T4`.`id` WHERE   `T3`.`power_name` = 'Agility' AND `T4`.`colour` = 'Blue'",
            "res": 0
        },
        {
            "sql_idx": 248,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T2`.`colour` = 'Blue' AND `T3`.`colour` = 'Blond'",
            "res": 1
        },
        {
            "sql_idx": 249,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC",
            "ground_truth_sql": "SELECT   `superhero_name`,   `height_cm`,   RANK() OVER (ORDER BY `height_cm` DESC) AS `HeightRank` FROM `superhero` INNER JOIN `publisher`   ON `superhero`.`publisher_id` = `publisher`.`id` WHERE   `publisher`.`publisher_name` = 'Marvel Comics'",
            "res": 0
        },
        {
            "sql_idx": 250,
            "predicted_sql": "SELECT T3.colour, COUNT(T1.id) AS cnt FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T3.colour ORDER BY cnt DESC",
            "ground_truth_sql": "SELECT   `colour`.`colour` AS `EyeColor`,   COUNT(`superhero`.`id`) AS `Count`,   RANK() OVER (ORDER BY COUNT(`superhero`.`id`) DESC) AS `PopularityRank` FROM `superhero` INNER JOIN `colour`   ON `superhero`.`eye_colour_id` = `colour`.`id` INNER JOIN `publisher`   ON `superhero`.`publisher_id` = `publisher`.`id` WHERE   `publisher`.`publisher_name` = 'Marvel Comics' GROUP BY   `colour`.`colour`",
            "res": 0
        },
        {
            "sql_idx": 251,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T3.power_name = 'Super Strength' AND T1.publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' )",
            "ground_truth_sql": "SELECT   `superhero_name` FROM `superhero` AS `T1` WHERE   EXISTS(     SELECT       1     FROM `hero_power` AS `T2`     INNER JOIN `superpower` AS `T3`       ON `T2`.`power_id` = `T3`.`id`     WHERE       `T3`.`power_name` = 'Super Strength' AND `T1`.`id` = `T2`.`hero_id`   )   AND EXISTS(     SELECT       1     FROM `publisher` AS `T4`     WHERE       `T4`.`publisher_name` = 'Marvel Comics' AND `T1`.`publisher_id` = `T4`.`id`   )",
            "res": 1
        },
        {
            "sql_idx": 252,
            "predicted_sql": "SELECT T.publisher_name FROM ( SELECT T1.publisher_name, T2.attribute_name, MIN(T2.attribute_value) AS min_attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'Speed' GROUP BY T1.publisher_name, T2.attribute_name ) AS T ORDER BY T.min_attribute_value DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `hero_attribute` AS `T3`   ON `T1`.`id` = `T3`.`hero_id` INNER JOIN `attribute` AS `T4`   ON `T3`.`attribute_id` = `T4`.`id` WHERE   `T4`.`attribute_name` = 'Speed' ORDER BY   `T3`.`attribute_value` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 253,
            "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`eye_colour_id` = `T3`.`id` WHERE   `T2`.`publisher_name` = 'Marvel Comics' AND `T3`.`colour` = 'Gold'",
            "res": 1
        },
        {
            "sql_idx": 254,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` WHERE   `T3`.`attribute_name` = 'Intelligence' ORDER BY   `T2`.`attribute_value` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 255,
            "predicted_sql": "SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T2.superhero_name = 'Copycat'",
            "ground_truth_sql": "SELECT   `T2`.`race` FROM `superhero` AS `T1` INNER JOIN `race` AS `T2`   ON `T1`.`race_id` = `T2`.`id` WHERE   `T1`.`superhero_name` = 'Copycat'",
            "res": 1
        },
        {
            "sql_idx": 256,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'Durability' AND T2.attribute_value < 50",
            "ground_truth_sql": "SELECT   `superhero_name` FROM `superhero` AS `T1` WHERE   EXISTS(     SELECT       1     FROM `hero_attribute` AS `T2`     INNER JOIN `attribute` AS `T3`       ON `T2`.`attribute_id` = `T3`.`id`     WHERE       `T3`.`attribute_name` = 'Durability'       AND `T2`.`attribute_value` < 50       AND `T1`.`id` = `T2`.`hero_id`   )",
            "res": 0
        },
        {
            "sql_idx": 257,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T3.power_name = 'Death Touch'",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Death Touch'",
            "res": 1
        },
        {
            "sql_idx": 258,
            "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T1.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' )",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` INNER JOIN `gender` AS `T4`   ON `T1`.`gender_id` = `T4`.`id` WHERE   `T3`.`attribute_name` = 'Strength'   AND `T2`.`attribute_value` = 100   AND `T4`.`gender` = 'Female'",
            "res": 0
        },
        {
            "sql_idx": 259,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN alignment AS T3 ON T3.id = T2.alignment_id WHERE T3.alignment = 'Bad'",
            "ground_truth_sql": "SELECT   (     CAST(COUNT(*) AS DOUBLE) * 100 / (       SELECT         COUNT(*)       FROM `superhero`     )   ),   CAST(SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) AS DOUBLE) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `alignment` AS `T3`   ON `T3`.`id` = `T1`.`alignment_id` WHERE   `T3`.`alignment` = 'Bad'",
            "res": 0
        },
        {
            "sql_idx": 260,
            "predicted_sql": "SELECT ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ) - ( SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ) AS difference",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id`",
            "res": 0
        },
        {
            "sql_idx": 261,
            "predicted_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
            "ground_truth_sql": "SELECT   `id` FROM `publisher` WHERE   `publisher_name` = 'Star Trek'",
            "res": 1
        },
        {
            "sql_idx": 262,
            "predicted_sql": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `superhero` WHERE   `full_name` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 263,
            "predicted_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
            "ground_truth_sql": "SELECT   AVG(`T1`.`weight_kg`) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` WHERE   `T2`.`gender` = 'Female'",
            "res": 1
        },
        {
            "sql_idx": 264,
            "predicted_sql": "SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T3.id = T2.hero_id INNER JOIN gender AS T4 ON T4.id = T3.gender_id WHERE T4.gender = 'Male' GROUP BY T1.power_name ORDER BY COUNT(T1.power_name) DESC LIMIT 5",
            "ground_truth_sql": "SELECT   `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T3`.`id` = `T2`.`power_id` INNER JOIN `gender` AS `T4`   ON `T4`.`id` = `T1`.`gender_id` WHERE   `T4`.`gender` = 'Male' LIMIT 5",
            "res": 0
        },
        {
            "sql_idx": 265,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 LEFT JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.attribute_name = 'Eye Color' AND T2.attribute_value = 'No Colour'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`height_cm` BETWEEN 170 AND 190 AND `T2`.`colour` = 'No Colour'",
            "res": 0
        },
        {
            "sql_idx": 266,
            "predicted_sql": "SELECT T1.hair_colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.height_cm = 185 AND T2.race = 'human'",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`colour` FROM `superhero` AS `T1` INNER JOIN `race` AS `T2`   ON `T1`.`race_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T1`.`height_cm` = 185 AND `T2`.`race` = 'Human'",
            "res": 0
        },
        {
            "sql_idx": 267,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.height_cm BETWEEN 150 AND 180",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`height_cm` BETWEEN 150 AND 180",
            "res": 0
        },
        {
            "sql_idx": 268,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.gender_id = ( SELECT id FROM gender WHERE gender = 'Male' ) AND T1.weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero )",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` WHERE   `T2`.`gender` = 'Male'   AND `T1`.`weight_kg` * 100 > (     SELECT       AVG(`weight_kg`)     FROM `superhero`   ) * 79",
            "res": 1
        },
        {
            "sql_idx": 269,
            "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`power_name` FROM `hero_power` AS `T1` INNER JOIN `superpower` AS `T2`   ON `T1`.`power_id` = `T2`.`id` WHERE   `T1`.`hero_id` = 1",
            "res": 1
        },
        {
            "sql_idx": 270,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T2.id = T1.power_id WHERE T2.power_name = 'Stealth'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`hero_id`) FROM `hero_power` AS `T1` INNER JOIN `superpower` AS `T2`   ON `T1`.`power_id` = `T2`.`id` WHERE   `T2`.`power_name` = 'Stealth'",
            "res": 0
        },
        {
            "sql_idx": 271,
            "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1",
            "ground_truth_sql": "SELECT `T1`.`full_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2` ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3` ON `T2`.`attribute_id` = `T3`.`id` WHERE `T3`.`attribute_name` = 'Strength' ORDER BY `T2`.`attribute_value` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 272,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.attribute_name = 'durability' AND T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T3`.`id` = `T2`.`attribute_id` INNER JOIN `publisher` AS `T4`   ON `T4`.`id` = `T1`.`publisher_id` WHERE   `T4`.`publisher_name` = 'Dark Horse Comics'   AND `T3`.`attribute_name` = 'Durability' ORDER BY   `T2`.`attribute_value` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 273,
            "predicted_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T1.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' )",
            "ground_truth_sql": "SELECT   `T1`.`eye_colour_id`,   `T1`.`hair_colour_id`,   `T1`.`skin_colour_id` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T2`.`id` = `T1`.`publisher_id` INNER JOIN `gender` AS `T3`   ON `T3`.`id` = `T1`.`gender_id` WHERE   `T2`.`publisher_name` = 'Dark Horse Comics' AND `T3`.`gender` = 'Female'",
            "res": 1
        },
        {
            "sql_idx": 274,
            "predicted_sql": "SELECT T1.superhero_name, T3.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.hair_colour_id = T2.eye_colour_id AND T2.hair_colour_id = T2.skin_colour_id",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name`,   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`eye_colour_id` = `T1`.`hair_colour_id`   AND `T1`.`eye_colour_id` = `T1`.`skin_colour_id`",
            "res": 0
        },
        {
            "sql_idx": 275,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.skin_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' ) THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM superhero AS T1 WHERE T1.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' )",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T3`.`colour` = 'Blue' THEN `T1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`skin_colour_id` = `T3`.`id` WHERE   `T2`.`gender` = 'Female'",
            "res": 0
        },
        {
            "sql_idx": 276,
            "predicted_sql": "SELECT COUNT(T2.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`power_id`) FROM `hero_power` AS `T1` INNER JOIN `superhero` AS `T2`   ON `T1`.`hero_id` = `T2`.`id` WHERE   `T2`.`superhero_name` = 'Amazo'",
            "res": 0
        },
        {
            "sql_idx": 277,
            "predicted_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
            "ground_truth_sql": "SELECT   `T1`.`height_cm` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T2`.`colour` = 'Amber'",
            "res": 1
        },
        {
            "sql_idx": 278,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` AND `T1`.`hair_colour_id` = `T2`.`id` WHERE   `T2`.`colour` = 'Black'",
            "res": 1
        },
        {
            "sql_idx": 279,
            "predicted_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' )",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `alignment` AS `T2`   ON `T1`.`alignment_id` = `T2`.`id` WHERE   `T2`.`alignment` = 'Neutral'",
            "res": 1
        },
        {
            "sql_idx": 280,
            "predicted_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' )",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`hero_id`) FROM `hero_attribute` AS `T1` INNER JOIN `attribute` AS `T2`   ON `T1`.`attribute_id` = `T2`.`id` WHERE   `T2`.`attribute_name` = 'Strength'   AND `T1`.`attribute_value` = (     SELECT       MAX(`attribute_value`)     FROM `hero_attribute`   )",
            "res": 1
        },
        {
            "sql_idx": 281,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' AND `T3`.`gender` = 'Female' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `gender` AS `T3`   ON `T1`.`gender_id` = `T3`.`id` ",
            "res": 0
        },
        {
            "sql_idx": 282,
            "predicted_sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler' ) AS difference",
            "ground_truth_sql": "SELECT   (     SELECT       `weight_kg`     FROM `superhero`     WHERE       `full_name` LIKE 'Emil Blonsky'   ) - (     SELECT       `weight_kg`     FROM `superhero`     WHERE       `full_name` LIKE 'Charles Chandler'   ) AS `CALCULATE`",
            "res": 1
        },
        {
            "sql_idx": 283,
            "predicted_sql": "SELECT AVG(height_cm) AS average_height FROM superhero",
            "ground_truth_sql": "SELECT   CAST(SUM(`height_cm`) AS DOUBLE) / COUNT(`id`) FROM `superhero`",
            "res": 0
        },
        {
            "sql_idx": 284,
            "predicted_sql": "SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination'",
            "ground_truth_sql": "SELECT   `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T1`.`superhero_name` = 'Abomination'",
            "res": 1
        },
        {
            "sql_idx": 285,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
            "ground_truth_sql": "SELECT `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2` ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3` ON `T2`.`attribute_id` = `T3`.`id`WHERE `T3`.`attribute_name` = 'Speed' AND `T2`.`attribute_value` = (SELECT MAX(`attribute_value`) FROM `hero_attribute` AS `T2b` WHERE `T2b`.`attribute_id` = `T3`.`id` ) LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 286,
            "predicted_sql": "SELECT T1.attribute_name, T2.attribute_value FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T3.id = T2.hero_id WHERE T3.superhero_name = '3-D Man'",
            "ground_truth_sql": "SELECT   `T3`.`attribute_name`,   `T2`.`attribute_value` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` WHERE   `T1`.`superhero_name` = '3-D Man'",
            "res": 1
        },
        {
            "sql_idx": 287,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T2.id = T1.eye_colour_id WHERE T2.colour = 'Blue' INNER JOIN colour AS T3 ON T3.id = T1.hair_colour_id WHERE T3.colour = 'Brown'",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T2`.`colour` = 'Blue' AND `T3`.`colour` = 'Brown'",
            "res": 0
        },
        {
            "sql_idx": 288,
            "predicted_sql": "SELECT T1.publisher_name FROM publisher AS T1 JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
            "ground_truth_sql": "SELECT   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`superhero_name` IN ('Hawkman', 'Karate Kid', 'Speedy')",
            "res": 1
        },
        {
            "sql_idx": 289,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM superhero AS T1",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`colour` = 'Blue' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id`",
            "res": 0
        },
        {
            "sql_idx": 290,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender_id = 1 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero AS T1",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`gender` = 'Male' THEN `T1`.`id` ELSE NULL END) AS DOUBLE) / COUNT(CASE WHEN `T2`.`gender` = 'Female' THEN `T1`.`id` ELSE NULL END) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id`",
            "res": 0
        },
        {
            "sql_idx": 291,
            "predicted_sql": "SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.full_name = 'Karen Beecher-Duncan'",
            "ground_truth_sql": "SELECT   `T2`.`colour` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`full_name` = 'Karen Beecher-Duncan'",
            "res": 1
        },
        {
            "sql_idx": 292,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero AS T1 WHERE T1.weight_kg = 0",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`id` = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`id` = 1 THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`weight_kg` = 0 OR `T1`.`weight_kg` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 293,
            "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `alignment` AS `T2`   ON `T1`.`alignment_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`skin_colour_id` = `T3`.`id` WHERE   `T2`.`alignment` = 'Bad' AND `T3`.`colour` = 'Green'",
            "res": 1
        },
        {
            "sql_idx": 294,
            "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_power AS T2 ON T1.id = T2.hero_id JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Wind Control' ORDER BY   `T1`.`superhero_name`",
            "res": 1
        },
        {
            "sql_idx": 295,
            "predicted_sql": "SELECT T1.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Phoenix Force'",
            "ground_truth_sql": "SELECT   `T4`.`gender` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` INNER JOIN `gender` AS `T4`   ON `T1`.`gender_id` = `T4`.`id` WHERE   `T3`.`power_name` = 'Phoenix Force'",
            "res": 0
        },
        {
            "sql_idx": 296,
            "predicted_sql": "SELECT T1.publisher_name, COUNT(T2.id) AS superhero_count FROM publisher AS T1 JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name IN ('DC Comics', 'Marvel Comics') GROUP BY T1.publisher_name ORDER BY superhero_count DESC LIMIT 1",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id`",
            "res": 0
        }
    ],
    "codebase_community": [
        {
            "sql_idx": 297,
            "predicted_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ( 'Harlan', 'Jarrod Dixon' ) )",
            "ground_truth_sql": "SELECT   `DisplayName` FROM `users` WHERE   `DisplayName` IN ('Harlan', 'Jarrod Dixon')   AND `Reputation` = (     SELECT       MAX(`Reputation`)     FROM `users`     WHERE       `DisplayName` IN ('Harlan', 'Jarrod Dixon')   )",
            "res": 0
        },
        {
            "sql_idx": 298,
            "predicted_sql": "SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2011",
            "ground_truth_sql": "SELECT   `DisplayName` FROM `users` WHERE   DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2011'",
            "res": 1
        },
        {
            "sql_idx": 299,
            "predicted_sql": "SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'",
            "ground_truth_sql": "SELECT   COUNT(`Id`) FROM `users` WHERE   DATE(`LastAccessDate`) > '2014-09-01'",
            "res": 0
        },
        {
            "sql_idx": 300,
            "predicted_sql": "SELECT T1.OwnerDisplayName FROM posts AS T1 WHERE T1.Title = 'Eliciting priors from experts'",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Eliciting priors from experts'",
            "res": 0
        },
        {
            "sql_idx": 301,
            "predicted_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T2`.`DisplayName` = 'csgillespie'",
            "res": 1
        },
        {
            "sql_idx": 302,
            "predicted_sql": "SELECT T1.UserDisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY T1.CreationDate DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`LastEditorUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Examples for teaching: Correlation does not mean causation'",
            "res": 0
        },
        {
            "sql_idx": 303,
            "predicted_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score > 19",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Score` >= 20 AND `T2`.`Age` > 65",
            "res": 1
        },
        {
            "sql_idx": 304,
            "predicted_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
            "ground_truth_sql": "SELECT   `T2`.`Body` FROM `tags` AS `T1` INNER JOIN `posts` AS `T2`   ON `T2`.`Id` = `T1`.`ExcerptPostId` WHERE   `T1`.`TagName` = 'bayesian'",
            "res": 1
        },
        {
            "sql_idx": 305,
            "predicted_sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
            "ground_truth_sql": "SELECT   AVG(`T1`.`Score`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T2`.`DisplayName` = 'csgillespie'",
            "res": 1
        },
        {
            "sql_idx": 306,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.OwnerUserId IN ( SELECT Id FROM users WHERE Age > 65 ) THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.Id) FROM posts AS T1 WHERE T1.Score > 5",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Age` > 65 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Score` > 5",
            "res": 0
        },
        {
            "sql_idx": 307,
            "predicted_sql": "SELECT COUNT(T1.FavoriteCount) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39' AND T2.UserId = 3025",
            "ground_truth_sql": "SELECT   `T1`.`FavoriteCount` FROM `posts` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` WHERE   `T2`.`CreationDate` = '2014-04-23 20:29:39.0' AND `T2`.`UserId` = 3025",
            "res": 0
        },
        {
            "sql_idx": 308,
            "predicted_sql": "SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'not well-finished' ELSE 'well-finished' END AS status FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2013-07-12 09:08:18.0' AND T2.UserId = 23853",
            "ground_truth_sql": "SELECT   CASE     WHEN `T2`.`ClosedDate` IS NULL     THEN 'NOT well-finished'     ELSE 'well-finished'   END AS `resylt` FROM `comments` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T1`.`UserId` = 23853 AND `T1`.`CreationDate` = '2013-07-12 09:08:18.0'",
            "res": 1
        },
        {
            "sql_idx": 309,
            "predicted_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`DisplayName` = 'Tiago Pasqualini'",
            "res": 1
        },
        {
            "sql_idx": 310,
            "predicted_sql": "SELECT T1.UserDisplayName FROM comments AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.Id = 6347",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Id` = 6347",
            "res": 0
        },
        {
            "sql_idx": 311,
            "predicted_sql": "SELECT CAST(COUNT(T1.Id) AS DECIMAL(10, 2)) / COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerUserId = 24",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT `T2`.`Id`) AS DOUBLE) / COUNT(DISTINCT `T1`.`Id`) FROM `votes` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`UserId` = `T2`.`OwnerUserId` WHERE   `T1`.`UserId` = 24",
            "res": 0
        },
        {
            "sql_idx": 312,
            "predicted_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
            "ground_truth_sql": "SELECT   `ViewCount` FROM `posts` WHERE   `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
            "res": 1
        },
        {
            "sql_idx": 313,
            "predicted_sql": "SELECT Text FROM comments WHERE Score = 17",
            "ground_truth_sql": "SELECT   `Text` FROM `comments` WHERE   `Score` = 17",
            "res": 1
        },
        {
            "sql_idx": 314,
            "predicted_sql": "SELECT DISTINCT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Text` = 'thank you user93!'",
            "res": 1
        },
        {
            "sql_idx": 315,
            "predicted_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName`,   `T1`.`Reputation` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T2`.`Title` = 'Understanding what Dassault iSight is doing?'",
            "res": 1
        },
        {
            "sql_idx": 316,
            "predicted_sql": "SELECT T1.OwnerDisplayName FROM posts AS T1 WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Open source tools for visualizing multi-dimensional data?'",
            "res": 0
        },
        {
            "sql_idx": 317,
            "predicted_sql": "SELECT T2.Text FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T1.UserId = T2.UserId AND T1.Text = 'Why square the difference instead of taking the absolute value in standard deviation?'",
            "ground_truth_sql": "SELECT   `T2`.`Comment` FROM `posts` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` WHERE   `T1`.`Title` = 'Why square the difference instead of taking the absolute value in standard deviation?'",
            "res": 0
        },
        {
            "sql_idx": 318,
            "predicted_sql": "SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T2.PostId IN ( SELECT Id FROM posts WHERE Title LIKE '%variance%' )",
            "ground_truth_sql": "SELECT   `T3`.`DisplayName`,   `T1`.`Title` FROM `posts` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` INNER JOIN `users` AS `T3`   ON `T3`.`Id` = `T2`.`UserId` WHERE   `T2`.`BountyAmount` = 50 AND `T1`.`Title` LIKE '%variance%'",
            "res": 0
        },
        {
            "sql_idx": 319,
            "predicted_sql": "SELECT AVG(T1.ViewCount) AS avg_view_count, T1.Title, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Tags LIKE '%<humor>%' GROUP BY T1.Title, T2.Text",
            "ground_truth_sql": "SELECT AVG(T2.ViewCount) AS average_view_count, T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text",
            "res": 0
        },
        {
            "sql_idx": 320,
            "predicted_sql": "SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Id) > 5",
            "ground_truth_sql": "SELECT   COUNT(`UserId`) FROM (   SELECT     `UserId`,     COUNT(`Name`) AS `num`   FROM `badges`   GROUP BY     `UserId` ) AS `T` WHERE   `T`.`num` > 5",
            "res": 0
        },
        {
            "sql_idx": 321,
            "predicted_sql": "SELECT DISTINCT T1.Id FROM posts AS T1 INNER JOIN ( SELECT PostId, COUNT(*) AS cnt FROM postHistory GROUP BY PostId HAVING cnt = 1 ) AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount >= 1000",
            "ground_truth_sql": "SELECT   `T2`.`UserId` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T3`.`ViewCount` >= 1000 GROUP BY   `T2`.`UserId` HAVING   COUNT(DISTINCT `T2`.`PostHistoryTypeId`) = 1",
            "res": 0
        },
        {
            "sql_idx": 322,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN YEAR(Date) = 2010 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / SUM(CASE WHEN YEAR(Date) = 2011 THEN 1 ELSE 0 END) AS percentage_difference FROM badges WHERE Name = 'Student'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2010' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`) - CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2011' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`) FROM `badges` WHERE   `Name` = 'Student'",
            "res": 0
        },
        {
            "sql_idx": 323,
            "predicted_sql": "SELECT AVG(T1.UpVotes) AS average_up_votes, AVG(T1.Age) AS average_user_age FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.Id HAVING COUNT(T2.Id) > 10",
            "ground_truth_sql": "SELECT   AVG(`T1`.`UpVotes`),   AVG(`T1`.`Age`) FROM `users` AS `T1` INNER JOIN (   SELECT     `OwnerUserId`,     COUNT(*) AS `post_count`   FROM `posts`   GROUP BY     `OwnerUserId`   HAVING     `post_count` > 10 ) AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId`",
            "res": 0
        },
        {
            "sql_idx": 324,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / SUM(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 ELSE 0 END) AS ratio FROM votes;",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2010'       THEN 1       ELSE 0     END   ) AS DOUBLE) / SUM(     CASE       WHEN DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2011'       THEN 1       ELSE 0     END   ) FROM `votes`",
            "res": 0
        },
        {
            "sql_idx": 325,
            "predicted_sql": "SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`PostId` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T1`.`DisplayName` = 'slashnick' ORDER BY   `T3`.`AnswerCount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 326,
            "predicted_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T1.ViewCount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T1`.`DisplayName` = 'Harvey Motulsky' OR `T1`.`DisplayName` = 'Noah Snyder' GROUP BY   `T1`.`DisplayName` ORDER BY   SUM(`T3`.`ViewCount`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 327,
            "predicted_sql": "SELECT T3.TagName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN tags AS T3 ON T3.Id = T2.PostId WHERE T1.OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Mark Meckes' ) AND T1.CommentCount = 0",
            "ground_truth_sql": "SELECT   `T3`.`Tags` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T3`.`Id` = `T2`.`PostId` WHERE   `T1`.`DisplayName` = 'Mark Meckes' AND `T3`.`CommentCount` = 0",
            "res": 0
        },
        {
            "sql_idx": 328,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.Tags LIKE '%<r>%' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T3`.`TagName` = 'r' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `tags` AS `T3`   ON `T3`.`ExcerptPostId` = `T2`.`PostId` WHERE   `T1`.`DisplayName` = 'Community'",
            "res": 0
        },
        {
            "sql_idx": 329,
            "predicted_sql": "SELECT SUM(CASE WHEN T2.OwnerDisplayName = 'Mornington' THEN T1.ViewCount ELSE 0 END) - SUM(CASE WHEN T2.OwnerDisplayName = 'Amos' THEN T1.ViewCount ELSE 0 END) AS diff FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`DisplayName` = 'Mornington' THEN `T3`.`ViewCount` ELSE 0 END) - SUM(CASE WHEN `T1`.`DisplayName` = 'Amos' THEN `T3`.`ViewCount` ELSE 0 END) AS `diff` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T3`.`Id` = `T2`.`PostId`",
            "res": 0
        },
        {
            "sql_idx": 330,
            "predicted_sql": "SELECT AVG(T1.Id) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE YEAR(T2.CreationDate) = 2010 AND T2.AnswerCount <= 2",
            "ground_truth_sql": "SELECT   CAST(COUNT(`T1`.`Id`) AS DOUBLE) / 12 FROM `postLinks` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T2`.`AnswerCount` <= 2   AND DATE_FORMAT(CAST(`T1`.`CreationDate` AS DATETIME), '%Y') = '2010'",
            "res": 0
        },
        {
            "sql_idx": 331,
            "predicted_sql": "SELECT MIN(CreationDate) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl'",
            "ground_truth_sql": "SELECT   `T2`.`CreationDate` FROM `users` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T1`.`DisplayName` = 'chl' ORDER BY   `T2`.`CreationDate` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 332,
            "predicted_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' ORDER BY T2.Date ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `badges` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Name` = 'Autobiographer' ORDER BY   `T2`.`Date` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 333,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`Location` = 'United Kingdom' AND `T2`.`FavoriteCount` >= 4",
            "res": 0
        },
        {
            "sql_idx": 334,
            "predicted_sql": "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`Id`,   `T2`.`Title` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`DisplayName` = 'Harvey Motulsky' ORDER BY   `T2`.`ViewCount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 335,
            "predicted_sql": "SELECT Id, OwnerDisplayName FROM posts WHERE YEAR(CreationDate) = 2010 ORDER BY FavoriteCount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`OwnerUserId`,   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   DATE_FORMAT(CAST(`T1`.`CreationDate` AS DATETIME), '%Y') = '2010' ORDER BY   `T2`.`FavoriteCount` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 336,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN YEAR(T1.CreationDate) = 2011 AND T2.Reputation > 1000 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`T2`.`CreaionDate` AS DATETIME), '%Y') = '2011'       AND `T1`.`Reputation` > 1000       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId`",
            "res": 0
        },
        {
            "sql_idx": 337,
            "predicted_sql": "SELECT SUM(T1.ViewCount) AS total_views, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets' ORDER BY T1.LasActivityDate DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`ViewCount`,   `T3`.`DisplayName` FROM `postHistory` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` INNER JOIN `users` AS `T3`   ON `T2`.`LastEditorUserId` = `T3`.`Id` WHERE   `T1`.`Text` = 'Computer Game Datasets'",
            "res": 0
        },
        {
            "sql_idx": 338,
            "predicted_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score = ( SELECT MAX(Score) FROM posts )",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`Id`) FROM `posts` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` GROUP BY   `T1`.`Id` ORDER BY   `T1`.`Score` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 339,
            "predicted_sql": "SELECT T2.Text, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Analysing wind data with R' ORDER BY T2.CreationDate DESC LIMIT 10",
            "ground_truth_sql": "SELECT   `T3`.`Text`,   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` INNER JOIN `comments` AS `T3`   ON `T2`.`Id` = `T3`.`PostId` WHERE   `T2`.`Title` = 'Analysing wind data with R' ORDER BY   `T1`.`CreationDate` DESC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 340,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.Reputation DESC LIMIT 1",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Score` > 50 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` INNER JOIN (   SELECT     MAX(`Reputation`) AS `max_reputation`   FROM `users` ) AS `T3`   ON `T1`.`Reputation` = `T3`.`max_reputation`",
            "res": 0
        },
        {
            "sql_idx": 341,
            "predicted_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
            "ground_truth_sql": "SELECT   `ExcerptPostId`,   `WikiPostId` FROM `tags` WHERE   `TagName` = 'sample'",
            "res": 1
        },
        {
            "sql_idx": 342,
            "predicted_sql": "SELECT T1.Reputation, T1.UpVotes FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'fine, you win :)'",
            "ground_truth_sql": "SELECT   `T2`.`Reputation`,   `T2`.`UpVotes` FROM `comments` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`UserId` = `T2`.`Id` WHERE   `T1`.`Text` = 'fine, you win :)'",
            "res": 1
        },
        {
            "sql_idx": 343,
            "predicted_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `Text` FROM `comments` WHERE   `PostId` IN (     SELECT       `Id`     FROM `posts`     WHERE       `ViewCount` BETWEEN 100 AND 150   ) ORDER BY   `Score` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 344,
            "predicted_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `comments` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T2`.`CommentCount` = 1 AND `T2`.`Score` = 0",
            "res": 0
        },
        {
            "sql_idx": 345,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.UpVotes = 0 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`UpVotes` = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) AS `per` FROM `users` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Score` BETWEEN 5 AND 10",
            "res": 0
        }
    ],
    "card_games": [
        {
            "sql_idx": 346,
            "predicted_sql": "SELECT name FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   NOT `cardKingdomFoilId` IS NULL AND NOT `cardKingdomId` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 347,
            "predicted_sql": "SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   `borderColor` = 'borderless'   AND (     `cardKingdomId` IS NULL OR `cardKingdomId` IS NULL   )",
            "res": 0
        },
        {
            "sql_idx": 348,
            "predicted_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`id` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`format` = 'gladiator'   AND `T2`.`status` = 'Banned'   AND `T1`.`rarity` = 'mythic'",
            "res": 0
        },
        {
            "sql_idx": 349,
            "predicted_sql": "SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.mtgoId = T1.uuid WHERE T2.types = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`status` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`type` = 'Artifact' AND `T2`.`format` = 'vintage' AND `T1`.`side` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 350,
            "predicted_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid WHERE T1.power = '*' AND T2.format = 'commander' AND T2.status = 'Legal'",
            "ground_truth_sql": "SELECT   `T1`.`id`,   `T1`.`artist` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`status` = 'Legal'   AND `T2`.`format` = 'commander'   AND (     `T1`.`power` IS NULL OR `T1`.`power` = '*'   )",
            "res": 0
        },
        {
            "sql_idx": 351,
            "predicted_sql": "SELECT T1.name, T1.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniel'",
            "ground_truth_sql": "SELECT   `T1`.`id`,   `T2`.`text`,   `T1`.`hasContentWarning` FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`artist` = 'Stephen Daniele'",
            "res": 0
        },
        {
            "sql_idx": 352,
            "predicted_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name, T1.artist, T1.isPromo ORDER BY COUNT(T2.id) DESC LIMIT 1",
            "ground_truth_sql": "SELECT `T1`.`name`, `T1`.`artist`, `T1`.`isPromo` FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2` ON `T1`.`uuid` = `T2`.`uuid` WHERE `T1`.`isPromo` = 1 AND `T1`.`artist` = ( SELECT `artist` FROM `cards` WHERE `isPromo` = 1 GROUP BY `artist` HAVING COUNT(DISTINCT `uuid`) = (SELECT MAX(card_counts.max_count) FROM (SELECT COUNT(DISTINCT `uuid`) AS max_count FROM `cards` WHERE `isPromo` = 1 GROUP BY `artist`) AS card_counts))LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 353,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.scryfallId = T2.uuid",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid`",
            "res": 0
        },
        {
            "sql_idx": 354,
            "predicted_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `cards` WHERE   `power` = '*'",
            "res": 1
        },
        {
            "sql_idx": 355,
            "predicted_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
            "ground_truth_sql": "SELECT DISTINCT   `borderColor` FROM `cards` WHERE   `name` = 'Ancestor''s Chosen'",
            "res": 1
        },
        {
            "sql_idx": 356,
            "predicted_sql": "SELECT T1.format FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.name = 'Benalish Knight'",
            "ground_truth_sql": "SELECT   `T2`.`format` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`name` = 'Benalish Knight'",
            "res": 1
        },
        {
            "sql_idx": 357,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) FROM cards",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `borderColor` = 'borderless' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`id`) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 358,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.isStorySpotlight = 1",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`isStorySpotlight` = 1",
            "res": 1
        },
        {
            "sql_idx": 359,
            "predicted_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `cards` WHERE   `originalType` = 'Summon - Angel' AND `subtypes` <> 'Angel'",
            "res": 1
        },
        {
            "sql_idx": 360,
            "predicted_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   `duelDeck` = 'a'",
            "res": 1
        },
        {
            "sql_idx": 361,
            "predicted_sql": "SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' AND T2.borderColor = 'white'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`status` = 'Banned' AND `T1`.`borderColor` = 'white'",
            "res": 1
        },
        {
            "sql_idx": 362,
            "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.scryfallId = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language = 'foreign'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`name` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`originalType` = 'Artifact' AND `T1`.`colors` = 'B'",
            "res": 0
        },
        {
            "sql_idx": 363,
            "predicted_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper'",
            "ground_truth_sql": "SELECT   `manaCost` FROM `cards` WHERE   `availability` = 'mtgo,paper'   AND `borderColor` = 'black'   AND `frameVersion` = 2003   AND `layout` = 'normal'",
            "res": 1
        },
        {
            "sql_idx": 364,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) FROM cards;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `isTextless` = 0  AND `isStorySpotlight` = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`id`) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 365,
            "predicted_sql": "SELECT COUNT(T1.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.block = 'Commander' AND T1.language = 'Portuguese (Brasil)'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T2`.`language` = 'Portuguese (Brazil)' AND `T1`.`block` = 'Commander'",
            "res": 0
        },
        {
            "sql_idx": 366,
            "predicted_sql": "SELECT DISTINCT T1.supertypes, T1.subtypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.scryfallId = T2.uuid WHERE T2.language = 'German'",
            "ground_truth_sql": "SELECT   `T1`.`subtypes`,   `T1`.`supertypes` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`language` = 'German'   AND NOT `T1`.`subtypes` IS NULL   AND NOT `T1`.`supertypes` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 367,
            "predicted_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'",
            "ground_truth_sql": "SELECT   Count(DISTINCT `T1`.`id`)  FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   (     `T1`.`power` IS NULL OR `T1`.`power` = '*'   )   AND `T2`.`text` LIKE '%triggered ability%'",
            "res": 0
        },
        {
            "sql_idx": 368,
            "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.id = T2.uuid WHERE T1.format = 'premodern' AND T2.text = 'This is a triggered mana ability.' AND T1.side IS NULL",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` INNER JOIN `rulings` AS `T3`   ON `T1`.`uuid` = `T3`.`uuid` WHERE   `T2`.`format` = 'premodern'   AND `T3`.`text` = 'This is a triggered mana ability.'   AND `T1`.`Side` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 369,
            "predicted_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.scryfallId = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T2.language = 'French'",
            "ground_truth_sql": "SELECT   `name` FROM `foreign_data` WHERE   `uuid` IN (     SELECT       `uuid`     FROM `cards`     WHERE       `types` = 'Creature'       AND `layout` = 'normal'       AND `borderColor` = 'black'       AND `artist` = 'Matthew D. Wilson'   )   AND `language` = 'French'",
            "res": 0
        },
        {
            "sql_idx": 370,
            "predicted_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
            "ground_truth_sql": "SELECT   `T2`.`language` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T1`.`block` = 'Ravnica' AND `T1`.`baseSetSize` = 180",
            "res": 1
        },
        {
            "sql_idx": 371,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`hasContentWarning` = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`format` = 'commander' AND `T2`.`status` = 'Legal'",
            "res": 0
        },
        {
            "sql_idx": 372,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' AND T1.power IS NULL OR T1.power = '*' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.power) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.multiverseid = T2.multiverseId WHERE T2.power IS NULL OR T2.power = '*'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`power` IS NULL OR `T1`.`power` = '*'",
            "res": 0
        },
        {
            "sql_idx": 373,
            "predicted_sql": "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.scryfallId = T1.uuid WHERE T2.multiverseid = 149934",
            "ground_truth_sql": "SELECT   `language` FROM `foreign_data` WHERE   `multiverseid` = 149934",
            "res": 0
        },
        {
            "sql_idx": 374,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / COUNT(*) FROM cards",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `isTextless` = 1 AND `layout` = 'normal' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(*) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 375,
            "predicted_sql": "SELECT DISTINCT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
            "ground_truth_sql": "SELECT   `T2`.`language` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T1`.`mcmName` = 'Archenemy' AND `T2`.`setCode` = 'ARC'",
            "res": 0
        },
        {
            "sql_idx": 376,
            "predicted_sql": "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.scryfallId = T1.scryfallId WHERE T2.name = 'A Pedra Fellwar'",
            "ground_truth_sql": "SELECT DISTINCT   `language` FROM `foreign_data` WHERE   `name` = 'A Pedra Fellwar'",
            "res": 0
        },
        {
            "sql_idx": 377,
            "predicted_sql": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `name` FROM `cards` WHERE   `name` IN ('Serra Angel', 'Shrine Keeper') ORDER BY   `convertedManaCost` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 378,
            "predicted_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
            "ground_truth_sql": "SELECT   `translation` FROM `set_translations` WHERE   `setCode` IN (     SELECT       `setCode`     FROM `cards`     WHERE       `name` = 'Ancestor''s Chosen'   )   AND `language` = 'Italian'",
            "res": 1
        },
        {
            "sql_idx": 379,
            "predicted_sql": "SELECT CASE WHEN COUNT(T1.id) > 0 THEN 'Yes' ELSE 'No' END AS Korean_Version FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.multiverseid = T2.multiverseid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Korean'",
            "ground_truth_sql": "SELECT   CASE     WHEN SUM(       CASE         WHEN `T2`.`language` = 'Korean' AND NOT `T2`.`translation` IS NULL         THEN 1         ELSE 0       END     ) > 0     THEN 'YES'     ELSE 'NO'   END FROM `cards` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`setCode` WHERE   `T1`.`name` = 'Ancestor''s Chosen'",
            "res": 0
        },
        {
            "sql_idx": 380,
            "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`setCode` WHERE   `T2`.`translation` = 'Hauptset Zehnte Edition' AND `T1`.`artist` = 'Adam Rex'",
            "res": 1
        },
        {
            "sql_idx": 381,
            "predicted_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
            "ground_truth_sql": "SELECT   `T2`.`translation` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   `T1`.`name` = 'Eighth Edition' AND `T2`.`language` = 'Chinese Simplified'",
            "res": 1
        },
        {
            "sql_idx": 382,
            "predicted_sql": "SELECT T1.isOnlineOnly FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Angel of Mercy'",
            "ground_truth_sql": "SELECT   CASE WHEN NOT `T2`.`mtgoCode` IS NULL THEN 'YES' ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T1`.`name` = 'Angel of Mercy'",
            "res": 0
        },
        {
            "sql_idx": 383,
            "predicted_sql": "SELECT COUNT(T1.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.block = 'Ice Age' AND T1.language = 'Italian' AND T1.translation IS NOT NULL",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   `T1`.`block` = 'Ice Age'   AND `T2`.`language` = 'Italian'   AND NOT `T2`.`translation` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 384,
            "predicted_sql": "SELECT isForeignOnly FROM sets WHERE name = 'Adarkar Valkyrie'",
            "ground_truth_sql": "SELECT   CASE WHEN `isForeignOnly` = 1 THEN 'YES' ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T1`.`name` = 'Adarkar Valkyrie'",
            "res": 0
        },
        {
            "sql_idx": 385,
            "predicted_sql": "SELECT COUNT(T1.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Italian' AND T2.baseSetSize < 10",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   NOT `T2`.`translation` IS NULL   AND `T1`.`baseSetSize` < 100   AND `T2`.`language` = 'Italian'",
            "res": 0
        },
        {
            "sql_idx": 386,
            "predicted_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND T2.name = 'Coldsnap'",
            "ground_truth_sql": "SELECT   `T1`.`artist` FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Chippy'   )   OR (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Aaron Miller'   )   OR (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Jeremy Jarvis'   ) GROUP BY   `T1`.`artist`",
            "res": 1
        },
        {
            "sql_idx": 387,
            "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`power` = '*' OR `T1`.`power` IS NULL THEN 1 ELSE 0 END) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap' AND `T1`.`convertedManaCost` > 5",
            "res": 1
        },
        {
            "sql_idx": 388,
            "predicted_sql": "SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Italian'",
            "ground_truth_sql": "SELECT   `T2`.`flavorText` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T1`.`name` = 'Ancestor''s Chosen' AND `T2`.`language` = 'Italian'",
            "res": 1
        },
        {
            "sql_idx": 389,
            "predicted_sql": "SELECT T1.flavorText FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.setCode = 'Coldsnap' AND T1.language = 'Italian'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`text` FROM `foreign_data` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` INNER JOIN `sets` AS `T3`   ON `T3`.`code` = `T2`.`setCode` WHERE   `T3`.`name` = 'Coldsnap' AND `T1`.`language` = 'Italian'",
            "res": 0
        },
        {
            "sql_idx": 390,
            "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian' AND T1.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`name` FROM `foreign_data` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` INNER JOIN `sets` AS `T3`   ON `T3`.`code` = `T2`.`setCode` WHERE   `T3`.`name` = 'Coldsnap' AND `T1`.`language` = 'Italian' ORDER BY   `T2`.`convertedManaCost` DESC",
            "res": 0
        },
        {
            "sql_idx": 391,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS DECIMAL(10, 4)) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`convertedManaCost` = 7 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 392,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) FROM cards WHERE name = 'Coldsnap'",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN NOT `T1`.`cardKingdomFoilId` IS NULL AND NOT `T1`.`cardKingdomId` IS NULL       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 393,
            "predicted_sql": "SELECT T1.format, T1.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' GROUP BY T1.format, T1.name ORDER BY COUNT(T1.status) DESC LIMIT 1",
            "ground_truth_sql": "SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN ( SELECT format FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1 ) AS MaxBanned ON MaxBanned.format = T2.format WHERE T2.status = 'Banned'",
            "res": 0
        },
        {
            "sql_idx": 394,
            "predicted_sql": "SELECT DISTINCT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T2`.`format` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T1`.`edhrecRank` = 1 AND `T2`.`status` = 'Banned' GROUP BY   `T1`.`name`,   `T2`.`format`",
            "res": 1
        },
        {
            "sql_idx": 395,
            "predicted_sql": "SELECT c.name AS card_name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.setCode = 'H0D'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name`,   CASE WHEN `T1`.`status` = 'Legal' THEN `T1`.`format` ELSE NULL END FROM `legalities` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T2`.`setCode` IN (     SELECT       `code`     FROM `sets`     WHERE       `name` = 'Hour of Devastation'   )",
            "res": 0
        },
        {
            "sql_idx": 396,
            "predicted_sql": "SELECT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode AND T2.language = 'Japanese' WHERE T2.setCode IS NULL AND T1.name IN ( SELECT T3.name FROM sets AS T3 LEFT JOIN set_translations AS T4 ON T3.code = T4.setCode AND T4.language = 'Korean' WHERE T4.setCode IS NOT NULL )",
            "ground_truth_sql": "SELECT   `name` FROM `sets` WHERE   `code` IN (     SELECT       `setCode`     FROM `set_translations`     WHERE       `language` = 'Korean' AND NOT `language` LIKE '%Japanese%'   )",
            "res": 0
        },
        {
            "sql_idx": 397,
            "predicted_sql": "SELECT DISTINCT T1.frameVersion, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.id = T2.id WHERE T1.artist = 'Allen Williams' AND T2.status = 'Banned'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`frameVersion`,   `T1`.`name`,   CASE WHEN `T2`.`status` = 'Banned' THEN `T1`.`name` ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`artist` = 'Allen Williams'",
            "res": 0
        }
    ],
    "toxicology": [
        {
            "sql_idx": 398,
            "predicted_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T`.`bond_type` FROM (   SELECT     `bond_type`,     COUNT(`bond_id`)   FROM `bond`   GROUP BY     `bond_type`   ORDER BY     COUNT(`bond_id`) DESC   LIMIT 1 ) AS `T`",
            "res": 1
        },
        {
            "sql_idx": 399,
            "predicted_sql": "SELECT AVG(T1.element) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
            "ground_truth_sql": "SELECT   AVG(`oxygen_count`) FROM (   SELECT     `T1`.`molecule_id`,     COUNT(`T1`.`element`) AS `oxygen_count`   FROM `atom` AS `T1`   INNER JOIN `bond` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T2`.`bond_type` = '-' AND `T1`.`element` = 'o'   GROUP BY     `T1`.`molecule_id` ) AS `oxygen_counts`",
            "res": 0
        },
        {
            "sql_idx": 400,
            "predicted_sql": "SELECT AVG(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS average FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )",
            "ground_truth_sql": "SELECT   AVG(`single_bond_count`) FROM (   SELECT     `T3`.`molecule_id`,     COUNT(`T1`.`bond_type`) AS `single_bond_count`   FROM `bond` AS `T1`   INNER JOIN `atom` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   INNER JOIN `molecule` AS `T3`     ON `T3`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`bond_type` = '-' AND `T3`.`label` = '+'   GROUP BY     `T3`.`molecule_id` ) AS `subquery`",
            "res": 0
        },
        {
            "sql_idx": 401,
            "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '#' AND `T2`.`label` = '+'",
            "res": 1
        },
        {
            "sql_idx": 402,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.element = 'c' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T2.atom_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.bond_id = T2.atom_id WHERE T1.bond_type = '='",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T1`.`element` = 'c' THEN `T1`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `bond` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`bond_type` = '='",
            "res": 0
        },
        {
            "sql_idx": 403,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T2`.`bond_id` = 'TR004_8_9'",
            "res": 1
        },
        {
            "sql_idx": 404,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '='",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `bond` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `connected` AS `T3`   ON `T1`.`atom_id` = `T3`.`atom_id` WHERE   `T2`.`bond_type` = '='",
            "res": 0
        },
        {
            "sql_idx": 405,
            "predicted_sql": "SELECT T1.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T1.label ORDER BY COUNT(T1.label) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T`.`label` FROM (   SELECT     `T2`.`label`,     COUNT(`T2`.`molecule_id`)   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`element` = 'h'   GROUP BY     `T2`.`label`   ORDER BY     COUNT(`T2`.`molecule_id`) DESC   LIMIT 1 ) AS `t`",
            "res": 0
        },
        {
            "sql_idx": 406,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T`.`element` FROM (   SELECT     `T1`.`element`,     COUNT(DISTINCT `T1`.`molecule_id`)   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T2`.`label` = '-'   GROUP BY     `T1`.`element`   ORDER BY     COUNT(DISTINCT `T1`.`molecule_id`) ASC   LIMIT 1 ) AS `t`",
            "res": 0
        },
        {
            "sql_idx": 407,
            "predicted_sql": "SELECT bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' UNION SELECT bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8'",
            "ground_truth_sql": "SELECT   `T1`.`bond_type` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T2`.`atom_id` = 'TR004_8'   AND `T2`.`atom_id2` = 'TR004_20'   OR `T2`.`atom_id2` = 'TR004_8'   AND `T2`.`atom_id` = 'TR004_20'",
            "res": 1
        },
        {
            "sql_idx": 408,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'i' AND T3.bond_type = '-' AND T1.molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 's' )",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT CASE WHEN `T1`.`element` = 'i' THEN `T1`.`atom_id` ELSE NULL END) AS `iodine_nums`,   COUNT(DISTINCT CASE WHEN `T1`.`element` = 's' THEN `T1`.`atom_id` ELSE NULL END) AS `sulfur_nums` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` INNER JOIN `bond` AS `T3`   ON `T2`.`bond_id` = `T3`.`bond_id` WHERE   `T3`.`bond_type` = '-'",
            "res": 0
        },
        {
            "sql_idx": 409,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element != 'f' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T1`.`element` <> 'f' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 410,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T2`.`label` = '+' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `bond` AS `T3`   ON `T2`.`molecule_id` = `T3`.`molecule_id` WHERE   `T3`.`bond_type` = '#'",
            "res": 0
        },
        {
            "sql_idx": 411,
            "predicted_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR000' ) ORDER BY T2.element ASC LIMIT 3",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR000' ORDER BY   `T`.`element` LIMIT 3",
            "res": 0
        },
        {
            "sql_idx": 412,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS DECIMAL(10, 5)) * 100 / COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008'",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`bond_type` = '=' THEN `T`.`bond_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`bond_id`),     5   ) FROM `bond` AS `T` WHERE   `T`.`molecule_id` = 'TR008'",
            "res": 0
        },
        {
            "sql_idx": 413,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(molecule_id) FROM molecule",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`label` = '+' THEN `T`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`molecule_id`),     3   ) FROM `molecule` AS `t`",
            "res": 0
        },
        {
            "sql_idx": 414,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.element = 'h' THEN 1 ELSE 0 END) AS DECIMAL(10, 4)) * 100 / COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR206'",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`element` = 'h' THEN `T`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`atom_id`),     4   ) FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR206'",
            "res": 0
        },
        {
            "sql_idx": 415,
            "predicted_sql": "SELECT T2.element, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element`,   `T2`.`label` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`molecule_id` = 'TR060'",
            "res": 1
        },
        {
            "sql_idx": 416,
            "predicted_sql": "SELECT T3.bond_type, T1.label FROM molecule AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR010' GROUP BY T3.bond_type ORDER BY COUNT(T3.bond_id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T`.`bond_type` FROM (   SELECT     `T1`.`bond_type`,     COUNT(`T1`.`molecule_id`)   FROM `bond` AS `T1`   WHERE     `T1`.`molecule_id` = 'TR010'   GROUP BY     `T1`.`bond_type`   ORDER BY     COUNT(`T1`.`molecule_id`) DESC   LIMIT 1 ) AS `T`",
            "res": 0
        },
        {
            "sql_idx": 417,
            "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' ORDER BY T1.label ASC LIMIT 3",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '-' AND `T2`.`label` = '-' ORDER BY   `T2`.`molecule_id` LIMIT 3",
            "res": 0
        },
        {
            "sql_idx": 418,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.molecule_id = 'TR009' AND (T1.atom_id2 = 'TR009_12' OR T1.atom_id = 'TR009_12')",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`bond_id`) FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T1`.`molecule_id` = 'TR009'   AND `T2`.`atom_id` = CONCAT(`T1`.`molecule_id`, '_1')   OR `T2`.`atom_id2` = CONCAT(`T1`.`molecule_id`, '_2')",
            "res": 0
        },
        {
            "sql_idx": 419,
            "predicted_sql": "SELECT T2.bond_type, T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_6_9'",
            "ground_truth_sql": "SELECT   `T1`.`bond_type`,   `T2`.`atom_id`,   `T2`.`atom_id2` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T2`.`bond_id` = 'TR001_6_9'",
            "res": 0
        },
        {
            "sql_idx": 420,
            "predicted_sql": "SELECT COUNT(bond_id) FROM connected WHERE atom_id = 'TR%_19'",
            "ground_truth_sql": "SELECT   COUNT(`T`.`bond_id`) FROM `connected` AS `T` WHERE   SUBSTR(`T`.`atom_id`, -2) = '19'",
            "res": 0
        },
        {
            "sql_idx": 421,
            "predicted_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T2.atom_id = T1.atom_id2 WHERE T1.bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR004' )",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR004'",
            "res": 1
        },
        {
            "sql_idx": 422,
            "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id BETWEEN '21' AND '25' AND T1.label = '+'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   SUBSTR(`T1`.`atom_id`, -2) BETWEEN '21' AND '25' AND `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 423,
            "predicted_sql": "SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' AND T1.element = 'n'",
            "ground_truth_sql": "SELECT   `T2`.`bond_id` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T2`.`bond_id` IN (     SELECT       `T3`.`bond_id`     FROM `connected` AS `T3`     INNER JOIN `atom` AS `T4`       ON `T3`.`atom_id` = `T4`.`atom_id`     WHERE       `T4`.`element` = 'p'   )   AND `T1`.`element` = 'n'",
            "res": 0
        },
        {
            "sql_idx": 424,
            "predicted_sql": "SELECT T1.label FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`label` FROM `molecule` AS `T1` INNER JOIN (   SELECT     `T`.`molecule_id`,     COUNT(`T`.`bond_type`)   FROM `bond` AS `T`   WHERE     `T`.`bond_type` = '='   GROUP BY     `T`.`molecule_id`   ORDER BY     COUNT(`T`.`bond_type`) DESC   LIMIT 1 ) AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id`",
            "res": 0
        },
        {
            "sql_idx": 425,
            "predicted_sql": "SELECT AVG(T3.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'i'",
            "ground_truth_sql": "SELECT   CAST(COUNT(`T2`.`bond_id`) AS DOUBLE) / COUNT(`T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`element` = 'i'",
            "res": 0
        },
        {
            "sql_idx": 426,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 WHERE T2.atom_id2 IS NULL",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   NOT `T`.`element` IN (     SELECT DISTINCT       `T1`.`element`     FROM `atom` AS `T1`     INNER JOIN `connected` AS `T2`       ON `T1`.`atom_id` = `T2`.`atom_id`   )",
            "res": 0
        },
        {
            "sql_idx": 427,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
            "ground_truth_sql": "SELECT   `T2`.`atom_id`,   `T2`.`atom_id2` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` INNER JOIN `bond` AS `T3`   ON `T2`.`bond_id` = `T3`.`bond_id` WHERE   `T3`.`bond_type` = '#' AND `T3`.`molecule_id` = 'TR041'",
            "res": 0
        },
        {
            "sql_idx": 428,
            "predicted_sql": "SELECT T3.element FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_id = 'TR144_8_19'",
            "ground_truth_sql": "SELECT   `T2`.`element` FROM `connected` AS `T1` INNER JOIN `atom` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`bond_id` = 'TR144_8_19'",
            "res": 1
        },
        {
            "sql_idx": 429,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '#'",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`element` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` INNER JOIN `atom` AS `T3`   ON `T2`.`atom_id` = `T3`.`atom_id` WHERE   `T1`.`bond_type` = '#'",
            "res": 1
        },
        {
            "sql_idx": 430,
            "predicted_sql": "SELECT ROUND(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 5) AS proportion FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T2`.`label` = '+' THEN `T1`.`bond_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`bond_id`),     5   ) FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '-'",
            "res": 0
        },
        {
            "sql_idx": 431,
            "predicted_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `bond` AS `T3`   ON `T2`.`molecule_id` = `T3`.`molecule_id` WHERE   `T3`.`bond_type` = '#' AND `T1`.`element` IN ('p', 'br')",
            "res": 1
        },
        {
            "sql_idx": 432,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T`.`element` = 'cl' THEN `T`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`atom_id`) FROM (   SELECT     `T1`.`atom_id`,     `T1`.`element`   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   INNER JOIN `bond` AS `T3`     ON `T2`.`molecule_id` = `T3`.`molecule_id`   WHERE     `T3`.`bond_type` = '-' ) AS `T`",
            "res": 0
        },
        {
            "sql_idx": 433,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'",
            "ground_truth_sql": "SELECT   `T2`.`element` FROM `connected` AS `T1` INNER JOIN `atom` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`bond_id` = 'TR001_10_11'",
            "res": 1
        },
        {
            "sql_idx": 434,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T1`.`element` = 'cl' THEN `T1`.`element` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`element`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 435,
            "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.atom_id LIKE '4%'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'   AND SUBSTR(`T1`.`atom_id`, -1) = '4'   AND LENGTH(`T1`.`atom_id`) = 7",
            "res": 0
        },
        {
            "sql_idx": 436,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.element = 'h' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / COUNT(T2.element) AS ratio, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'",
            "ground_truth_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS DECIMAL(10,2)) / NULLIF(COUNT(atom_id), 0) AS ratio, label FROM SubQuery GROUP BY label",
            "res": 1
        },
        {
            "sql_idx": 437,
            "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5",
            "ground_truth_sql": "SELECT   `T`.`molecule_id` FROM (   SELECT     `T1`.`molecule_id`,     COUNT(`T2`.`atom_id`)   FROM `molecule` AS `T1`   INNER JOIN `atom` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`label` = '-'   GROUP BY     `T1`.`molecule_id`   HAVING     COUNT(`T2`.`atom_id`) > 5 ) AS `t`",
            "res": 0
        }
    ],
    "california_schools": [
        {
            "sql_idx": 438,
            "predicted_sql": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'",
            "ground_truth_sql": "SELECT  COUNT(DISTINCT `T2`.`School`) FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`  ON `T1`.`cds` = `T2`.`CDSCode` WHERE  `T2`.`Virtual` = 'F' AND `T1`.`AvgScrMath` > 400",
            "res": 1
        },
        {
            "sql_idx": 439,
            "predicted_sql": "SELECT CDSCode FROM frpm WHERE FRPM_COUNT_K12 + FRPM_COUNT_AGE5_17 > 500",
            "ground_truth_sql": "SELECT   `T2`.`CDSCode` FROM `schools` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Enrollment (K-12)` + `T2`.`Enrollment (Ages 5-17)` > 500",
            "res": 0
        },
        {
            "sql_idx": 440,
            "predicted_sql": "SELECT MAX( CAST(`T1`.`Free Meal Count (Ages 5-17)` AS DOUBLE) / `T1`.`Enrollment (Ages 5-17)` ) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.cds WHERE CAST(T2.`NumGE1500` AS DOUBLE) / T2.`NumTstTakr` > 0.3",
            "ground_truth_sql": "SELECT   MAX(     CAST(`T1`.`Free Meal Count (Ages 5-17)` AS DOUBLE) / `T1`.`Enrollment (Ages 5-17)`   ) FROM `frpm` AS `T1` INNER JOIN `satscores` AS `T2`   ON `T1`.`CDSCode` = `T2`.`cds` WHERE   CAST(`T2`.`NumGE1500` AS DOUBLE) / `T2`.`NumTstTakr` > 0.3",
            "res": 1
        },
        {
            "sql_idx": 441,
            "predicted_sql": "SELECT T1.cds, T1.cname, T1.AvgScrWrite, T1.cds FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 ORDER BY T1.AvgScrWrite DESC",
            "ground_truth_sql": "SELECT   `CharterNum`,   `AvgScrWrite`,   RANK() OVER (ORDER BY `AvgScrWrite` DESC) AS `WritingScoreRank` FROM `schools` AS `T1` INNER JOIN `satscores` AS `T2`   ON `T1`.`CDSCode` = `T2`.`cds` WHERE   `T2`.`AvgScrWrite` > 499 AND NOT `CharterNum` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 442,
            "predicted_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
            "ground_truth_sql": "SELECT   `T1`.`School`,   `T1`.`Street` FROM `schools` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Enrollment (K-12)` - `T2`.`Enrollment (Ages 5-17)` > 30",
            "res": 1
        },
        {
            "sql_idx": 443,
            "predicted_sql": "SELECT T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.FRPM_Count_K12 > 1500",
            "ground_truth_sql": "SELECT   `T2`.`School Name` FROM `satscores` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   CAST(`T2`.`Free Meal Count (K-12)` AS DOUBLE) / `T2`.`Enrollment (K-12)` > 0.1   AND `T1`.`NumGE1500` > 0",
            "res": 0
        },
        {
            "sql_idx": 444,
            "predicted_sql": "SELECT T1.School, T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 400 GROUP BY T1.School, T1.FundingType",
            "ground_truth_sql": "SELECT   `T1`.`sname`,   `T2`.`Charter Funding Type` FROM `satscores` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`District Name` LIKE 'Riverside%' GROUP BY   `T1`.`sname`,   `T2`.`Charter Funding Type` HAVING   CAST(SUM(`T1`.`AvgScrMath`) AS DOUBLE) / COUNT(`T1`.`cds`) > 400",
            "res": 0
        },
        {
            "sql_idx": 445,
            "predicted_sql": "SELECT T1.`School`, T1.Street, T1.City, T1.State, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`School Type` = 'High School' AND T1.City = 'Monterey' AND (T2.`Free Meal Count (Ages 15-17)` > 800 OR T2.`FRPM Count (Ages 15-17)` > 800)",
            "ground_truth_sql": "SELECT   `T1`.`School Name`,   `T2`.`Street`,   `T2`.`City`,   `T2`.`State`,   `T2`.`Zip` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Monterey'   AND `T1`.`Free Meal Count (Ages 5-17)` > 800   AND `T1`.`School Type` = 'High Schools (Public)'",
            "res": 0
        },
        {
            "sql_idx": 446,
            "predicted_sql": "SELECT T1.`School`, T1.`Communication Number`, AVG(T2.AvgScrWrite) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate > '1991-01-01' OR T1.ClosedDate < '2000-01-01' GROUP BY T1.`School`, T1.`Communication Number`",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`AvgScrWrite`,   `T2`.`Phone` FROM `schools` AS `T2` LEFT JOIN `satscores` AS `T1`   ON `T2`.`CDSCode` = `T1`.`cds` WHERE   DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') > '1991'   OR DATE_FORMAT(CAST(`T2`.`ClosedDate` AS DATETIME), '%Y') < '2000'",
            "res": 0
        },
        {
            "sql_idx": 447,
            "predicted_sql": "SELECT T1.`School`, T1.`DOCType` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally Funded' AND ABS(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > ( SELECT AVG(ABS(T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`)) FROM frpm AS T2 INNER JOIN schools AS T1 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally Funded' )",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T2`.`DOC` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`FundingType` = 'Locally funded'   AND (     `T1`.`Enrollment (K-12)` - `T1`.`Enrollment (Ages 5-17)`   ) > (     SELECT       AVG(`T3`.`Enrollment (K-12)` - `T3`.`Enrollment (Ages 5-17)`)     FROM `frpm` AS `T3`     INNER JOIN `schools` AS `T4`       ON `T3`.`CDSCode` = `T4`.`CDSCode`     WHERE       `T4`.`FundingType` = 'Locally funded'   )",
            "res": 0
        },
        {
            "sql_idx": 448,
            "predicted_sql": "SELECT CAST(`Free Meal Count (K-12)` AS DOUBLE) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 10, 2",
            "ground_truth_sql": "SELECT   CAST(`Free Meal Count (K-12)` AS DOUBLE) / `Enrollment (K-12)` FROM `frpm` ORDER BY   `Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
            "res": 0
        },
        {
            "sql_idx": 449,
            "predicted_sql": "SELECT CAST(`T2`.`Free Meal Count (K-12)` AS DOUBLE) / `T2`.`Enrollment (K-12)` AS EligibleFreeRate FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2` ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE `T2`.`Ownership` = '66' ORDER BY `T2`.`Free Meal Count (K-12)` DESC LIMIT 5",
            "ground_truth_sql": "SELECT   CAST(`T1`.`FRPM Count (K-12)` AS DOUBLE) / `T1`.`Enrollment (K-12)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`SOC` = 66 ORDER BY   `T1`.`FRPM Count (K-12)` DESC LIMIT 5",
            "res": 0
        },
        {
            "sql_idx": 450,
            "predicted_sql": "SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead / T2.NumTstTakr ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`Street`,   `T2`.`City`,   `T2`.`State`,   `T2`.`Zip` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   CAST(`T1`.`NumGE1500` AS DOUBLE) / `T1`.`NumTstTakr` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 451,
            "predicted_sql": "SELECT T1.AdmFName1, T1.AdmLName1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 > 0 ORDER BY T2.NumGE1500 DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`AdmFName1`,   `T2`.`AdmLName1`,   `T2`.`AdmFName2`,   `T2`.`AdmLName2`,   `T2`.`AdmFName3`,   `T2`.`AdmLName3` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   `T1`.`NumGE1500` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 452,
            "predicted_sql": "SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T1.District = 'Fresno'",
            "ground_truth_sql": "SELECT   AVG(`T1`.`NumTstTakr`) FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') = '1980'   AND `T2`.`County` = 'Fresno'",
            "res": 0
        },
        {
            "sql_idx": 453,
            "predicted_sql": "SELECT T1.`Phone` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.dname = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`Phone` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`District` = 'Fresno Unified' AND NOT `T1`.`AvgScrRead` IS NULL ORDER BY   `T1`.`AvgScrRead` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 454,
            "predicted_sql": "SELECT T1.`School`, T1.`County` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC GROUP BY T1.`School`, T1.`County` LIMIT 5",
            "ground_truth_sql": "SELECT  School FROM ( SELECT T2.School, T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F') ranked_schools WHERE rnk <= 5",
            "res": 0
        },
        {
            "sql_idx": 455,
            "predicted_sql": "SELECT AVG(T2.AvgScrWrite) AS avg_writing_score, T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.school",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`AvgScrWrite` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`AdmFName1` = 'Ricci' AND `T2`.`AdmLName1` = 'Ulrich'",
            "res": 0
        },
        {
            "sql_idx": 456,
            "predicted_sql": "SELECT T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = 31 GROUP BY T1.State ORDER BY SUM(T2.`Enrollment (K-12)`) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`School` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`DOC` = 31 ORDER BY   `T1`.`Enrollment (K-12)` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 457,
            "predicted_sql": "SELECT AVG(OpenDate) FROM schools WHERE OpenDate >= 1980 AND OpenDate < 1981 AND DOC = 52 AND State = 'Alameda'",
            "ground_truth_sql": "SELECT   CAST(COUNT(`School`) AS DOUBLE) / 12 FROM `schools` WHERE   `DOC` = 52   AND `County` = 'Alameda'   AND DATE_FORMAT(CAST(`OpenDate` AS DATETIME), '%Y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 458,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.DOC = 54 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / SUM(CASE WHEN T1.DOC = 52 THEN 1 ELSE 0 END) AS ratio FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Orange'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `DOC` = 54 THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `DOC` = 52 THEN 1 ELSE 0 END) FROM `schools` WHERE   `StatusType` = 'Merged' AND `County` = 'Orange'",
            "res": 0
        },
        {
            "sql_idx": 459,
            "predicted_sql": "SELECT T1.`School`, T1.`Street` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 6, 1",
            "ground_truth_sql": "SELECT   `T2`.`MailStreet`,   `T2`.`School` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   `T1`.`AvgScrMath` DESC LIMIT 1 OFFSET 6",
            "res": 0
        },
        {
            "sql_idx": 460,
            "predicted_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Charter = 0 AND T2.`Percent (%) Eligible Free (K-12)` < 0.18",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`School`) FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Los Angeles'   AND `T2`.`Charter` = 0   AND CAST(`T1`.`Free Meal Count (K-12)` AS DOUBLE) * 100 / `T1`.`Enrollment (K-12)` < 0.18",
            "res": 0
        },
        {
            "sql_idx": 461,
            "predicted_sql": "SELECT COUNT(T2.`FRPM Count (Ages 5-17)`) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.District = 'Fremont' AND T2.`Academic Year` = '2014-2015' AND T1.EdOpsCode = 'SSS'",
            "ground_truth_sql": "SELECT   `T1`.`Enrollment (Ages 5-17)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`EdOpsCode` = 'SSS'   AND `T2`.`City` = 'Fremont'   AND `T1`.`Academic Year` BETWEEN 2014 AND 2015",
            "res": 0
        },
        {
            "sql_idx": 462,
            "predicted_sql": "SELECT T1.School, T2.`Percent (%) Eligible FRPM (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-9' AND T1.County = 'Los Angeles'",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`FRPM Count (Ages 5-17)` * 100 / `T1`.`Enrollment (Ages 5-17)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Los Angeles' AND `T2`.`GSserved` = 'K-9'",
            "res": 0
        },
        {
            "sql_idx": 463,
            "predicted_sql": "SELECT T1.County, COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Virtual = 'F' AND T1.County IN ('San Diego', 'Santa Barbara') GROUP BY T1.County ORDER BY COUNT(T1.CDSCode) DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `County`,   COUNT(`Virtual`) FROM `schools` WHERE   (     `County` = 'San Diego' OR `County` = 'Santa Barbara'   ) AND `Virtual` = 'F' GROUP BY   `County` ORDER BY   COUNT(`Virtual`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 464,
            "predicted_sql": "SELECT T1.GSoffered FROM schools AS T1 ORDER BY T1.Longitude DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `GSoffered` FROM `schools` ORDER BY   ABS(`longitude`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 465,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.City) AS NumberOfCities, COUNT(T1.CDSCode) AS NumberOfSchools FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSoffered = 'K-8' AND T1.Magnet = 1 AND T2.`NSLP Provision Status` = 'Multiple Provision Types'",
            "ground_truth_sql": "SELECT   `T2`.`City`,   COUNT(`T2`.`CDSCode`) FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Magnet` = 1   AND `T2`.`GSoffered` = 'K-8'   AND `T1`.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY   `T2`.`City`",
            "res": 0
        },
        {
            "sql_idx": 466,
            "predicted_sql": "SELECT T2.`Percent (%) Eligible Free (K-12)`, T1.`District` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN `satscores` AS T3 ON T1.CDSCode = T3.cds WHERE T1.AdmFName1 = 'Alusine'",
            "ground_truth_sql": "SELECT   `T1`.`Free Meal Count (K-12)` * 100 / `T1`.`Enrollment (K-12)`,   `T1`.`District Code` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`AdmFName1` = 'Alusine'",
            "res": 0
        },
        {
            "sql_idx": 467,
            "predicted_sql": "SELECT DISTINCT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.City = 'San Bernardino City' AND T1.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND T1.DOCType = 'Unified' AND T1.SOC = '62' AND T1.StatusType = 'Public' AND T1.District = 'City of San Bernardino City Unified'",
            "ground_truth_sql": "SELECT   `T2`.`AdmEmail1`,   `T2`.`AdmEmail2` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'San Bernardino'   AND `T2`.`City` = 'San Bernardino'   AND `T2`.`DOC` = 54   AND DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') BETWEEN '2009' AND '2010'   AND `T2`.`SOC` = 62",
            "res": 0
        }
    ],
    "financial": [
        {
            "sql_idx": 468,
            "predicted_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`account_id`) FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`A3` = 'east Bohemia' AND `T2`.`frequency` = 'POPLATEK PO OBRATU'",
            "res": 1
        },
        {
            "sql_idx": 469,
            "predicted_sql": "SELECT COUNT(district_id) FROM district WHERE A11 > 6000 AND A11 < 10000",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T2`.`district_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'F' AND `T2`.`A11` BETWEEN 6000 AND 10000",
            "res": 1
        },
        {
            "sql_idx": 470,
            "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M' AND `T2`.`A3` = 'north Bohemia' AND `T2`.`A11` > 8000",
            "res": 1
        },
        {
            "sql_idx": 471,
            "predicted_sql": "SELECT T1.account_id, T2.A11, MAX(T2.A11) - MIN(T2.A11) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`account_id`,   (     SELECT       MAX(`A11`) - MIN(`A11`)     FROM `district`   ) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `disp` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` INNER JOIN `client` AS `T4`   ON `T3`.`client_id` = `T4`.`client_id` WHERE   `T2`.`district_id` = (     SELECT       `district_id`     FROM `client`     WHERE       `gender` = 'F'     ORDER BY       `birth_date` ASC     LIMIT 1   ) ORDER BY   `T2`.`A11` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 472,
            "predicted_sql": "SELECT T1.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id ORDER BY T1.birth_date DESC, T2.A11 DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `account` AS `T1` INNER JOIN `disp` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `client` AS `T3`   ON `T2`.`client_id` = `T3`.`client_id` INNER JOIN `district` AS `T4`   ON `T4`.`district_id` = `T1`.`district_id` WHERE   `T2`.`client_id` = (     SELECT       `client_id`     FROM `client`     ORDER BY       `birth_date` DESC     LIMIT 1   ) GROUP BY   `T4`.`A11`,   `T1`.`account_id`",
            "res": 0
        },
        {
            "sql_idx": 473,
            "predicted_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE YEAR(T1.date) = 1997 ORDER BY T1.amount ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T2`.`account_id` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1997'   AND `T2`.`frequency` = 'POPLATEK TYDNE' ORDER BY   `T1`.`amount` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 474,
            "predicted_sql": "SELECT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND YEAR(T2.date) = 1993 ORDER BY T1.amount DESC LIMIT 1",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%Y') = '1993'   AND `T1`.`duration` > 12 ORDER BY   `T1`.`amount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 475,
            "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T3.A2 = 'Sokolov'",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`client_id`) FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`gender` = 'F'   AND DATE_FORMAT(CAST(`T2`.`birth_date` AS DATETIME), '%Y') < '1950'   AND `T1`.`A2` = 'Sokolov'",
            "res": 0
        },
        {
            "sql_idx": 476,
            "predicted_sql": "SELECT T1.district_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'",
            "ground_truth_sql": "SELECT   `T1`.`A2` FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`birth_date` = '1976-01-29' AND `T2`.`gender` = 'F'",
            "res": 0
        },
        {
            "sql_idx": 477,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia'",
            "ground_truth_sql": "SELECT   CAST(SUM(`T1`.`gender` = 'M') AS DOUBLE) * 100 / COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`A3` = 'south Bohemia' GROUP BY   `T2`.`A4` ORDER BY   `T2`.`A4` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 478,
            "predicted_sql": "SELECT (SUM(T2.balance) - SUM(T2.balance) * 1.0 / SUM(T2.balance)) * 100 FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1993-07-05' AND T2.date = '1993-03-22' AND T1.account_id = ( SELECT account_id FROM account WHERE date = '1993-07-05' ORDER BY date ASC LIMIT 1 ) AND T2.date = '1998-12-27'",
            "ground_truth_sql": "SELECT   CAST((     SUM(CASE WHEN `T3`.`date` = '1998-12-27' THEN `T3`.`balance` ELSE 0 END) - SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END)   ) AS DOUBLE) * 100 / SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END) FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `trans` AS `T3`   ON `T3`.`account_id` = `T2`.`account_id` WHERE   `T1`.`date` = '1993-07-05'",
            "res": 0
        },
        {
            "sql_idx": 479,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.status = 'A' THEN T1.amount ELSE 0 END) AS DECIMAL(10, 2)) * 100 / SUM(T1.amount) FROM loan AS T1",
            "ground_truth_sql": "SELECT   (     CAST(SUM(CASE WHEN `status` = 'A' THEN `amount` ELSE 0 END) AS DOUBLE) * 100   ) / SUM(`amount`) FROM `loan`",
            "res": 0
        },
        {
            "sql_idx": 480,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.status = 'C' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T2.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 100000",
            "ground_truth_sql": "SELECT   CAST(SUM(`status` = 'C') AS DOUBLE) * 100 / COUNT(`account_id`) FROM `loan` WHERE   `amount` < 100000",
            "res": 0
        },
        {
            "sql_idx": 481,
            "predicted_sql": "SELECT T1.A3, T1.A12, (T1.A13 - T1.A12) * 100 / T1.A12 AS percentage_increase FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = T2.account_id WHERE T2.status = 'D'",
            "ground_truth_sql": "SELECT   CAST((     `T3`.`A13` - `T3`.`A12`   ) AS DOUBLE) * 100 / `T3`.`A12` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `district` AS `T3`   ON `T2`.`district_id` = `T3`.`district_id` WHERE   `T1`.`status` = 'D'",
            "res": 0
        },
        {
            "sql_idx": 482,
            "predicted_sql": "SELECT T1.A3, COUNT(T2.account_id) AS num FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN client AS T3 ON T2.account_id = T3.client_id WHERE T3.gender = 'F' GROUP BY T1.A3 ORDER BY num DESC LIMIT 9",
            "ground_truth_sql": "SELECT   `T2`.`A2`,   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'F' GROUP BY   `T2`.`district_id`,   `T2`.`A2` ORDER BY   COUNT(`T1`.`client_id`) DESC LIMIT 9",
            "res": 0
        },
        {
            "sql_idx": 483,
            "predicted_sql": "SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK MESICNE' AND T1.amount >= 250000 AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.status = 'APPROVED'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `loan` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T2`.`date` BETWEEN '1995-01-01' AND '1997-12-31'   AND `T1`.`frequency` = 'POPLATEK MESICNE'   AND `T2`.`amount` >= 250000",
            "res": 0
        },
        {
            "sql_idx": 484,
            "predicted_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'C' AND T1.district_id = 1",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `loan` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` WHERE   `T1`.`district_id` = 1 AND (     `T3`.`status` = 'C' OR `T3`.`status` = 'D'   )",
            "res": 0
        },
        {
            "sql_idx": 485,
            "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A15 = ( SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1, 1 ) AND T1.gender = 'M'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M'   AND `T2`.`A15` = (     SELECT       `T3`.`A15`     FROM `district` AS `T3`     ORDER BY       `T3`.`A15` DESC     LIMIT 1     OFFSET 1   )",
            "res": 1
        },
        {
            "sql_idx": 486,
            "predicted_sql": "SELECT T1.A2, COUNT(T2.account_id) AS withdrawals FROM district AS T1 JOIN account AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' GROUP BY T1.A2 ORDER BY withdrawals DESC LIMIT 10",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`A2` FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `trans` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` WHERE   `T3`.`type` = 'VYDAJ' AND `T3`.`date` LIKE '1996-01%' ORDER BY   `A2` ASC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 487,
            "predicted_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'C' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `loan` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` WHERE   `T1`.`district_id` = 1 AND (     `T3`.`status` = 'C' OR `T3`.`status` = 'D'   )",
            "res": 0
        },
        {
            "sql_idx": 488,
            "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A15 = ( SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1, 1 ) AND T1.gender = 'M'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M'   AND `T2`.`A15` = (     SELECT       `T3`.`A15`     FROM `district` AS `T3`     ORDER BY       `T3`.`A15` DESC     LIMIT 1     OFFSET 1   )",
            "res": 1
        },
        {
            "sql_idx": 489,
            "predicted_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'VYBER KARTOU' AND T2.amount < ( SELECT AVG(amount) FROM trans WHERE YEAR(T2.`date`) = 1998 )",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `trans` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1998'   AND `T1`.`operation` = 'VYBER KARTOU'   AND `T1`.`amount` < (     SELECT       AVG(`amount`)     FROM `trans`     WHERE       DATE_FORMAT(CAST(`date` AS DATETIME), '%Y') = '1998'   )",
            "res": 0
        },
        {
            "sql_idx": 490,
            "predicted_sql": "SELECT T2.type FROM account AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A11 BETWEEN 8000 AND 9000 AND T1.frequency != 'OWNER'",
            "ground_truth_sql": "SELECT   `T3`.`type` FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `disp` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` WHERE   `T3`.`type` <> 'OWNER' AND `T1`.`A11` BETWEEN 8000 AND 9000",
            "res": 0
        },
        {
            "sql_idx": 491,
            "predicted_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND YEAR(T2.date) = 1997",
            "ground_truth_sql": "SELECT   AVG(`T1`.`A15`) FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%Y') >= '1997' AND `T1`.`A15` > 4000",
            "res": 1
        },
        {
            "sql_idx": 492,
            "predicted_sql": "SELECT T1.amount FROM trans AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'",
            "ground_truth_sql": "SELECT   `T4`.`trans_id` FROM `client` AS `T1` INNER JOIN `disp` AS `T2`   ON `T1`.`client_id` = `T2`.`client_id` INNER JOIN `account` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` INNER JOIN `trans` AS `T4`   ON `T3`.`account_id` = `T4`.`account_id` WHERE   `T1`.`client_id` = 3356 AND `T4`.`operation` = 'VYBER'",
            "res": 0
        },
        {
            "sql_idx": 493,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A11 > 10000",
            "ground_truth_sql": "SELECT   CAST(SUM(`T2`.`gender` = 'F') AS DOUBLE) * 100 / COUNT(`T2`.`client_id`) FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`A11` > 10000",
            "res": 0
        },
        {
            "sql_idx": 494,
            "predicted_sql": "SELECT (SUM(T2.amount) - SUM(T2.amount)) / SUM(T2.amount) * 100 AS growth_rate FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND YEAR(T2.date) = 1996",
            "ground_truth_sql": "SELECT   CAST((     SUM(       CASE         WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1997'         THEN `T1`.`amount`         ELSE 0       END     ) - SUM(       CASE         WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'         THEN `T1`.`amount`         ELSE 0       END     )   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'       THEN `T1`.`amount`       ELSE 0     END   ) FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `disp` AS `T3`   ON `T3`.`account_id` = `T2`.`account_id` INNER JOIN `client` AS `T4`   ON `T4`.`client_id` = `T3`.`client_id` WHERE   `T4`.`gender` = 'M' AND `T3`.`type` = 'OWNER'",
            "res": 0
        },
        {
            "sql_idx": 495,
            "predicted_sql": "SELECT T2.frequency, T1.k_symbol FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.account = 3 AND T1.amount = 3539",
            "ground_truth_sql": "SELECT   `T1`.`frequency`,   `T2`.`k_symbol` FROM `account` AS `T1` INNER JOIN (   SELECT     `account_id`,     `k_symbol`,     SUM(`amount`) AS `total_amount`   FROM `order`   GROUP BY     `account_id`,     `k_symbol` ) AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T1`.`account_id` = 3 AND `T2`.`total_amount` = 3539",
            "res": 0
        },
        {
            "sql_idx": 496,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T2.frequency = 'POPLATEK TYDNE'",
            "ground_truth_sql": "SELECT   CAST(SUM(`T1`.`gender` = 'M') AS DOUBLE) * 100 / COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T3`   ON `T1`.`district_id` = `T3`.`district_id` INNER JOIN `account` AS `T2`   ON `T2`.`district_id` = `T3`.`district_id` INNER JOIN `disp` AS `T4`   ON `T1`.`client_id` = `T4`.`client_id` AND `T2`.`account_id` = `T4`.`account_id` WHERE   `T2`.`frequency` = 'POPLATEK TYDNE'",
            "res": 0
        },
        {
            "sql_idx": 497,
            "predicted_sql": "SELECT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T1.district_id ASC LIMIT 1",
            "ground_truth_sql": "SELECT   `T3`.`account_id` FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `account` AS `T3`   ON `T2`.`district_id` = `T3`.`district_id` INNER JOIN `disp` AS `T4`   ON `T1`.`client_id` = `T4`.`client_id` AND `T4`.`account_id` = `T3`.`account_id` WHERE   `T1`.`gender` = 'F' ORDER BY   `T1`.`birth_date` ASC,   `T2`.`A11` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 498,
            "predicted_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.status = 'C'",
            "ground_truth_sql": "SELECT   AVG(`T2`.`amount`) FROM `account` AS `T1` INNER JOIN `loan` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T2`.`status` IN ('C', 'D') AND `T1`.`frequency` = 'POPLATEK PO OBRATU'",
            "res": 0
        },
        {
            "sql_idx": 499,
            "predicted_sql": "SELECT T1.client_id, T1.birth_date FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.client_id INNER JOIN disp AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'OWNER' AND T2.type = 'gold'",
            "ground_truth_sql": "SELECT   `T1`.`client_id`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T3`.`birth_date` AS DATETIME), '%Y') FROM `disp` AS `T1` INNER JOIN `card` AS `T2`   ON `T2`.`disp_id` = `T1`.`disp_id` INNER JOIN `client` AS `T3`   ON `T1`.`client_id` = `T3`.`client_id` WHERE   `T2`.`type` = 'gold' AND `T1`.`type` = 'OWNER'",
            "res": 0
        }
    ]
}