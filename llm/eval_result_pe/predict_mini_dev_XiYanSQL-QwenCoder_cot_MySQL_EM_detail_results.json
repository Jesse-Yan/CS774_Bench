{
    "debit_card_specializing": [
        {
            "sql_idx": 0,
            "predicted_sql": "select sum(case when currency = 'eur' then 1 else 0 end) / sum(case when currency = 'czk' then 1 else 0 end) as ratio from customers",
            "ground_truth_sql": "select cast(sum(case when currency = 'eur' then 1 else 0 end) as double) / sum(case when currency = 'czk' then 1 else 0 end) from customers",
            "res": 0
        },
        {
            "sql_idx": 1,
            "predicted_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t2.date like '2012%' and t1.segment = 'lam' order by t2.consumption asc limit 1",
            "ground_truth_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 2,
            "predicted_sql": "select avg(consumption) / 12 as averagemonthlyconsumption from yearmonth where date between '201301' and '201312' and customerid in ( select customerid from customers where segment = 'sme' )",
            "ground_truth_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
            "res": 0
        },
        {
            "sql_idx": 3,
            "predicted_sql": "select sum(case when t1.currency = 'czk' then t3.consumption else 0 end) - sum(case when t1.currency = 'eur' then t3.consumption else 0 end) as difference from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid inner join yearmonth as t3 on t2.transactionid = t3.customerid where t3.date like '2012%'",
            "ground_truth_sql": "select sum(case when t1.currency = 'czk' then t2.consumption else 0 end) - sum(case when t1.currency = 'eur' then t2.consumption else 0 end) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
            "res": 0
        },
        {
            "sql_idx": 4,
            "predicted_sql": "select date from yearmonth group by date order by sum(consumption) desc limit 1",
            "ground_truth_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 5,
            "predicted_sql": "select date from yearmonth where date like '2013%' order by consumption desc limit 1",
            "ground_truth_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 6,
            "predicted_sql": "select ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'sme' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'lam' ) as sme_lam, ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'lam' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'kam' ) as lam_kam, ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'kam' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'sme' ) as kam_sme",
            "ground_truth_sql": "select cast(sum(case when t1.segment = 'sme' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'lam' then t2.consumption else 0 end) as double) / count(t1.customerid), cast(sum(case when t1.segment = 'lam' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'kam' then t2.consumption else 0 end) as double) / count(t1.customerid), cast(sum(case when t1.segment = 'kam' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'sme' then t2.consumption else 0 end) as double) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
            "res": 0
        },
        {
            "sql_idx": 7,
            "predicted_sql": "select segment, max(percentage_increase), min(percentage_increase) from ( select segment, case when (sum(case when year(str_to_date(date, '%y-%m-%d')) = 2013 then 1 else 0 end) - sum(case when year(str_to_date(date, '%y-%m-%d')) = 2012 then 1 else 0 end)) / sum(case when year(str_to_date(date, '%y-%m-%d')) = 2013 then 1 else 0 end) * 100 > 0 then (sum(case when year(str_to_date(date, '%y-%m-%d')) = 2013 then 1 else 0 end) - sum(case when year(str_to_date(date, '%y-%m-%d')) = 2012 then 1 else 0 end)) / sum(case when year(str_to_date(date, '%y-%m-%d')) = 2013 then 1 else 0 end) * 100 else 0 end as percentage_increase from yearmonth where currency = 'eur' group by segment ) as t",
            "ground_truth_sql": "select cast(( sum( case when t1.segment = 'sme' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'sme' and t2.date like '2012%' then t2.consumption else 0 end ) ) as double) * 100 / sum( case when t1.segment = 'sme' and t2.date like '2012%' then t2.consumption else 0 end ), cast(sum( case when t1.segment = 'lam' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'lam' and t2.date like '2012%' then t2.consumption else 0 end ) as double) * 100 / sum( case when t1.segment = 'lam' and t2.date like '2012%' then t2.consumption else 0 end ), cast(sum( case when t1.segment = 'kam' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'kam' and t2.date like '2012%' then t2.consumption else 0 end ) as double) * 100 / sum( case when t1.segment = 'kam' and t2.date like '2012%' then t2.consumption else 0 end ) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
            "res": 0
        },
        {
            "sql_idx": 8,
            "predicted_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
            "ground_truth_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
            "res": 1
        },
        {
            "sql_idx": 9,
            "predicted_sql": "select sum(case when country = 'cze' then 1 else 0 end) - sum(case when country = 'svk' then 1 else 0 end) as diff from gasstations",
            "ground_truth_sql": "select sum(case when country = 'cze' then 1 else 0 end) - sum(case when country = 'svk' then 1 else 0 end) from gasstations where segment = 'discount'",
            "res": 0
        },
        {
            "sql_idx": 10,
            "predicted_sql": "select sum(case when t1.currency = 'czk' then 1 else 0 end) - sum(case when t1.currency = 'eur' then 1 else 0 end) as difference from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid",
            "ground_truth_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
            "res": 0
        },
        {
            "sql_idx": 11,
            "predicted_sql": "select cast(sum(case when t1.consumption > 46.73 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.customerid) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.segment = 'lam'",
            "ground_truth_sql": "select cast(sum(case when t2.consumption > 46.73 then 1 else 0 end) as double) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
            "res": 0
        },
        {
            "sql_idx": 12,
            "predicted_sql": "select cast(sum(case when consumption > 528.3 then 1 else 0 end) as decimal(10, 2)) * 100 / count(customerid) from yearmonth where date = '201202'",
            "ground_truth_sql": "select cast(sum(case when consumption > 528.3 then 1 else 0 end) as double) * 100 / count(customerid) from yearmonth where date = '201202'",
            "res": 0
        },
        {
            "sql_idx": 13,
            "predicted_sql": "select max(consumption) from yearmonth where year(str_to_date(date, '%y-%m-%d')) = 2012",
            "ground_truth_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 14,
            "predicted_sql": "select t2.description from transactions_1k as t1 inner join products as t2 on t1.productid = t2.productid where t1.date = '201309'",
            "ground_truth_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
            "res": 0
        },
        {
            "sql_idx": 15,
            "predicted_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '201306'",
            "ground_truth_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
            "res": 0
        },
        {
            "sql_idx": 16,
            "predicted_sql": "select count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'eur' and t2.consumption > 1000",
            "ground_truth_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
            "res": 0
        },
        {
            "sql_idx": 17,
            "predicted_sql": "select t1.description from products as t1 inner join transactions_1k as t2 on t1.productid = t2.productid inner join gasstations as t3 on t2.gasstationid = t3.gasstationid where t3.country = 'cze'",
            "ground_truth_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
            "res": 0
        },
        {
            "sql_idx": 18,
            "predicted_sql": "select t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11 group by t1.time",
            "ground_truth_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
            "res": 0
        },
        {
            "sql_idx": 19,
            "predicted_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and str_to_date(t1.date, '%y-%m-%d') > '2012-01-01'",
            "ground_truth_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and date_format(cast(t1.date as datetime), '%y') >= '2012'",
            "res": 0
        },
        {
            "sql_idx": 20,
            "predicted_sql": "select distinct t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.date = '2012-08-24' and t2.time = '16:25:00'",
            "ground_truth_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
            "res": 0
        },
        {
            "sql_idx": 21,
            "predicted_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
            "ground_truth_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
            "res": 1
        },
        {
            "sql_idx": 22,
            "predicted_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
            "ground_truth_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
            "res": 1
        },
        {
            "sql_idx": 23,
            "predicted_sql": "select t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.date = '2012-08-24' and t2.amount = 548.4",
            "ground_truth_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
            "res": 0
        },
        {
            "sql_idx": 24,
            "predicted_sql": "select cast(sum(case when t1.currency = 'eur' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.customerid) from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.date = '2012-08-25'",
            "ground_truth_sql": "select cast(sum(case when t2.currency = 'eur' then 1 else 0 end) as double) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
            "res": 0
        },
        {
            "sql_idx": 25,
            "predicted_sql": "select (sum(case when year(date) = 2012 then consumption else 0 end) - sum(case when year(date) = 2013 then consumption else 0 end)) / sum(case when year(date) = 2012 then consumption else 0 end) from yearmonth where date = '2012-08-25'",
            "ground_truth_sql": "select cast(sum(case when substr(date, 1, 4) = '2012' then consumption else 0 end) - sum(case when substr(date, 1, 4) = '2013' then consumption else 0 end) as double) / sum(case when substr(date, 1, 4) = '2012' then consumption else 0 end) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
            "res": 0
        },
        {
            "sql_idx": 26,
            "predicted_sql": "select cast(sum(case when t2.segment = 'premium' then 1 else 0 end) as decimal(10, 4)) * 100 / count(t2.segment) from gasstations as t1 inner join customers as t2 on t1.gasstationid = t2.gasstationid where t1.country = 'svk'",
            "ground_truth_sql": "select cast(sum(case when country = 'svk' and segment = 'premium' then 1 else 0 end) as double) * 100 / sum(case when country = 'svk' then 1 else 0 end) from gasstations",
            "res": 0
        },
        {
            "sql_idx": 27,
            "predicted_sql": "select sum(t1.amount) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.customerid = 38508 and t1.date = '201201'",
            "ground_truth_sql": "select sum(t1.price ), sum(case when t3.date = '201201' then t1.price else 0 end) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
            "res": 0
        },
        {
            "sql_idx": 28,
            "predicted_sql": "select t1.customerid, t2.segment, t2.currency, avg(t2.price) as average_price from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid group by t1.customerid, t2.segment, t2.currency order by sum(t1.amount) desc limit 1",
            "ground_truth_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
            "res": 0
        },
        {
            "sql_idx": 29,
            "predicted_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.transactionid = t2.customerid where t1.price / t1.amount > 29.00 and t2.date = '201208'",
            "ground_truth_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
            "res": 0
        }
    ],
    "student_club": [
        {
            "sql_idx": 30,
            "predicted_sql": "select t1.link_to_major from member as t1 where t1.first_name = 'angela' and t1.last_name = 'sanders'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
            "res": 0
        },
        {
            "sql_idx": 31,
            "predicted_sql": "select count(t1.member_id) from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t3.event_name = 'women''s soccer' and t1.t_shirt_size = 'medium'",
            "ground_truth_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 32,
            "predicted_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member where t3.position = 'student_club' group by t1.event_id having count(t1.event_id) > 10",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
            "res": 0
        },
        {
            "sql_idx": 33,
            "predicted_sql": "select t1.event_name from event as t1 join attendance as t2 on t1.event_id = t2.link_to_event where t1.type != 'fundraiser' group by t1.event_name having count(t2.link_to_member) > 20",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 and not exists (select 1 from event as e where e.event_id = t1.event_id and e.type = 'fundraiser')",
            "res": 0
        },
        {
            "sql_idx": 34,
            "predicted_sql": "select sum(t2.amount) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
            "ground_truth_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
            "res": 0
        },
        {
            "sql_idx": 35,
            "predicted_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'il'",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
            "res": 0
        },
        {
            "sql_idx": 36,
            "predicted_sql": "select t1.approved from expense as t1 inner join attendance as t2 on t1.link_to_member = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t3.event_name = 'october meeting' and t3.event_date = '2019-10-08'",
            "ground_truth_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
            "res": 0
        },
        {
            "sql_idx": 37,
            "predicted_sql": "select avg(t3.cost) from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join expense as t3 on t2.link_to_member = t3.link_to_member where t1.first_name = 'elijah' and t1.last_name = 'allen' and month(t3.expense_date) between 9 and 10",
            "ground_truth_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and ( substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10' )",
            "res": 0
        },
        {
            "sql_idx": 38,
            "predicted_sql": "select sum(case when year(t1.event_date) = 2019 then t2.amount else 0 end) - sum(case when year(t1.event_date) = 2020 then t2.amount else 0 end) as diff from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.type = 'student_club'",
            "ground_truth_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
            "res": 0
        },
        {
            "sql_idx": 39,
            "predicted_sql": "select notes from income where date_received = '2019-09-14' and source = 'fundraising'",
            "ground_truth_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
            "res": 0
        },
        {
            "sql_idx": 40,
            "predicted_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
            "ground_truth_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
            "res": 1
        },
        {
            "sql_idx": 41,
            "predicted_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
            "ground_truth_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
            "res": 1
        },
        {
            "sql_idx": 42,
            "predicted_sql": "select t1.link_to_major from member as t1 where t1.first_name = 'brent' and t1.last_name = 'thomason'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
            "res": 0
        },
        {
            "sql_idx": 43,
            "predicted_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t2.major_id = t1.link_to_major where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
            "ground_truth_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 44,
            "predicted_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
            "ground_truth_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
            "res": 1
        },
        {
            "sql_idx": 45,
            "predicted_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
            "ground_truth_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
            "res": 1
        },
        {
            "sql_idx": 46,
            "predicted_sql": "select count(t1.link_to_event) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.event_name = 'yearly kickoff' and t1.category = 'advertisement' and t1.amount > ( select sum(t1.amount) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.event_name = 'october meeting' and t1.category = 'advertisement' )",
            "ground_truth_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as double) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
            "res": 0
        },
        {
            "sql_idx": 47,
            "predicted_sql": "select sum(cost) as total_cost from expense where expense_description = 'pizza'",
            "ground_truth_sql": "select sum(cost) from expense where expense_description = 'pizza'",
            "res": 0
        },
        {
            "sql_idx": 48,
            "predicted_sql": "select count(*) from zip_code where county = 'orange county' and state = 'virginia'",
            "ground_truth_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
            "res": 0
        },
        {
            "sql_idx": 49,
            "predicted_sql": "select t1.major_name from major as t1 inner join member as t2 on t2.link_to_major = t1.major_id where t2.phone = '809-555-3360'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
            "res": 0
        },
        {
            "sql_idx": 50,
            "predicted_sql": "select count(distinct t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
            "ground_truth_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
            "res": 0
        },
        {
            "sql_idx": 51,
            "predicted_sql": "select t1.first_name, t1.last_name from member as t1 join major as t2 on t2.major_id = t1.link_to_major where t2.department = 'school of applied sciences, technology and education'",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
            "res": 0
        },
        {
            "sql_idx": 52,
            "predicted_sql": "select t1.event_name from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.status = 'closed' order by t2.spent / t2.amount desc limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 53,
            "predicted_sql": "select max(remaining) from budget",
            "ground_truth_sql": "select max(spent) from budget",
            "res": 0
        },
        {
            "sql_idx": 54,
            "predicted_sql": "select sum(remaining) from budget where category = 'food'",
            "ground_truth_sql": "select sum(spent) from budget where category = 'food'",
            "res": 0
        },
        {
            "sql_idx": 55,
            "predicted_sql": "select t1.first_name, t1.last_name from member as t1 join attendance as t2 on t1.member_id = t2.link_to_member group by t1.member_id having count(t2.link_to_event) > 7",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
            "res": 0
        },
        {
            "sql_idx": 56,
            "predicted_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t3.event_name = 'yearly kickoff'",
            "ground_truth_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
            "res": 0
        },
        {
            "sql_idx": 57,
            "predicted_sql": "select event_name from event order by cost asc limit 1",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
            "res": 0
        },
        {
            "sql_idx": 58,
            "predicted_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t2.cost else 0 end) as decimal(10, 2)) * 100 / sum(t2.cost) from event as t1 inner join expense as t2 on t2.link_to_event = t1.event_id",
            "ground_truth_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as double) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
            "res": 0
        },
        {
            "sql_idx": 59,
            "predicted_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by amount desc limit 1",
            "ground_truth_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 60,
            "predicted_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t2.major_id = t1.link_to_major where t2.major_name = 'physics teaching' and t1.position = 'student_club'",
            "ground_truth_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
            "res": 0
        },
        {
            "sql_idx": 61,
            "predicted_sql": "select t1.event_name from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t2.category = 'advertisement' order by t2.spent desc limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 62,
            "predicted_sql": "select t1.first_name, t1.last_name from member as t1 join attendance as t2 on t1.member_id = t2.link_to_member join event as t3 on t3.event_id = t2.link_to_event where t1.first_name = 'maya' and t1.last_name = 'mclean' and t3.event_name = 'women''s soccer'",
            "ground_truth_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
            "res": 0
        },
        {
            "sql_idx": 63,
            "predicted_sql": "select t1.cost from expense as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.event_name = 'september speaker' and t1.expense_description = 'posters'",
            "ground_truth_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
            "res": 0
        },
        {
            "sql_idx": 64,
            "predicted_sql": "select t1.event_name from event as t1 join budget as t2 on t1.event_id = t2.link_to_event where t1.status = 'closed' order by t2.remaining limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
            "res": 0
        },
        {
            "sql_idx": 65,
            "predicted_sql": "select t1.type, sum(t1.cost) from expense as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.event_name = 'october meeting' and t1.approved = 'yes' group by t1.type",
            "ground_truth_sql": "select t1.type, sum(t3.cost) as total_cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' group by t1.type",
            "res": 0
        },
        {
            "sql_idx": 66,
            "predicted_sql": "select t1.category, t1.amount from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.event_name = 'april speaker' order by t1.amount asc",
            "ground_truth_sql": "select t2.category, sum(t2.amount) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
            "res": 0
        },
        {
            "sql_idx": 67,
            "predicted_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
            "ground_truth_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
            "res": 1
        },
        {
            "sql_idx": 68,
            "predicted_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v' group by t1.first_name, t1.last_name",
            "ground_truth_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
            "res": 0
        },
        {
            "sql_idx": 69,
            "predicted_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
            "ground_truth_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
            "res": 1
        },
        {
            "sql_idx": 70,
            "predicted_sql": "select t1.category from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.location = 'mu 215'",
            "ground_truth_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
            "res": 0
        },
        {
            "sql_idx": 71,
            "predicted_sql": "select t1.last_name, t2.department, t2.college from member as t1 inner join major as t2 on t2.major_id = t1.link_to_major where t2.major_name = 'environmental engineering'",
            "ground_truth_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
            "res": 0
        },
        {
            "sql_idx": 72,
            "predicted_sql": "select t1.category from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.location = 'mu 215' and t2.type = 'guest speaker' and t1.spent = 0",
            "ground_truth_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
            "res": 0
        },
        {
            "sql_idx": 73,
            "predicted_sql": "select cast(sum(case when t2.amount = 50 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t2.link_to_member) from income as t1 inner join income as t2 on t1.link_to_member = t2.link_to_member where t1.amount = 50 and t1.link_to_member = 'student_club'",
            "ground_truth_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as double) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 74,
            "predicted_sql": "select event_name from event where event_date between '2019-03-15' and '2020-03-20' and status = 'closed' and type = 'game'",
            "ground_truth_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
            "res": 0
        },
        {
            "sql_idx": 75,
            "predicted_sql": "select t1.first_name, t1.last_name, t1.phone from member as t1 join expense as t2 on t1.member_id = t2.link_to_member where t2.cost > ( select avg(cost) from expense )",
            "ground_truth_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
            "res": 0
        },
        {
            "sql_idx": 76,
            "predicted_sql": "select t1.first_name, t1.last_name, t2.cost from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t2.expense_description = 'water, veggie tray, supplies'",
            "ground_truth_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
            "res": 0
        },
        {
            "sql_idx": 77,
            "predicted_sql": "select t1.first_name, t1.last_name, t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t2.date_received = '9/9/2019'",
            "ground_truth_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
            "res": 0
        }
    ],
    "thrombosis_prediction": [
        {
            "sql_idx": 78,
            "predicted_sql": "select (count(case when sex = 'm' and admission = '+' then 1 else null end) - count(case when sex = 'm' and admission = '-' then 1 else null end)) * 100.0 / count(case when sex = 'm' then 1 else null end) as deviation_percentage from patient",
            "ground_truth_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as double) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 79,
            "predicted_sql": "select cast(sum(case when year(birthday) > 1930 then 1 else 0 end) as decimal(10, 2)) * 100 / count(id) from patient where sex = 'f'",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(birthday as datetime), '%y') > '1930' then 1 else 0 end ) as double) * 100 / count(*) from patient where sex = 'f'",
            "res": 0
        },
        {
            "sql_idx": 80,
            "predicted_sql": "select cast(sum(case when admission = '-' then 1 else 0 end) as decimal(10, 2)) / sum(case when admission = '+' then 1 else 0 end) as ratio from examination where diagnosis = 'sle'",
            "ground_truth_sql": "select sum(case when admission = '+' then 1 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
            "res": 0
        },
        {
            "sql_idx": 81,
            "predicted_sql": "select diagnosis, examination date from examination where id = 30609",
            "ground_truth_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
            "res": 0
        },
        {
            "sql_idx": 82,
            "predicted_sql": "select t1.id, t1.sex, t1.birthday from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.ldh > 500",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
            "res": 0
        },
        {
            "sql_idx": 83,
            "predicted_sql": "select id, timestampdiff(year, birthday, curdate()) as age from examination where rvvt = '+'",
            "ground_truth_sql": "select distinct t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
            "res": 0
        },
        {
            "sql_idx": 84,
            "predicted_sql": "select t1.id, t1.sex, t2.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
            "res": 0
        },
        {
            "sql_idx": 85,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and year(t1.description) = 1997 and t1.admission = '-'",
            "ground_truth_sql": "select count(*) from patient where date_format(cast(description as datetime), '%y') = '1997' and sex = 'f' and admission = '-'",
            "res": 0
        },
        {
            "sql_idx": 86,
            "predicted_sql": "select count(t1.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t1.thrombosis = 1 and t2.sex = 'f' and year(t1.examination date) = 1997",
            "ground_truth_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and date_format(cast(t2.examination date as datetime), '%y') = '1997' and t2.thrombosis = 1",
            "res": 0
        },
        {
            "sql_idx": 87,
            "predicted_sql": "select t2.symptoms, t2.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id order by t1.birthday desc limit 1",
            "ground_truth_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where not t2.symptoms is null order by t1.birthday desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 88,
            "predicted_sql": "select t2.examination date, timestampdiff(year, t1.birthday, t2.examination date) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.diagnosis = 'sjs' order by t1.birthday desc limit 1",
            "ground_truth_sql": "select t1.date, date_format(cast(t2.first date as datetime), '%y') - date_format(cast(t2.birthday as datetime), '%y'), t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and not t2.birthday is null order by t2.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 89,
            "predicted_sql": "select sum(case when t1.sex = 'm' then 1 else 0 end) as male, sum(case when t1.sex = 'f' then 1 else 0 end) as female from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ua <= 8.0",
            "ground_truth_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as double) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 90,
            "predicted_sql": "select count(distinct id) from examination where year(examination date) between 1990 and 1993 and year(birthday) < 1993",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where date_format(cast(t2.examination date as datetime), '%y') between '1990' and '1993' and date_format(cast(t2.examination date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') < '18'",
            "res": 0
        },
        {
            "sql_idx": 91,
            "predicted_sql": "select t1.first date, t2.hgb, t2.diagnosis from examination as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
            "ground_truth_sql": "select date_format(cast(t2.date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y'), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 92,
            "predicted_sql": "select t2.acl igm from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.description = '1994-02-19' and t2.examination date = '1993-11-12' and t2.diagnosis = 'sle'",
            "ground_truth_sql": "select acl iga, acl igg, acl igm from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and examination date = '1993-11-12'",
            "res": 0
        },
        {
            "sql_idx": 93,
            "predicted_sql": "select (sum(case when date like '1981-11-%' then t-cho else 0 end) - sum(case when date like '1981-12-%' then t-cho else 0 end)) / sum(case when date like '1981-12-%' then t-cho else 0 end) as decrease_rate from laboratory where id = ( select id from patient where birthday = '1959-02-18' )",
            "ground_truth_sql": "select cast(( sum(case when t2.date like '1981-11-%' then t2.t-cho else 0 end) - sum(case when t2.date like '1981-12-%' then t2.t-cho else 0 end) ) as double) / sum(case when t2.date like '1981-12-%' then t2.t-cho else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
            "res": 0
        },
        {
            "sql_idx": 94,
            "predicted_sql": "select t1.id from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t1.examination date between '1987-07-06' and '1996-01-31' and t2.gpt > 30 and t2.alb < 4",
            "ground_truth_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
            "res": 0
        },
        {
            "sql_idx": 95,
            "predicted_sql": "select count(t1.id) from examination as t1 inner join patient as t2 on t1.id = t2.id where t1.thrombosis = 2 and t1.ana = 's' and t1.acl igm > ( select avg(acl igm) from examination ) * 1.2",
            "ground_truth_sql": "select count(*) from examination where thrombosis = 2 and ana pattern = 's' and acl igm > ( select avg(acl igm) * 1.2 from examination where thrombosis = 2 and ana pattern = 's' )",
            "res": 0
        },
        {
            "sql_idx": 96,
            "predicted_sql": "select t1.id from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.admission = '-' and t2.examination date like '1991-10%' and t2.t-bil < 2.0",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.t-bil < 2.0 and t2.date like '1991-10-%'",
            "res": 0
        },
        {
            "sql_idx": 97,
            "predicted_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'f' and t1.plt > 400 and t1.diagnosis = 'sle'",
            "ground_truth_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
            "res": 0
        },
        {
            "sql_idx": 98,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and t2.diagnosis = 'aps'",
            "ground_truth_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
            "res": 0
        },
        {
            "sql_idx": 99,
            "predicted_sql": "select cast(sum(case when t1.sex = 'f' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where year(t1.birthday) = 1980 and t2.diagnosis = 'ra'",
            "ground_truth_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as double) * 100 / count(id) from patient where diagnosis = 'ra' and date_format(cast(birthday as datetime), '%y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 100,
            "predicted_sql": "select t1.id, t1.ua from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.id = 57266 and (t1.ua > 8.0 and t2.sex = 'm' or t1.ua > 6.5 and t2.sex = 'f')",
            "ground_truth_sql": "select case when ( t1.sex = 'f' and t2.ua > 6.5 ) or ( t1.sex = 'm' and t2.ua > 8.0 ) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
            "res": 0
        },
        {
            "sql_idx": 101,
            "predicted_sql": "select id from laboratory where gpt >= 60 and sex = 'm'",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
            "res": 0
        },
        {
            "sql_idx": 102,
            "predicted_sql": "select diagnosis from examination where gpt > 60 order by birthday asc",
            "ground_truth_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
            "res": 0
        },
        {
            "sql_idx": 103,
            "predicted_sql": "select id, sex, birthday from patient where id in ( select id from examination where un between 28 and 30 )",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
            "res": 0
        },
        {
            "sql_idx": 104,
            "predicted_sql": "select t1.sex, count(t2.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.t-bil >= 2.0 group by t1.sex",
            "ground_truth_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.t-bil >= 2.0 group by t1.sex, t1.id",
            "res": 0
        },
        {
            "sql_idx": 105,
            "predicted_sql": "select avg(timestampdiff(year, birthday, curdate())) as average_age from patient where sex = 'm' and diagnosis = 'high cholesterol'",
            "ground_truth_sql": "select avg(year(current_date) - year(t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.t-cho >= 250 and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 106,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and timestampdiff(year, t1.birthday, curdate()) > 50",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') > 50",
            "res": 0
        },
        {
            "sql_idx": 107,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'm' and t2.cpk > 250 and year(t1.birthday) between 1936 and 1956",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where date_format(cast(t1.birthday as datetime), '%y') between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
            "res": 0
        },
        {
            "sql_idx": 108,
            "predicted_sql": "select id, sex, timestampdiff(year, birthday, curdate()) as age from patient where id in ( select id from laboratory where glu >= 180 ) and id in ( select id from laboratory where t-cho < 250 )",
            "ground_truth_sql": "select distinct t1.id, t1.sex, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.t-cho < 250",
            "res": 0
        },
        {
            "sql_idx": 109,
            "predicted_sql": "select diagnosis, id, timestampdiff(year, birthday, curdate()) as age from patient where rbc < 3.5",
            "ground_truth_sql": "select distinct t1.diagnosis, t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
            "res": 0
        },
        {
            "sql_idx": 110,
            "predicted_sql": "select id, sex from patient where diagnosis = 'sle' and hgb between 10 and 17 order by birthday asc limit 1",
            "ground_truth_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 111,
            "predicted_sql": "select t1.id, timestampdiff(year, t1.birthday, curdate()) as age from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.hct >= 52 group by t1.id having count(t2.id) > 2",
            "ground_truth_sql": "select distinct t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
            "res": 0
        },
        {
            "sql_idx": 112,
            "predicted_sql": "select sum(plt < 100) as lower_than_normal_range, sum(plt > 400) as higher_than_normal_range from laboratory where plt < 100 or plt > 400",
            "ground_truth_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 113,
            "predicted_sql": "select t1.id, t1.first_date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where year(t2.date) = 1984 and t1.sex = 'm' and (year(curdate()) - year(t1.birthday)) < 50 and t2.plt between 100 and 400",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and date_format(cast(t2.date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') < 50 and date_format(cast(t2.date as datetime), '%y') = '1984'",
            "res": 0
        },
        {
            "sql_idx": 114,
            "predicted_sql": "select cast(sum(case when t1.sex = 'f' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.birthday < curdate() - interval 55 year and t2.pt >= 14",
            "ground_truth_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as double) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') > 55",
            "res": 0
        },
        {
            "sql_idx": 115,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'm' and t2.wbc between 3.5 and 9.0 and t2.fg <= 150 or t2.fg >= 450",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 116,
            "predicted_sql": "select count(distinct id) from laboratory where igg >= 2000",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
            "res": 0
        },
        {
            "sql_idx": 117,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.igg > 900 and t2.igg < 2000 and t2.symptoms is not null",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and not t3.symptoms is null",
            "res": 0
        },
        {
            "sql_idx": 118,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga > 80 and t2.iga < 500 and year(t1.first date) > 1990",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and date_format(cast(t1.first date as datetime), '%y') > '1990'",
            "res": 0
        },
        {
            "sql_idx": 119,
            "predicted_sql": "select diagnosis from examination where igm <= 40 or igm >= 400 group by diagnosis order by count(diagnosis) desc limit 1",
            "ground_truth_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where not t2.igm between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 120,
            "predicted_sql": "select count(*) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.crp = '+' and t1.description is null",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
            "res": 0
        },
        {
            "sql_idx": 121,
            "predicted_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and year(curdate()) - year(t1.birthday) < 70",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and year(curdate()) - year(t1.birthday) < 70",
            "res": 0
        },
        {
            "sql_idx": 122,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.ana = 0 and t1.admission = '+'",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
            "res": 0
        },
        {
            "sql_idx": 123,
            "predicted_sql": "select count(t1.id) from examination as t1 where t1.ana = 0 and t1.thrombosis = 0",
            "ground_truth_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative', '0') and t1.thrombosis = 0",
            "res": 0
        },
        {
            "sql_idx": 124,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sc170 = 'negative' and t1.sex = 'f' and t1.symptoms is null",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where ( t2.sc170 = 'negative' or t2.sc170 = '0' ) and t1.sex = 'f' and t3.symptoms is null",
            "res": 0
        },
        {
            "sql_idx": 125,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.centromea in ('-', '+-') and t2.ssb in ('-', '+-') and t1.sex = 'm'",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 126,
            "predicted_sql": "select min(birthday) as youngest_birthday from patient where id in ( select id from examination where got >= 60 )",
            "ground_truth_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 127,
            "predicted_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cpk < 250 and (t1.kct = '+' or t1.rvvt = '+' or t1.lac = '+')",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and ( t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+' )",
            "res": 0
        }
    ],
    "european_football_2": [
        {
            "sql_idx": 128,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' order by t1.home_team_goal + t1.away_team_goal desc limit 1",
            "ground_truth_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 129,
            "predicted_sql": "select t1.team_long_name from team as t1 join match as t2 on t1.team_api_id = t2.away_team_api_id where t2.season = '2009/2010' and t2.away_team_goal > t2.home_team_goal group by t1.team_long_name order by count(t2.away_team_goal) desc limit 1",
            "ground_truth_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 130,
            "predicted_sql": "select t2.buildupplayspeed from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id order by t2.buildupplayspeed desc limit 4",
            "ground_truth_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
            "res": 0
        },
        {
            "sql_idx": 131,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(case when t1.home_team_goal = t1.away_team_goal then 1 else 0 end) desc limit 1",
            "ground_truth_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 132,
            "predicted_sql": "select timestampdiff(year, birthday, curdate()) as age from player_attributes where sprint_speed >= 97 and year(date) between 2013 and 2015",
            "ground_truth_sql": "select distinct year(curdate()) - year(t2.birthday) as age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where year(t1.date) between 2013 and 2015 and t1.sprint_speed >= 97",
            "res": 0
        },
        {
            "sql_idx": 133,
            "predicted_sql": "select t1.name, count(t2.id) as matches from league as t1 join match as t2 on t1.id = t2.league_id group by t1.name order by matches desc limit 1",
            "ground_truth_sql": "select t2.name, count(t1.id) from match as t1 inner join league as t2 on t1.league_id = t2.id group by t2.name order by count(t1.id) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 134,
            "predicted_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
            "ground_truth_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
            "res": 0
        },
        {
            "sql_idx": 135,
            "predicted_sql": "select t1.team_long_name from team as t1 join team_attributes as t2 on t1.id = t2.team_api_id where t2.buildupplaypassing > ( select avg(buildupplaypassing) from team_attributes where str_to_date(date, '%y-%m-%d') = str_to_date('2012-01-01', '%y-%m-%d') )",
            "ground_truth_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.date, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as double) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where date_format(cast(t2.date as datetime), '%y') = '2012' )",
            "res": 0
        },
        {
            "sql_idx": 136,
            "predicted_sql": "select cast(sum(case when t1.preferred_foot = 'left' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.player_fifa_api_id) from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where str_to_date(t2.birthday, '%d/%m/%y') between '1987-01-01' and '1992-12-31'",
            "ground_truth_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as double) * 100 / count(t1.id) as percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
            "res": 0
        },
        {
            "sql_idx": 137,
            "predicted_sql": "select avg(t2.long_shots) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
            "ground_truth_sql": "select cast(sum(t2.long_shots) as double) / count(t2.date) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
            "res": 0
        },
        {
            "sql_idx": 138,
            "predicted_sql": "select t1.player_name from player as t1 join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.height > 180 order by t2.heading_accuracy desc limit 10",
            "ground_truth_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as double) / count(t2.player_fifa_api_id) desc limit 10",
            "res": 0
        },
        {
            "sql_idx": 139,
            "predicted_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having avg(t2.home_team_goal) > avg(t2.away_team_goal)",
            "ground_truth_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having ( cast(sum(t2.home_team_goal) as double) / count(distinct t2.id) ) - ( cast(sum(t2.away_team_goal) as double) / count(distinct t2.id) ) > 0",
            "res": 0
        },
        {
            "sql_idx": 140,
            "predicted_sql": "select player_name from player where player_name like '%1970-10%'",
            "ground_truth_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
            "res": 0
        },
        {
            "sql_idx": 141,
            "predicted_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t1.player_name = 'gabriel tamas' and t2.date like '2011%'",
            "ground_truth_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and date_format(cast(t2.date as datetime), '%y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 142,
            "predicted_sql": "select avg(home_team_goal) as average_home_team_goal from match where season = '2010/2011' and country_id = ( select id from country where name = 'poland' )",
            "ground_truth_sql": "select cast(sum(t2.home_team_goal) as double) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
            "res": 0
        },
        {
            "sql_idx": 143,
            "predicted_sql": "select t1.player_name from player as t1 join player_attributes as t2 on t1.id = t2.player_fifa_api_id order by t2.finishing desc limit 1",
            "ground_truth_sql": "select a from (select avg(finishing) as result, 'max' as a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = (select max(height) from player) union select avg(finishing) as result, 'min' as a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = (select min(height) from player)) as derived order by result desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 144,
            "predicted_sql": "select avg(t2.overall_rating) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.height > 170 and str_to_date(t2.date, '%y-%m-%d') between '2010-01-01' and '2015-12-31'",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and date_format(cast(t2.date as datetime), '%y') >= '2010' and date_format(cast(t2.date as datetime), '%y') <= '2015'",
            "res": 0
        },
        {
            "sql_idx": 145,
            "predicted_sql": "select avg(t1.ball_control) - avg(t2.ball_control) as diff from player_attributes as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id join player as t3 on t1.player_api_id = t3.id where t3.player_name = 'abdou diallo' or t3.player_name = 'aaron appindangoye'",
            "ground_truth_sql": "select cast(sum( case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end ) as double) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum( case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end ) as double) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        },
        {
            "sql_idx": 146,
            "predicted_sql": "select t1.player_name from player as t1 where t1.player_name = 'aaron lennon' order by t1.birthday desc limit 1 union select t1.player_name from player as t1 where t1.player_name = 'abdelaziz barrada' order by t1.birthday desc limit 1",
            "ground_truth_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 147,
            "predicted_sql": "select player_name from player order by height desc limit 1",
            "ground_truth_sql": "select player_name from player order by height desc limit 1",
            "res": 1
        },
        {
            "sql_idx": 148,
            "predicted_sql": "select count(t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.preferred_foot = 'left' and t2.attacking_work_rate = 'low'",
            "ground_truth_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
            "res": 0
        },
        {
            "sql_idx": 149,
            "predicted_sql": "select count(distinct t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where str_to_date(t1.birthday, '%d/%m/%y') < '1986-01-01' and t2.defensive_work_rate = 'high'",
            "ground_truth_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where date_format(cast(t1.birthday as datetime), '%y') < '1986' and t2.defensive_work_rate = 'high'",
            "res": 0
        },
        {
            "sql_idx": 150,
            "predicted_sql": "select t1.player_name from player as t1 join player_attributes as t2 on t1.id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
            "res": 0
        },
        {
            "sql_idx": 151,
            "predicted_sql": "select count(*) from match as t1 inner join league as t2 on t1.league_id = t2.id where t2.name = 'belgium jupiler league' and substr(t1.date, 1, 7) = '2009-04'",
            "ground_truth_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.date, 1, 7) = '2009-04'",
            "res": 0
        },
        {
            "sql_idx": 152,
            "predicted_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name order by count(t2.id) desc limit 1",
            "ground_truth_sql": "select t1.name from league as t1join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id) as subquery)",
            "res": 0
        },
        {
            "sql_idx": 153,
            "predicted_sql": "select (t1.overall_rating - t2.overall_rating) * 100.0 / t2.overall_rating from player_attributes as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ariel borysiuk' and t2.player_name = 'paulin puel'",
            "ground_truth_sql": "select ( sum( case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end ) * 1.0 - sum( case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end ) ) * 100 / sum( case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end ) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        },
        {
            "sql_idx": 154,
            "predicted_sql": "select avg(t1.overall_rating) from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t2.player_name = 'pietro marino'",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
            "res": 0
        },
        {
            "sql_idx": 155,
            "predicted_sql": "select max(t1.chancecreationpassing), t1.chancecreationpassingclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ajax'",
            "ground_truth_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 156,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.overall_rating = 77 and t2.date = '2016-06-23' order by t1.birthday desc limit 1",
            "ground_truth_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.date, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 157,
            "predicted_sql": "select t1.overall_rating from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t2.player_name = 'aaron mooy' and t1.date like '2016-02-04%'",
            "ground_truth_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.date, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
            "res": 0
        },
        {
            "sql_idx": 158,
            "predicted_sql": "select t2.attacking_work_rate from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.id where t2.player_name = 'francesco migliore' and t1.date like '2015-05-01%'",
            "ground_truth_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.date like '2015-05-01%' and t1.player_name = 'francesco migliore'",
            "res": 0
        },
        {
            "sql_idx": 159,
            "predicted_sql": "select t1.date from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.id where t2.player_name = 'kevin constant' order by t1.crossing desc limit 1",
            "ground_truth_sql": "select date from (select t2.crossing, t2.date from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) as subquery order by date desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 160,
            "predicted_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.date like '2010-02-22%'",
            "ground_truth_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.date like '2010-02-22%'",
            "res": 1
        },
        {
            "sql_idx": 161,
            "predicted_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.date like '2015-09-10%'",
            "ground_truth_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.date like '2015-09-10%'",
            "res": 0
        },
        {
            "sql_idx": 162,
            "predicted_sql": "select avg(t2.overall_rating) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'marko arnautovic' and t2.date like '2007-02-22%' and t2.date like '%2016-04-21'",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.date, 1, 10) between '2007-02-22' and '2016-04-21'",
            "res": 0
        },
        {
            "sql_idx": 163,
            "predicted_sql": "select cast(sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end) as decimal(10, 2)) * 100 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.date = '2013-07-12'",
            "ground_truth_sql": "select ( sum( case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end ) * 1.0 - sum( case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end ) ) * 100 / sum( case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end ) as lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.date, 1, 10) = '2013-07-12'",
            "res": 0
        },
        {
            "sql_idx": 164,
            "predicted_sql": "select t1.player_name from player as t1 join player_attributes as t2 on t1.id = t2.player_api_id order by t2.height desc limit 1",
            "ground_truth_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rankfrom player) as ranked_players where rank = 1",
            "res": 0
        },
        {
            "sql_idx": 165,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id order by t2.overall_rating desc limit 1",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
            "res": 0
        },
        {
            "sql_idx": 166,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t2.attacking_work_rate = 'high'",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
            "res": 0
        },
        {
            "sql_idx": 167,
            "predicted_sql": "select t1.team_short_name from team as t1 join team_attributes as t2 on t1.id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
            "ground_truth_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
            "res": 0
        },
        {
            "sql_idx": 168,
            "predicted_sql": "select count(t1.player_api_id) from player as t1 where t1.player_name like 'aaron%' and t1.birthday > '1990'",
            "ground_truth_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
            "res": 0
        },
        {
            "sql_idx": 169,
            "predicted_sql": "select ( select jumping from player_attributes where player_api_id = 6 ) - ( select jumping from player_attributes where player_api_id = 23 ) as difference",
            "ground_truth_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
            "res": 0
        },
        {
            "sql_idx": 170,
            "predicted_sql": "select player_api_id from player_attributes order by potential asc, preferred_foot = 'right' limit 4",
            "ground_truth_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
            "res": 0
        },
        {
            "sql_idx": 171,
            "predicted_sql": "select count(t1.player_api_id) from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.crossing = ( select max(crossing) from player_attributes ) and t2.preferred_foot = 'left'",
            "ground_truth_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes )",
            "res": 0
        },
        {
            "sql_idx": 172,
            "predicted_sql": "select t1.home_team_goal, t1.away_team_goal from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.date like '2008-09-24%' and t2.name = 'belgium jupiler league'",
            "ground_truth_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.date like '2008-09-24%'",
            "res": 0
        },
        {
            "sql_idx": 173,
            "predicted_sql": "select t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
            "ground_truth_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
            "res": 0
        },
        {
            "sql_idx": 174,
            "predicted_sql": "select t2.finishing, t2.curve from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id order by t1.weight desc limit 1",
            "ground_truth_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
            "res": 0
        },
        {
            "sql_idx": 175,
            "predicted_sql": "select t1.name from league as t1 join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
            "ground_truth_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
            "res": 0
        },
        {
            "sql_idx": 176,
            "predicted_sql": "select t1.team_long_name from team as t1 join match as t2 on t1.team_api_id = t2.away_team_api_id order by t2.away_team_goal desc limit 1",
            "ground_truth_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 177,
            "predicted_sql": "select player_name from player_attributes order by overall_rating desc limit 1",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes )",
            "res": 0
        },
        {
            "sql_idx": 178,
            "predicted_sql": "select cast(sum(case when t1.height < 180 and t2.overall_rating > 70 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id",
            "ground_truth_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as double) * 100 / count(t1.id) as percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        }
    ],
    "formula_1": [
        {
            "sql_idx": 179,
            "predicted_sql": "select t1.driverref from driverstandings as t1 inner join results as t2 on t1.raceid = t2.raceid where t2.raceid = 20 and t1.position = 5",
            "ground_truth_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
            "res": 0
        },
        {
            "sql_idx": 180,
            "predicted_sql": "select t1.surname from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid where t2.raceid = 19 and t2.q2 = ( select min(q2) from qualifying where raceid = 19 )",
            "ground_truth_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 181,
            "predicted_sql": "select t1.name from races as t1 inner join circuits as t2 on t1.circuitid = t2.circuitid where t2.country = 'germany'",
            "ground_truth_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
            "res": 0
        },
        {
            "sql_idx": 182,
            "predicted_sql": "select t1.lat, t1.lng from circuits as t1 inner join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'australian grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 183,
            "predicted_sql": "select t1.lat, t1.lng from circuits as t1 inner join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'abu dhabi grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
            "res": 0
        },
        {
            "sql_idx": 184,
            "predicted_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.forename = 'bruno' and t2.surname = 'senna' and t1.position = 354",
            "ground_truth_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
            "res": 0
        },
        {
            "sql_idx": 185,
            "predicted_sql": "select t1.number from qualifying as t1 join results as t2 on t1.qualifyid = t2.raceid where t2.position = 1 and t1.q3 = '1:54' and t1.raceid = 903",
            "ground_truth_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
            "res": 0
        },
        {
            "sql_idx": 186,
            "predicted_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'bahrain grand prix' and t2.year = 2007 and t1.position is null",
            "ground_truth_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
            "res": 0
        },
        {
            "sql_idx": 187,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t2.raceid = 592 and t2.time is not null order by t1.dob asc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and not t2.time is null and not t1.dob is null order by t1.dob asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 188,
            "predicted_sql": "select t1.name from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t2.lap = 161 and t2.time = '1:27'",
            "ground_truth_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
            "res": 0
        },
        {
            "sql_idx": 189,
            "predicted_sql": "select t1.location, t1.lat, t1.lng from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'malaysian grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 190,
            "predicted_sql": "select t1.url from constructors as t1 inner join constructorresults as t2 on t1.constructorid = t2.constructorid where t2.raceid = 9 order by t2.points desc limit 1",
            "ground_truth_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 191,
            "predicted_sql": "select t1.code from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid where t2.q3 = '1:33' and t2.raceid = 45",
            "ground_truth_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
            "res": 0
        },
        {
            "sql_idx": 192,
            "predicted_sql": "select t1.url from seasons as t1 inner join races as t2 on t1.year = t2.year where t2.raceid = 901",
            "ground_truth_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
            "res": 0
        },
        {
            "sql_idx": 193,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t2.raceid = 872 order by t1.dob desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and not t2.time is null order by t1.dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 194,
            "predicted_sql": "select t1.nationality from drivers as t1 join results as t2 on t1.driverid = t2.driverid order by t2.fastestlapspeed desc limit 1",
            "ground_truth_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 195,
            "predicted_sql": "select (t1.fastestlapspeed - t2.fastestlapspeed) * 100 / t2.fastestlapspeed from results as t1 inner join results as t2 on t1.raceid = t2.raceid where t1.driverid = ( select driverid from drivers where forename = 'paul' and surname = 'di resta' ) and t1.raceid = 853 and t2.raceid = 854",
            "ground_truth_sql": "select ( sum(case when t2.raceid = 853 then t2.fastestlapspeed else 0 end) - sum(case when t2.raceid = 854 then t2.fastestlapspeed else 0 end) ) * 100 / sum(case when t2.raceid = 853 then t2.fastestlapspeed else 0 end) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
            "res": 0
        },
        {
            "sql_idx": 196,
            "predicted_sql": "select cast(sum(case when t1.position is not null then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.position) as completion_rate from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.date = '1983-07-16'",
            "ground_truth_sql": "select cast(count(case when not t2.time is null then t2.driverid end) as double) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
            "res": 0
        },
        {
            "sql_idx": 197,
            "predicted_sql": "select name from races order by year(date) asc, month(date) asc limit 1",
            "ground_truth_sql": "select name from races where date_format(cast(date as datetime), '%y') = ( select date_format(cast(date as datetime), '%y') from races order by date asc limit 1 ) and date_format(cast(date as datetime), '%m') = ( select date_format(cast(date as datetime), '%m') from races order by date asc limit 1 )",
            "res": 0
        },
        {
            "sql_idx": 198,
            "predicted_sql": "select t1.forename, t1.surname, t2.points from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid order by t2.points desc limit 1",
            "ground_truth_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 199,
            "predicted_sql": "select t1.time, t2.forename, t2.surname, t3.name from laptimes as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid order by t1.milliseconds limit 1",
            "ground_truth_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 200,
            "predicted_sql": "select avg(t2.milliseconds) as average_lap_time from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid where t1.forename = 'lewis' and t1.surname = 'hamilton' and t3.name = 'malaysian grand prix' and t3.year = 2009",
            "ground_truth_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 201,
            "predicted_sql": "select cast(sum(case when t2.position > 1 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t2.position) from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t1.year >= 2010 and t3.surname = 'hamilton'",
            "ground_truth_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as double) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
            "res": 0
        },
        {
            "sql_idx": 202,
            "predicted_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.wins) as max_wins, max(t2.points) as max_points from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid group by t1.forename, t1.surname, t1.nationality order by max_wins desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 203,
            "predicted_sql": "select t1.dob, t1.surname from drivers as t1 where t1.nationality = 'japanese' order by t1.dob desc limit 1",
            "ground_truth_sql": "select date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(dob as datetime), '%y'), forename, surname from drivers where nationality = 'japanese' order by dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 204,
            "predicted_sql": "select t1.name as race_name, t2.name as circuit_name, t2.location from races as t1 inner join circuits as t2 on t1.circuitid = t2.circuitid where month(t1.date) = 9 and year(t1.date) = 2005",
            "ground_truth_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and date_format(cast(t2.date as datetime), '%m') = '09'",
            "res": 0
        },
        {
            "sql_idx": 205,
            "predicted_sql": "select t1.name from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
            "ground_truth_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
            "res": 0
        },
        {
            "sql_idx": 206,
            "predicted_sql": "select t1.name as race_name, t1.year from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
            "ground_truth_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 207,
            "predicted_sql": "select t1.name, t2.points from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
            "ground_truth_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 208,
            "predicted_sql": "select cast(sum(case when t1.country = 'germany' then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) from circuits as t1 inner join races as t2 on t1.circuitid = t2.circuitid where t2.name = 'european grand prix'",
            "ground_truth_sql": "select cast(count(case when t1.country = 'germany' then t2.circuitid end) as double) * 100 / count(t2.circuitid) from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'european grand prix'",
            "res": 0
        },
        {
            "sql_idx": 209,
            "predicted_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
            "ground_truth_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
            "res": 1
        },
        {
            "sql_idx": 210,
            "predicted_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
            "ground_truth_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
            "res": 1
        },
        {
            "sql_idx": 211,
            "predicted_sql": "select t1.country from circuits as t1 join races as t2 on t1.circuitid = t2.circuitid join results as t3 on t2.raceid = t3.raceid join drivers as t4 on t3.driverid = t4.driverid order by t4.dob limit 1",
            "ground_truth_sql": "select nationality from drivers where not dob is null order by dob asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 212,
            "predicted_sql": "select t1.driverref from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid where t3.name = 'canadian grand prix' and t3.year = 2007 and t2.position = 1",
            "ground_truth_sql": "select t3.forename, t3.surname, t3.driverref from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.name = 'canadian grand prix' and t2.rank = 1 and t1.year = 2007",
            "res": 0
        },
        {
            "sql_idx": 213,
            "predicted_sql": "select t1.name from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t2.rank asc limit 1",
            "ground_truth_sql": "select name from races where raceid in ( select raceid from results where rank = 1 and driverid = ( select driverid from drivers where forename = 'lewis' and surname = 'hamilton' ) )",
            "res": 0
        },
        {
            "sql_idx": 214,
            "predicted_sql": "select max(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'spanish grand prix' and t2.year = 2009",
            "ground_truth_sql": "select t2.fastestlapspeed from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.name = 'spanish grand prix' and t1.year = 2009 and not t2.fastestlapspeed is null order by t2.fastestlapspeed desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 215,
            "predicted_sql": "select t2.positionorder from races as t1 inner join results as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t2.driverid = t3.driverid where t1.name = 'chinese grand prix' and t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2008",
            "ground_truth_sql": "select t2.positionorder from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.name = 'chinese grand prix' and t1.year = 2008",
            "res": 0
        },
        {
            "sql_idx": 216,
            "predicted_sql": "select t2.time from driverstandings as t1 inner join results as t2 on t1.driverid = t2.driverid where t1.raceid = ( select raceid from races where name = 'chinese grand prix' and year = 2008 ) and t1.position = 2",
            "ground_truth_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.rank = 2 and t2.name = 'chinese grand prix' and t2.year = 2008",
            "res": 0
        },
        {
            "sql_idx": 217,
            "predicted_sql": "select count(distinct t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = '2008 chinese grand prix' and t1.position is not null",
            "ground_truth_sql": "select count(*) from (select t1.driverid from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'chinese grand prix' and t2.year = 2008 and t1.time is not null group by t1.driverid having count(t2.raceid) > 0) as derived_table",
            "res": 0
        },
        {
            "sql_idx": 218,
            "predicted_sql": "select (sum(t1.milliseconds) - sum(t2.milliseconds)) * 100.0 / sum(t2.milliseconds) from results as t1 inner join results as t2 on t1.raceid = t2.raceid where t1.raceid = ( select raceid from races where name = 'australian grand prix' and year = 2008 ) and t1.position = 1 and t2.position = 2",
            "ground_truth_sql": "with time_in_seconds as ( select t1.positionorder, case when t1.positionorder = 1 then ( cast(substr(t1.time, 1, 1) as double) * 3600 ) + ( cast(substr(t1.time, 3, 2) as double) * 60 ) + cast(substr(t1.time, 6) as double) else cast(substr(t1.time, 2) as double) end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'australian grand prix' and not t1.time is null and t2.year = 2008 ), champion_time as ( select time_seconds from time_in_seconds where positionorder = 1 ), last_driver_incremental as ( select time_seconds from time_in_seconds where positionorder = ( select max(positionorder) from time_in_seconds ) ) select ( cast(( select time_seconds from last_driver_incremental ) as double) * 100 ) / ( select time_seconds + ( select time_seconds from last_driver_incremental ) from champion_time )",
            "res": 0
        },
        {
            "sql_idx": 219,
            "predicted_sql": "select count(*) from circuits where country = 'australia' and location = 'adelaide'",
            "ground_truth_sql": "select count(circuitid) from circuits where location = 'adelaide' and country = 'australia'",
            "res": 0
        },
        {
            "sql_idx": 220,
            "predicted_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
            "ground_truth_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
            "res": 1
        },
        {
            "sql_idx": 221,
            "predicted_sql": "select t1.name from constructors as t1 join constructorstandings as t2 on t1.constructorid = t2.constructorid where t2.raceid = 291 and t2.points = 0",
            "ground_truth_sql": "select t2.name from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t1.raceid = 291",
            "res": 0
        },
        {
            "sql_idx": 222,
            "predicted_sql": "select count(t1.constructorid) from constructorstandings as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.points = 0 and t1.constructorid in ( select constructorid from constructors where nationality = 'japanese' ) and t2.raceid in ( select raceid from races group by raceid having count(raceid) = 2 )",
            "ground_truth_sql": "select count(t1.raceid) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t2.nationality = 'japanese' group by t1.constructorid having count(raceid) = 2",
            "res": 0
        },
        {
            "sql_idx": 223,
            "predicted_sql": "select cast(sum(case when t1.nationality = 'japanese' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.driverid) from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t2.time is not null and t2.year between 2007 and 2009",
            "ground_truth_sql": "select cast(sum(case when not t1.time is null then 1 else 0 end) as double) * 100 / count(t1.raceid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t3.nationality = 'japanese' and t2.year between 2007 and 2009",
            "res": 0
        },
        {
            "sql_idx": 224,
            "predicted_sql": "select avg(t1.time) as avg_time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year < 1975 and t1.position = 1",
            "ground_truth_sql": "with time_in_seconds as (select t2.year, t2.raceid, t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as float) * 3600) + (cast(substr(t1.time, 3, 2) as float) * 60) + cast(substr(t1.time, 6, 2) as float) + cast(substr(t1.time, 9) as float) / 1000 else 0 end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where not t1.time is null), champion_time as (select year, raceid, time_seconds from time_in_seconds where positionorder = 1) select year, avg(time_seconds) from champion_time where year < 1975 group by year having not avg(time_seconds) is null",
            "res": 0
        },
        {
            "sql_idx": 225,
            "predicted_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.position = 1",
            "ground_truth_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 226,
            "predicted_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'spanish grand prix' and t2.year = 2009",
            "ground_truth_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t2.name = 'spanish grand prix'",
            "res": 0
        },
        {
            "sql_idx": 227,
            "predicted_sql": "select cast(sum(case when t1.dob < 1985 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year between 2000 and 2005 and t1.laps > 50",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(t3.dob as datetime), '%y') < '1985' and t1.laps > 50 then 1 else 0 end ) as double) * 100 / count(*) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t2.year between 2000 and 2005",
            "res": 0
        },
        {
            "sql_idx": 228,
            "predicted_sql": "select count(t1.driverid) from laptimes as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'french' and t1.time < '02:00:00'",
            "ground_truth_sql": "select count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.nationality = 'french' and ( cast(substr(t2.time, 1, 2) as signed) * 60 + cast(substr(t2.time, 4, 2) as signed) + cast(substr(t2.time, 7, 2) as double) / 1000 ) < 120",
            "res": 0
        },
        {
            "sql_idx": 229,
            "predicted_sql": "select code from drivers where nationality = 'american'",
            "ground_truth_sql": "select code from drivers where nationality = 'american'",
            "res": 1
        },
        {
            "sql_idx": 230,
            "predicted_sql": "select t1.driverref, t1.nationality, t1.dob from drivers as t1 order by t1.dob desc limit 3",
            "ground_truth_sql": "select count(*) from (select t1.nationality from drivers as t1 order by t1.dob desc limit 3) as t3 where t3.nationality = 'dutch'",
            "res": 0
        },
        {
            "sql_idx": 231,
            "predicted_sql": "select t1.driverref from drivers as t1 where t1.nationality = 'german' order by t1.dob limit 1",
            "ground_truth_sql": "select driverref from drivers where nationality = 'german' order by dob asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 232,
            "predicted_sql": "select t1.driverid, t1.code from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t1.dob = '1971-01-01' and t2.fastestlaptime is not null",
            "ground_truth_sql": "select t2.driverid, t2.code from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where date_format(cast(t2.dob as datetime), '%y') = '1971' and not t1.fastestlaptime is null",
            "res": 0
        },
        {
            "sql_idx": 233,
            "predicted_sql": "select count(*) from results where raceid between 50 and 100 and statusid = 2",
            "ground_truth_sql": "select sum(case when not time is null then 1 else 0 end) from results where statusid = 2 and raceid < 100 and raceid > 50",
            "res": 0
        },
        {
            "sql_idx": 234,
            "predicted_sql": "select count(*) as held_times, location, concat(lat, ', ', lng) as coordinates from circuits where country = 'austria' group by location, concat(lat, ', ', lng)",
            "ground_truth_sql": "select distinct location, lat, lng from circuits where country = 'austria'",
            "res": 0
        },
        {
            "sql_idx": 235,
            "predicted_sql": "select t2.year, t2.name, t2.date, t2.time from qualifying as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid order by t3.dob desc limit 1",
            "ground_truth_sql": "select t3.year, t3.name, t3.date, t3.time from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where t1.driverid = ( select driverid from drivers order by dob desc limit 1 ) order by t3.date asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 236,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join pitstops as t2 on t1.driverid = t2.driverid where t1.nationality = 'german' and t1.dob between '1980-01-01' and '1985-12-31' group by t1.driverid order by avg(t2.duration) asc limit 3",
            "ground_truth_sql": "select t2.forename, t2.surname from pitstops as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'german' and date_format(cast(t2.dob as datetime), '%y') between '1980' and '1985' group by t2.forename, t2.surname order by avg(t1.duration) limit 3",
            "res": 0
        },
        {
            "sql_idx": 237,
            "predicted_sql": "select t1.forename, t1.surname, t2.time from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid where t3.name = 'canadian grand prix' and t3.year = 2008 and t2.position = 1",
            "ground_truth_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t2.year = 2008 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 238,
            "predicted_sql": "select t1.constructorref, t1.url from constructors as t1 inner join constructorstandings as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t2.raceid = t3.raceid where t3.year = 2009 and t3.name = 'singapore grand prix' order by t2.position limit 1",
            "ground_truth_sql": "select t3.constructorref, t3.url from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t1.constructorid = t3.constructorid where t2.name = 'singapore grand prix' and t2.year = 2009 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 240,
            "predicted_sql": "select t1.name, t1.nationality, t2.points from constructors as t1 inner join constructorstandings as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t2.raceid = t3.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 order by t2.points desc limit 1",
            "ground_truth_sql": "select sum(t1.points), t2.name, t2.nationality from constructorresults as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t3.raceid = t1.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 group by t2.name order by sum(t1.points) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 241,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid inner join circuits as t3 on t3.circuitid = t2.circuitid where t2.position = 1 and t3.name = 'marina bay street circuit' and t2.raceid = ( select t4.raceid from races as t4 inner join circuits as t5 on t5.circuitid = t4.circuitid where t5.name = 'marina bay street circuit' and t4.year = 2008 )",
            "ground_truth_sql": "select t2.forename, t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where not q3 is null and t3.year = 2008 and t3.circuitid in ( select circuitid from circuits where name = 'marina bay street circuit' ) order by cast(substr(q3, 1, instr(q3, ':') - 1) as signed) * 60 + cast(substr(q3, instr(q3, ':') + 1, instr(q3, '.') - instr(q3, ':') - 1) as double) + cast(substr(q3, instr(q3, '.') + 1) as double) / 1000 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 242,
            "predicted_sql": "select t1.forename, t1.surname, t1.nationality, t2.name from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid order by t1.dob desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname, t1.nationality, t3.name from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t1.dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 243,
            "predicted_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t1.statusid = 3",
            "ground_truth_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join status as t3 on t1.statusid = t3.statusid where t3.statusid = 3 and t2.name = 'canadian grand prix' group by t1.driverid order by count(t1.driverid) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 244,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 join results as t2 on t1.driverid = t2.driverid order by t2.time asc limit 20",
            "ground_truth_sql": "with lap_times_in_seconds as (select driverid, (case when substr(time, 1, instr(time, ':') - 1) <> '' then cast(substr(time, 1, instr(time, ':') - 1) as float) * 60 else 0 end + case when substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) <> '' then cast(substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) as float) else 0 end + case when substr(time, instr(time, '.') + 1) <> '' then cast(substr(time, instr(time, '.') + 1) as float) / 1000 else 0 end) as time_in_seconds from laptimes) select t2.forename, t2.surname, t1.driverid from (select driverid, min(time_in_seconds) as min_time_in_seconds from lap_times_in_seconds group by driverid) as t1 inner join drivers as t2 on t1.driverid = t2.driverid order by t1.min_time_in_seconds asc limit 20",
            "res": 0
        },
        {
            "sql_idx": 245,
            "predicted_sql": "select t1.name, t2.time from circuits as t1 inner join laptimes as t2 on t1.circuitid = t2.raceid where t1.country = 'italy'",
            "ground_truth_sql": "with fastest_lap_times as ( select t1.raceid, t1.fastestlaptime, ( cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as double) * 60 ) + ( cast(substr( t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1 ) as double) ) + ( cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as double) / 1000 ) as time_in_seconds from results as t1 where not t1.fastestlaptime is null ) select t1.fastestlaptime as lap_record from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid inner join ( select min(fastest_lap_times.time_in_seconds) as min_time_in_seconds from fastest_lap_times inner join races as t2 on fastest_lap_times.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid where t3.country = 'italy' ) as t4 on ( cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as double) * 60 ) + ( cast(substr( t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1 ) as double) ) + ( cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as double) / 1000 ) = t4.min_time_in_seconds limit 1",
            "res": 0
        }
    ],
    "superhero": [
        {
            "sql_idx": 239,
            "predicted_sql": "select t2.power_name from superhero as t1 inner join hero_power as t3 on t1.id = t3.hero_id inner join superpower as t2 on t3.power_id = t2.id where t1.superhero_name = '3-d man'",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = '3-d man'",
            "res": 0
        },
        {
            "sql_idx": 246,
            "predicted_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
            "res": 1
        },
        {
            "sql_idx": 247,
            "predicted_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t4.colour = 'blue' and t3.attribute_name = 'agility'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t3.power_name = 'agility' and t4.colour = 'blue'",
            "res": 0
        },
        {
            "sql_idx": 248,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
            "res": 1
        },
        {
            "sql_idx": 249,
            "predicted_sql": "select t1.superhero_name from superhero as t1 join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'marvel comics' order by t1.height_cm desc",
            "ground_truth_sql": "select superhero_name, height_cm, rank() over (order by height_cm desc) as heightrank from superhero inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics'",
            "res": 0
        },
        {
            "sql_idx": 250,
            "predicted_sql": "select t3.colour, count(t1.id) as cnt from superhero as t1 inner join colour as t3 on t1.eye_colour_id = t3.id inner join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'marvel comics' group by t3.colour order by cnt desc",
            "ground_truth_sql": "select colour.colour as eyecolor, count(superhero.id) as count, rank() over (order by count(superhero.id) desc) as popularityrank from superhero inner join colour on superhero.eye_colour_id = colour.id inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics' group by colour.colour",
            "res": 0
        },
        {
            "sql_idx": 251,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id where t3.power_name = 'super strength' and t1.publisher_id = ( select id from publisher where publisher_name = 'marvel comics' )",
            "ground_truth_sql": "select superhero_name from superhero as t1 where exists( select 1 from hero_power as t2 inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.id = t2.hero_id ) and exists( select 1 from publisher as t4 where t4.publisher_name = 'marvel comics' and t1.publisher_id = t4.id )",
            "res": 0
        },
        {
            "sql_idx": 252,
            "predicted_sql": "select t.publisher_name from ( select t1.publisher_name, t2.attribute_name, min(t2.attribute_value) as min_attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'speed' group by t1.publisher_name, t2.attribute_name ) as t order by t.min_attribute_value desc limit 1",
            "ground_truth_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join hero_attribute as t3 on t1.id = t3.hero_id inner join attribute as t4 on t3.attribute_id = t4.id where t4.attribute_name = 'speed' order by t3.attribute_value limit 1",
            "res": 0
        },
        {
            "sql_idx": 253,
            "predicted_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
            "res": 1
        },
        {
            "sql_idx": 254,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'intelligence' order by t2.attribute_value asc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'intelligence' order by t2.attribute_value limit 1",
            "res": 0
        },
        {
            "sql_idx": 255,
            "predicted_sql": "select t1.race from race as t1 inner join superhero as t2 on t1.id = t2.race_id where t2.superhero_name = 'copycat'",
            "ground_truth_sql": "select t2.race from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.superhero_name = 'copycat'",
            "res": 0
        },
        {
            "sql_idx": 256,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'durability' and t2.attribute_value < 50",
            "ground_truth_sql": "select superhero_name from superhero as t1 where exists( select 1 from hero_attribute as t2 inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'durability' and t2.attribute_value < 50 and t1.id = t2.hero_id )",
            "res": 0
        },
        {
            "sql_idx": 257,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id where t3.power_name = 'death touch'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'death touch'",
            "res": 0
        },
        {
            "sql_idx": 258,
            "predicted_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'strength' and t2.attribute_value = 100 and t1.gender_id = ( select id from gender where gender = 'female' )",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.attribute_name = 'strength' and t2.attribute_value = 100 and t4.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 259,
            "predicted_sql": "select cast(sum(case when t1.publisher_name = 'marvel comics' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from publisher as t1 inner join superhero as t2 on t1.id = t2.publisher_id inner join alignment as t3 on t3.id = t2.alignment_id where t3.alignment = 'bad'",
            "ground_truth_sql": "select ( cast(count(*) as double) * 100 / ( select count(*) from superhero ) ), cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as double) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join alignment as t3 on t3.id = t1.alignment_id where t3.alignment = 'bad'",
            "res": 0
        },
        {
            "sql_idx": 260,
            "predicted_sql": "select ( select count(*) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'dc comics' ) - ( select count(*) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'marvel comics' ) as difference",
            "ground_truth_sql": "select sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 261,
            "predicted_sql": "select id from publisher where publisher_name = 'star trek'",
            "ground_truth_sql": "select id from publisher where publisher_name = 'star trek'",
            "res": 1
        },
        {
            "sql_idx": 262,
            "predicted_sql": "select count(*) from superhero where full_name is null",
            "ground_truth_sql": "select count(id) from superhero where full_name is null",
            "res": 0
        },
        {
            "sql_idx": 263,
            "predicted_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
            "ground_truth_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
            "res": 1
        },
        {
            "sql_idx": 264,
            "predicted_sql": "select t1.power_name from superpower as t1 inner join hero_power as t2 on t1.id = t2.power_id inner join superhero as t3 on t3.id = t2.hero_id inner join gender as t4 on t4.id = t3.gender_id where t4.gender = 'male' group by t1.power_name order by count(t1.power_name) desc limit 5",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id inner join gender as t4 on t4.id = t1.gender_id where t4.gender = 'male' limit 5",
            "res": 0
        },
        {
            "sql_idx": 265,
            "predicted_sql": "select t1.superhero_name from superhero as t1 left join hero_attribute as t2 on t1.id = t2.hero_id where t1.height_cm between 170 and 190 and t2.attribute_name = 'eye color' and t2.attribute_value = 'no colour'",
            "ground_truth_sql": "select distinct t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.height_cm between 170 and 190 and t2.colour = 'no colour'",
            "res": 0
        },
        {
            "sql_idx": 266,
            "predicted_sql": "select t1.hair_colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.height_cm = 185 and t2.race = 'human'",
            "ground_truth_sql": "select distinct t3.colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.race = 'human'",
            "res": 0
        },
        {
            "sql_idx": 267,
            "predicted_sql": "select cast(sum(case when t1.publisher_name = 'marvel comics' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from publisher as t1 inner join superhero as t2 on t1.id = t2.publisher_id where t2.height_cm between 150 and 180",
            "ground_truth_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' then 1 else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
            "res": 0
        },
        {
            "sql_idx": 268,
            "predicted_sql": "select t1.superhero_name from superhero as t1 where t1.gender_id = ( select id from gender where gender = 'male' ) and t1.weight_kg > ( select avg(weight_kg) * 0.79 from superhero )",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'male' and t1.weight_kg * 100 > ( select avg(weight_kg) from superhero ) * 79",
            "res": 0
        },
        {
            "sql_idx": 269,
            "predicted_sql": "select t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
            "ground_truth_sql": "select distinct t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
            "res": 0
        },
        {
            "sql_idx": 270,
            "predicted_sql": "select count(distinct t1.id) from hero_power as t1 inner join superpower as t2 on t2.id = t1.power_id where t2.power_name = 'stealth'",
            "ground_truth_sql": "select count(t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
            "res": 0
        },
        {
            "sql_idx": 271,
            "predicted_sql": "select t1.full_name from superhero as t1 join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.full_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 272,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join publisher as t4 on t1.publisher_id = t4.id where t3.attribute_name = 'durability' and t4.publisher_name = 'dark horse comics' order by t2.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t3.id = t2.attribute_id inner join publisher as t4 on t4.id = t1.publisher_id where t4.publisher_name = 'dark horse comics' and t3.attribute_name = 'durability' order by t2.attribute_value desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 273,
            "predicted_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id where t2.publisher_name = 'dark horse comics' and t1.gender_id = ( select id from gender where gender = 'female' )",
            "ground_truth_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id inner join gender as t3 on t3.id = t1.gender_id where t2.publisher_name = 'dark horse comics' and t3.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 274,
            "predicted_sql": "select t1.superhero_name, t3.publisher_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join publisher as t3 on t1.publisher_id = t3.id where t2.hair_colour_id = t2.eye_colour_id and t2.hair_colour_id = t2.skin_colour_id",
            "ground_truth_sql": "select t1.superhero_name, t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.eye_colour_id = t1.hair_colour_id and t1.eye_colour_id = t1.skin_colour_id",
            "res": 0
        },
        {
            "sql_idx": 275,
            "predicted_sql": "select cast(sum(case when t1.skin_colour_id = ( select id from colour where colour = 'blue' ) then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from superhero as t1 where t1.gender_id = ( select id from gender where gender = 'female' )",
            "ground_truth_sql": "select cast(count(case when t3.colour = 'blue' then t1.id else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 276,
            "predicted_sql": "select count(t2.power_name) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id where t1.superhero_name = 'amazo'",
            "ground_truth_sql": "select count(t1.power_id) from hero_power as t1 inner join superhero as t2 on t1.hero_id = t2.id where t2.superhero_name = 'amazo'",
            "res": 0
        },
        {
            "sql_idx": 277,
            "predicted_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
            "ground_truth_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
            "res": 1
        },
        {
            "sql_idx": 278,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'black' and t3.colour = 'black'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id and t1.hair_colour_id = t2.id where t2.colour = 'black'",
            "res": 0
        },
        {
            "sql_idx": 279,
            "predicted_sql": "select superhero_name from superhero where alignment_id = ( select id from alignment where alignment = 'neutral' )",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id where t2.alignment = 'neutral'",
            "res": 0
        },
        {
            "sql_idx": 280,
            "predicted_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' )",
            "ground_truth_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute )",
            "res": 0
        },
        {
            "sql_idx": 281,
            "predicted_sql": "select cast(sum(case when t1.gender = 'female' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'marvel comics'",
            "ground_truth_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' and t3.gender = 'female' then 1 else null end) as double) * 100 / count(case when t2.publisher_name = 'marvel comics' then 1 else null end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join gender as t3 on t1.gender_id = t3.id",
            "res": 0
        },
        {
            "sql_idx": 282,
            "predicted_sql": "select ( select weight_kg from superhero where full_name = 'emil blonsky' ) - ( select weight_kg from superhero where full_name = 'charles chandler' ) as difference",
            "ground_truth_sql": "select ( select weight_kg from superhero where full_name like 'emil blonsky' ) - ( select weight_kg from superhero where full_name like 'charles chandler' ) as calculate",
            "res": 0
        },
        {
            "sql_idx": 283,
            "predicted_sql": "select avg(height_cm) as average_height from superhero",
            "ground_truth_sql": "select cast(sum(height_cm) as double) / count(id) from superhero",
            "res": 0
        },
        {
            "sql_idx": 284,
            "predicted_sql": "select t2.power_name from superhero as t1 inner join hero_power as t3 on t1.id = t3.hero_id inner join superpower as t2 on t3.power_id = t2.id where t1.superhero_name = 'abomination'",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = 'abomination'",
            "res": 0
        },
        {
            "sql_idx": 285,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id where t2.attribute_name = 'speed' order by t2.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.idwhere t3.attribute_name = 'speed' and t2.attribute_value = (select max(attribute_value) from hero_attribute as t2b where t2b.attribute_id = t3.id ) limit 1",
            "res": 0
        },
        {
            "sql_idx": 286,
            "predicted_sql": "select t1.attribute_name, t2.attribute_value from attribute as t1 inner join hero_attribute as t2 on t1.id = t2.attribute_id inner join superhero as t3 on t3.id = t2.hero_id where t3.superhero_name = '3-d man'",
            "ground_truth_sql": "select t3.attribute_name, t2.attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t1.superhero_name = '3-d man'",
            "res": 0
        },
        {
            "sql_idx": 287,
            "predicted_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t2.id = t1.eye_colour_id where t2.colour = 'blue' inner join colour as t3 on t3.id = t1.hair_colour_id where t3.colour = 'brown'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'brown'",
            "res": 0
        },
        {
            "sql_idx": 288,
            "predicted_sql": "select t1.publisher_name from publisher as t1 join superhero as t2 on t1.id = t2.publisher_id where t2.superhero_name in ('hawkman', 'karate kid', 'speedy')",
            "ground_truth_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
            "res": 0
        },
        {
            "sql_idx": 289,
            "predicted_sql": "select cast(sum(case when t1.eye_colour_id = 7 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from superhero as t1",
            "ground_truth_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 290,
            "predicted_sql": "select cast(sum(case when t1.gender_id = 1 then 1 else 0 end) as decimal(10, 2)) / sum(case when t1.gender_id = 2 then 1 else 0 end) as ratio from superhero as t1",
            "ground_truth_sql": "select cast(count(case when t2.gender = 'male' then t1.id else null end) as double) / count(case when t2.gender = 'female' then t1.id else null end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 291,
            "predicted_sql": "select t1.colour from colour as t1 inner join superhero as t2 on t1.id = t2.eye_colour_id where t2.full_name = 'karen beecher-duncan'",
            "ground_truth_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.full_name = 'karen beecher-duncan'",
            "res": 0
        },
        {
            "sql_idx": 292,
            "predicted_sql": "select sum(case when t1.eye_colour_id = 7 then 1 else 0 end) - sum(case when t1.eye_colour_id = 1 then 1 else 0 end) as diff from superhero as t1 where t1.weight_kg = 0",
            "ground_truth_sql": "select sum(case when t2.id = 7 then 1 else 0 end) - sum(case when t2.id = 1 then 1 else 0 end) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.weight_kg = 0 or t1.weight_kg is null",
            "res": 0
        },
        {
            "sql_idx": 293,
            "predicted_sql": "select count(t1.id) from superhero as t1 inner join colour as t2 on t1.skin_colour_id = t2.id inner join alignment as t3 on t1.alignment_id = t3.id where t2.colour = 'green' and t3.alignment = 'bad'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.alignment = 'bad' and t3.colour = 'green'",
            "res": 0
        },
        {
            "sql_idx": 294,
            "predicted_sql": "select t1.superhero_name from superhero as t1 join hero_power as t2 on t1.id = t2.hero_id join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
            "res": 0
        },
        {
            "sql_idx": 295,
            "predicted_sql": "select t1.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'phoenix force'",
            "ground_truth_sql": "select t4.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.power_name = 'phoenix force'",
            "res": 0
        },
        {
            "sql_idx": 296,
            "predicted_sql": "select t1.publisher_name, count(t2.id) as superhero_count from publisher as t1 join superhero as t2 on t1.id = t2.publisher_id where t1.publisher_name in ('dc comics', 'marvel comics') group by t1.publisher_name order by superhero_count desc limit 1",
            "ground_truth_sql": "select sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
            "res": 0
        }
    ],
    "codebase_community": [
        {
            "sql_idx": 297,
            "predicted_sql": "select displayname from users where reputation = ( select max(reputation) from users where displayname in ( 'harlan', 'jarrod dixon' ) )",
            "ground_truth_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') and reputation = ( select max(reputation) from users where displayname in ('harlan', 'jarrod dixon') )",
            "res": 0
        },
        {
            "sql_idx": 298,
            "predicted_sql": "select displayname from users where year(creationdate) = 2011",
            "ground_truth_sql": "select displayname from users where date_format(cast(creationdate as datetime), '%y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 299,
            "predicted_sql": "select count(id) from users where lastaccessdate > '2014-09-01'",
            "ground_truth_sql": "select count(id) from users where date(lastaccessdate) > '2014-09-01'",
            "res": 0
        },
        {
            "sql_idx": 300,
            "predicted_sql": "select t1.ownerdisplayname from posts as t1 where t1.title = 'eliciting priors from experts'",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'eliciting priors from experts'",
            "res": 0
        },
        {
            "sql_idx": 301,
            "predicted_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "ground_truth_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "res": 1
        },
        {
            "sql_idx": 302,
            "predicted_sql": "select t1.userdisplayname from posthistory as t1 inner join posts as t2 on t1.postid = t2.id where t2.title = 'examples for teaching: correlation does not mean causation' order by t1.creationdate desc limit 1",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.lasteditoruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation'",
            "res": 0
        },
        {
            "sql_idx": 303,
            "predicted_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.age > 65 and t1.score > 19",
            "ground_truth_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score >= 20 and t2.age > 65",
            "res": 0
        },
        {
            "sql_idx": 304,
            "predicted_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
            "ground_truth_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
            "res": 1
        },
        {
            "sql_idx": 305,
            "predicted_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "ground_truth_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "res": 1
        },
        {
            "sql_idx": 306,
            "predicted_sql": "select cast(sum(case when t1.owneruserid in ( select id from users where age > 65 ) then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from posts as t1 where t1.score > 5",
            "ground_truth_sql": "select cast(sum(case when t2.age > 65 then 1 else 0 end) as double) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score > 5",
            "res": 0
        },
        {
            "sql_idx": 307,
            "predicted_sql": "select count(t1.favoritecount) from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39' and t2.userid = 3025",
            "ground_truth_sql": "select t1.favoritecount from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39.0' and t2.userid = 3025",
            "res": 0
        },
        {
            "sql_idx": 308,
            "predicted_sql": "select case when t1.closeddate is null then 'not well-finished' else 'well-finished' end as status from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2013-07-12 09:08:18.0' and t2.userid = 23853",
            "ground_truth_sql": "select case when t2.closeddate is null then 'not well-finished' else 'well-finished' end as resylt from comments as t1 inner join posts as t2 on t1.postid = t2.id where t1.userid = 23853 and t1.creationdate = '2013-07-12 09:08:18.0'",
            "res": 0
        },
        {
            "sql_idx": 309,
            "predicted_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'tiago pasqualini'",
            "ground_truth_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'tiago pasqualini'",
            "res": 0
        },
        {
            "sql_idx": 310,
            "predicted_sql": "select t1.userdisplayname from comments as t1 inner join votes as t2 on t1.id = t2.postid where t2.id = 6347",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.id = 6347",
            "res": 0
        },
        {
            "sql_idx": 311,
            "predicted_sql": "select cast(count(t1.id) as decimal(10, 2)) / count(t2.id) from posts as t1 inner join votes as t2 on t1.id = t2.postid where t1.owneruserid = 24",
            "ground_truth_sql": "select cast(count(distinct t2.id) as double) / count(distinct t1.id) from votes as t1 inner join posts as t2 on t1.userid = t2.owneruserid where t1.userid = 24",
            "res": 0
        },
        {
            "sql_idx": 312,
            "predicted_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
            "ground_truth_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
            "res": 1
        },
        {
            "sql_idx": 313,
            "predicted_sql": "select text from comments where score = 17",
            "ground_truth_sql": "select text from comments where score = 17",
            "res": 1
        },
        {
            "sql_idx": 314,
            "predicted_sql": "select distinct t2.displayname from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.text = 'thank you user93!'",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.text = 'thank you user93!'",
            "res": 0
        },
        {
            "sql_idx": 315,
            "predicted_sql": "select t1.displayname, t1.reputation from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t2.title = 'understanding what dassault isight is doing?'",
            "ground_truth_sql": "select t1.displayname, t1.reputation from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t2.title = 'understanding what dassault isight is doing?'",
            "res": 1
        },
        {
            "sql_idx": 316,
            "predicted_sql": "select t1.ownerdisplayname from posts as t1 where t1.title = 'open source tools for visualizing multi-dimensional data'",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'open source tools for visualizing multi-dimensional data?'",
            "res": 0
        },
        {
            "sql_idx": 317,
            "predicted_sql": "select t2.text from posthistory as t1 inner join comments as t2 on t1.postid = t2.postid where t1.userid = t2.userid and t1.text = 'why square the difference instead of taking the absolute value in standard deviation?'",
            "ground_truth_sql": "select t2.comment from posts as t1 inner join posthistory as t2 on t1.id = t2.postid where t1.title = 'why square the difference instead of taking the absolute value in standard deviation?'",
            "res": 0
        },
        {
            "sql_idx": 318,
            "predicted_sql": "select distinct t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.bountyamount = 50 and t2.postid in ( select id from posts where title like '%variance%' )",
            "ground_truth_sql": "select t3.displayname, t1.title from posts as t1 inner join votes as t2 on t1.id = t2.postid inner join users as t3 on t3.id = t2.userid where t2.bountyamount = 50 and t1.title like '%variance%'",
            "res": 0
        },
        {
            "sql_idx": 319,
            "predicted_sql": "select avg(t1.viewcount) as avg_view_count, t1.title, t2.text from posts as t1 inner join comments as t2 on t1.id = t2.postid where t1.tags like '%<humor>%' group by t1.title, t2.text",
            "ground_truth_sql": "select avg(t2.viewcount) as average_view_count, t2.title, t1.text from comments as t1 inner join posts as t2 on t2.id = t1.postid where t2.tags = '<humor>' group by t2.title, t1.text",
            "res": 0
        },
        {
            "sql_idx": 320,
            "predicted_sql": "select count(distinct userid) from badges group by userid having count(id) > 5",
            "ground_truth_sql": "select count(userid) from ( select userid, count(name) as num from badges group by userid ) as t where t.num > 5",
            "res": 0
        },
        {
            "sql_idx": 321,
            "predicted_sql": "select distinct t1.id from posts as t1 inner join ( select postid, count(*) as cnt from posthistory group by postid having cnt = 1 ) as t2 on t1.id = t2.postid where t1.viewcount >= 1000",
            "ground_truth_sql": "select t2.userid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t3.viewcount >= 1000 group by t2.userid having count(distinct t2.posthistorytypeid) = 1",
            "res": 0
        },
        {
            "sql_idx": 322,
            "predicted_sql": "select cast(sum(case when year(date) = 2010 then 1 else 0 end) as decimal(10, 2)) * 100 / sum(case when year(date) = 2011 then 1 else 0 end) as percentage_difference from badges where name = 'student'",
            "ground_truth_sql": "select cast(sum(case when date_format(cast(date as datetime), '%y') = '2010' then 1 else 0 end) as double) * 100 / count(id) - cast(sum(case when date_format(cast(date as datetime), '%y') = '2011' then 1 else 0 end) as double) * 100 / count(id) from badges where name = 'student'",
            "res": 0
        },
        {
            "sql_idx": 323,
            "predicted_sql": "select avg(t1.upvotes) as average_up_votes, avg(t1.age) as average_user_age from users as t1 inner join posts as t2 on t1.id = t2.owneruserid group by t1.id having count(t2.id) > 10",
            "ground_truth_sql": "select avg(t1.upvotes), avg(t1.age) from users as t1 inner join ( select owneruserid, count(*) as post_count from posts group by owneruserid having post_count > 10 ) as t2 on t1.id = t2.owneruserid",
            "res": 0
        },
        {
            "sql_idx": 324,
            "predicted_sql": "select cast(sum(case when year(creationdate) = 2010 then 1 else 0 end) as decimal(10, 2)) / sum(case when year(creationdate) = 2011 then 1 else 0 end) as ratio from votes",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(creationdate as datetime), '%y') = '2010' then 1 else 0 end ) as double) / sum( case when date_format(cast(creationdate as datetime), '%y') = '2011' then 1 else 0 end ) from votes",
            "res": 0
        },
        {
            "sql_idx": 325,
            "predicted_sql": "select t1.id from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'slashnick' order by t1.answercount desc limit 1",
            "ground_truth_sql": "select t2.postid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'slashnick' order by t3.answercount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 326,
            "predicted_sql": "select t1.title from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname in ('harvey motulsky', 'noah snyder') order by t1.viewcount desc limit 1",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'harvey motulsky' or t1.displayname = 'noah snyder' group by t1.displayname order by sum(t3.viewcount) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 327,
            "predicted_sql": "select t3.tagname from posts as t1 inner join posthistory as t2 on t1.id = t2.postid inner join tags as t3 on t3.id = t2.postid where t1.owneruserid = ( select id from users where displayname = 'mark meckes' ) and t1.commentcount = 0",
            "ground_truth_sql": "select t3.tags from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid where t1.displayname = 'mark meckes' and t3.commentcount = 0",
            "res": 0
        },
        {
            "sql_idx": 328,
            "predicted_sql": "select cast(sum(case when t1.tags like '%<r>%' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'community'",
            "ground_truth_sql": "select cast(sum(case when t3.tagname = 'r' then 1 else 0 end) as double) * 100 / count(t1.id) from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join tags as t3 on t3.excerptpostid = t2.postid where t1.displayname = 'community'",
            "res": 0
        },
        {
            "sql_idx": 329,
            "predicted_sql": "select sum(case when t2.ownerdisplayname = 'mornington' then t1.viewcount else 0 end) - sum(case when t2.ownerdisplayname = 'amos' then t1.viewcount else 0 end) as diff from posts as t1 inner join users as t2 on t1.owneruserid = t2.id",
            "ground_truth_sql": "select sum(case when t1.displayname = 'mornington' then t3.viewcount else 0 end) - sum(case when t1.displayname = 'amos' then t3.viewcount else 0 end) as diff from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid",
            "res": 0
        },
        {
            "sql_idx": 330,
            "predicted_sql": "select avg(t1.id) from postlinks as t1 inner join posts as t2 on t1.postid = t2.id where year(t2.creationdate) = 2010 and t2.answercount <= 2",
            "ground_truth_sql": "select cast(count(t1.id) as double) / 12 from postlinks as t1 inner join posts as t2 on t1.postid = t2.id where t2.answercount <= 2 and date_format(cast(t1.creationdate as datetime), '%y') = '2010'",
            "res": 0
        },
        {
            "sql_idx": 331,
            "predicted_sql": "select min(creationdate) from votes as t1 inner join users as t2 on t1.userid = t2.id where t2.displayname = 'chl'",
            "ground_truth_sql": "select t2.creationdate from users as t1 inner join votes as t2 on t1.id = t2.userid where t1.displayname = 'chl' order by t2.creationdate limit 1",
            "res": 0
        },
        {
            "sql_idx": 332,
            "predicted_sql": "select t1.displayname from users as t1 inner join badges as t2 on t1.id = t2.userid where t2.name = 'autobiographer' order by t2.date asc limit 1",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join badges as t2 on t1.id = t2.userid where t2.name = 'autobiographer' order by t2.date limit 1",
            "res": 0
        },
        {
            "sql_idx": 333,
            "predicted_sql": "select count(distinct t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.location = 'united kingdom' and t2.favoritecount >= 4",
            "ground_truth_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.location = 'united kingdom' and t2.favoritecount >= 4",
            "res": 0
        },
        {
            "sql_idx": 334,
            "predicted_sql": "select t1.id, t1.title from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'harvey motulsky' order by t1.viewcount desc limit 1",
            "ground_truth_sql": "select t2.id, t2.title from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'harvey motulsky' order by t2.viewcount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 335,
            "predicted_sql": "select id, ownerdisplayname from posts where year(creationdate) = 2010 order by favoritecount desc limit 1",
            "ground_truth_sql": "select t2.owneruserid, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where date_format(cast(t1.creationdate as datetime), '%y') = '2010' order by t2.favoritecount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 336,
            "predicted_sql": "select cast(sum(case when year(t1.creationdate) = 2011 and t2.reputation > 1000 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(t2.creaiondate as datetime), '%y') = '2011' and t1.reputation > 1000 then 1 else 0 end ) as double) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid",
            "res": 0
        },
        {
            "sql_idx": 337,
            "predicted_sql": "select sum(t1.viewcount) as total_views, t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'computer game datasets' order by t1.lasactivitydate desc limit 1",
            "ground_truth_sql": "select t2.viewcount, t3.displayname from posthistory as t1 inner join posts as t2 on t1.postid = t2.id inner join users as t3 on t2.lasteditoruserid = t3.id where t1.text = 'computer game datasets'",
            "res": 0
        },
        {
            "sql_idx": 338,
            "predicted_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.score = ( select max(score) from posts )",
            "ground_truth_sql": "select count(t2.id) from posts as t1 inner join comments as t2 on t1.id = t2.postid group by t1.id order by t1.score desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 339,
            "predicted_sql": "select t2.text, t2.userdisplayname from posts as t1 inner join comments as t2 on t1.id = t2.postid where t1.title = 'analysing wind data with r' order by t2.creationdate desc limit 10",
            "ground_truth_sql": "select t3.text, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join comments as t3 on t2.id = t3.postid where t2.title = 'analysing wind data with r' order by t1.creationdate desc limit 10",
            "res": 0
        },
        {
            "sql_idx": 340,
            "predicted_sql": "select cast(sum(case when t1.score > 50 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id order by t2.reputation desc limit 1",
            "ground_truth_sql": "select cast(sum(case when t2.score > 50 then 1 else 0 end) as double) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join ( select max(reputation) as max_reputation from users ) as t3 on t1.reputation = t3.max_reputation",
            "res": 0
        },
        {
            "sql_idx": 341,
            "predicted_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
            "ground_truth_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
            "res": 1
        },
        {
            "sql_idx": 342,
            "predicted_sql": "select t1.reputation, t1.upvotes from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.text = 'fine, you win :)'",
            "ground_truth_sql": "select t2.reputation, t2.upvotes from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.text = 'fine, you win :)'",
            "res": 0
        },
        {
            "sql_idx": 343,
            "predicted_sql": "select t1.text from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.viewcount between 100 and 150 order by t1.score desc limit 1",
            "ground_truth_sql": "select text from comments where postid in ( select id from posts where viewcount between 100 and 150 ) order by score desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 344,
            "predicted_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.commentcount = 1 and t1.score = 0",
            "ground_truth_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.commentcount = 1 and t2.score = 0",
            "res": 0
        },
        {
            "sql_idx": 345,
            "predicted_sql": "select cast(sum(case when t1.upvotes = 0 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.score between 5 and 10",
            "ground_truth_sql": "select cast(sum(case when t1.upvotes = 0 then 1 else 0 end) as double) * 100 / count(t1.id) as per from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.score between 5 and 10",
            "res": 0
        }
    ],
    "card_games": [
        {
            "sql_idx": 346,
            "predicted_sql": "select name from cards where cardkingdomfoilid is not null and cardkingdomid is not null",
            "ground_truth_sql": "select id from cards where not cardkingdomfoilid is null and not cardkingdomid is null",
            "res": 0
        },
        {
            "sql_idx": 347,
            "predicted_sql": "select name from cards where bordercolor = 'borderless' and cardkingdomfoilid is null and cardkingdomid is not null",
            "ground_truth_sql": "select id from cards where bordercolor = 'borderless' and ( cardkingdomid is null or cardkingdomid is null )",
            "res": 0
        },
        {
            "sql_idx": 348,
            "predicted_sql": "select distinct t1.name from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.rarity = 'mythic' and t2.status = 'banned' and t2.format = 'gladiator'",
            "ground_truth_sql": "select distinct t1.id from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'gladiator' and t2.status = 'banned' and t1.rarity = 'mythic'",
            "res": 0
        },
        {
            "sql_idx": 349,
            "predicted_sql": "select t1.status from legalities as t1 inner join cards as t2 on t2.mtgoid = t1.uuid where t2.types = 'artifact' and t2.side is null and t1.format = 'vintage'",
            "ground_truth_sql": "select distinct t2.status from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.type = 'artifact' and t2.format = 'vintage' and t1.side is null",
            "res": 0
        },
        {
            "sql_idx": 350,
            "predicted_sql": "select t1.id, t1.artist from cards as t1 inner join legalities as t2 on t1.id = t2.uuid where t1.power = '*' and t2.format = 'commander' and t2.status = 'legal'",
            "ground_truth_sql": "select t1.id, t1.artist from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'legal' and t2.format = 'commander' and ( t1.power is null or t1.power = '*' )",
            "res": 0
        },
        {
            "sql_idx": 351,
            "predicted_sql": "select t1.name, t1.text, t1.hascontentwarning from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.artist = 'stephen daniel'",
            "ground_truth_sql": "select t1.id, t2.text, t1.hascontentwarning from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.artist = 'stephen daniele'",
            "res": 0
        },
        {
            "sql_idx": 352,
            "predicted_sql": "select t1.name, t1.artist, t1.ispromo from cards as t1 join rulings as t2 on t1.uuid = t2.uuid group by t1.name, t1.artist, t1.ispromo order by count(t2.id) desc limit 1",
            "ground_truth_sql": "select t1.name, t1.artist, t1.ispromo from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.ispromo = 1 and t1.artist = ( select artist from cards where ispromo = 1 group by artist having count(distinct uuid) = (select max(card_counts.max_count) from (select count(distinct uuid) as max_count from cards where ispromo = 1 group by artist) as card_counts))limit 1",
            "res": 0
        },
        {
            "sql_idx": 353,
            "predicted_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) from cards as t1 inner join foreign_data as t2 on t1.scryfallid = t2.uuid",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid",
            "res": 0
        },
        {
            "sql_idx": 354,
            "predicted_sql": "select count(*) from cards where power = '*'",
            "ground_truth_sql": "select count(*) from cards where power = '*'",
            "res": 1
        },
        {
            "sql_idx": 355,
            "predicted_sql": "select bordercolor from cards where name = 'ancestor''s chosen'",
            "ground_truth_sql": "select distinct bordercolor from cards where name = 'ancestor''s chosen'",
            "res": 0
        },
        {
            "sql_idx": 356,
            "predicted_sql": "select t1.format from legalities as t1 inner join cards as t2 on t2.uuid = t1.uuid where t2.name = 'benalish knight'",
            "ground_truth_sql": "select t2.format from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.name = 'benalish knight'",
            "res": 0
        },
        {
            "sql_idx": 357,
            "predicted_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) from cards",
            "ground_truth_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as double) * 100 / count(id) from cards",
            "res": 0
        },
        {
            "sql_idx": 358,
            "predicted_sql": "select cast(sum(case when t1.language = 'french' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from foreign_data as t1 inner join cards as t2 on t1.uuid = t2.uuid where t2.isstoryspotlight = 1",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.isstoryspotlight = 1",
            "res": 0
        },
        {
            "sql_idx": 359,
            "predicted_sql": "select count(*) from cards where originaltype = 'summon - angel' and subtypes != 'angel'",
            "ground_truth_sql": "select count(id) from cards where originaltype = 'summon - angel' and subtypes <> 'angel'",
            "res": 0
        },
        {
            "sql_idx": 360,
            "predicted_sql": "select id from cards where dueldeck = 'a'",
            "ground_truth_sql": "select id from cards where dueldeck = 'a'",
            "res": 1
        },
        {
            "sql_idx": 361,
            "predicted_sql": "select count(*) from legalities as t1 inner join cards as t2 on t1.uuid = t2.uuid where t1.status = 'banned' and t2.bordercolor = 'white'",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'banned' and t1.bordercolor = 'white'",
            "res": 0
        },
        {
            "sql_idx": 362,
            "predicted_sql": "select t1.name from cards as t1 inner join foreign_data as t2 on t1.scryfallid = t2.uuid where t1.originaltype = 'artifact' and t1.colors = 'b' and t2.language = 'foreign'",
            "ground_truth_sql": "select distinct t1.name from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.originaltype = 'artifact' and t1.colors = 'b'",
            "res": 0
        },
        {
            "sql_idx": 363,
            "predicted_sql": "select manacost from cards where layout = 'normal' and frameversion = '2003' and bordercolor = 'black' and availability = 'mtgo, paper'",
            "ground_truth_sql": "select manacost from cards where availability = 'mtgo, paper' and bordercolor = 'black' and frameversion = 2003 and layout = 'normal'",
            "res": 0
        },
        {
            "sql_idx": 364,
            "predicted_sql": "select cast(sum(case when isstoryspotlight = 1 and istextless = 0 then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) from cards",
            "ground_truth_sql": "select cast(sum(case when istextless = 0 and isstoryspotlight = 1 then 1 else 0 end) as double) * 100 / count(id) from cards",
            "res": 0
        },
        {
            "sql_idx": 365,
            "predicted_sql": "select count(t1.id) from set_translations as t1 inner join sets as t2 on t1.setcode = t2.code where t2.block = 'commander' and t1.language = 'portuguese (brasil)'",
            "ground_truth_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t2.language = 'portuguese (brazil)' and t1.block = 'commander'",
            "res": 0
        },
        {
            "sql_idx": 366,
            "predicted_sql": "select distinct t1.supertypes, t1.subtypes from cards as t1 inner join foreign_data as t2 on t1.scryfallid = t2.uuid where t2.language = 'german'",
            "ground_truth_sql": "select t1.subtypes, t1.supertypes from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t2.language = 'german' and not t1.subtypes is null and not t1.supertypes is null",
            "res": 0
        },
        {
            "sql_idx": 367,
            "predicted_sql": "select count(*) from cards where power is null or power = '*' and text like '%triggered ability%'",
            "ground_truth_sql": "select count(distinct t1.id) from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where ( t1.power is null or t1.power = '*' ) and t2.text like '%triggered ability%'",
            "res": 0
        },
        {
            "sql_idx": 368,
            "predicted_sql": "select count(t1.id) from cards as t1 inner join rulings as t2 on t1.id = t2.uuid where t1.format = 'premodern' and t2.text = 'this is a triggered mana ability.' and t1.side is null",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid inner join rulings as t3 on t1.uuid = t3.uuid where t2.format = 'premodern' and t3.text = 'this is a triggered mana ability.' and t1.side is null",
            "res": 0
        },
        {
            "sql_idx": 369,
            "predicted_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t1.scryfallid = t2.uuid where t1.artist = 'matthew d. wilson' and t1.type = 'creature' and t1.layout = 'normal' and t1.bordercolor = 'black' and t2.language = 'french'",
            "ground_truth_sql": "select name from foreign_data where uuid in ( select uuid from cards where types = 'creature' and layout = 'normal' and bordercolor = 'black' and artist = 'matthew d. wilson' ) and language = 'french'",
            "res": 0
        },
        {
            "sql_idx": 370,
            "predicted_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.basesetsize = 180",
            "ground_truth_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.basesetsize = 180",
            "res": 1
        },
        {
            "sql_idx": 371,
            "predicted_sql": "select cast(sum(case when t1.hascontentwarning = 0 then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.id) from cards as t1 inner join legalities as t2 on t1.id = t2.uuid where t2.format = 'commander' and t2.status = 'legal'",
            "ground_truth_sql": "select cast(sum(case when t1.hascontentwarning = 0 then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'commander' and t2.status = 'legal'",
            "res": 0
        },
        {
            "sql_idx": 372,
            "predicted_sql": "select cast(sum(case when t1.language = 'french' and t1.power is null or t1.power = '*' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.power) from foreign_data as t1 inner join cards as t2 on t1.multiverseid = t2.multiverseid where t2.power is null or t2.power = '*'",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.power is null or t1.power = '*'",
            "res": 0
        },
        {
            "sql_idx": 373,
            "predicted_sql": "select t1.language from foreign_data as t1 inner join cards as t2 on t2.scryfallid = t1.uuid where t2.multiverseid = 149934",
            "ground_truth_sql": "select language from foreign_data where multiverseid = 149934",
            "res": 0
        },
        {
            "sql_idx": 374,
            "predicted_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as decimal(10, 2)) / count(*) from cards",
            "ground_truth_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as double) * 100 / count(*) from cards",
            "res": 0
        },
        {
            "sql_idx": 375,
            "predicted_sql": "select distinct t1.language from set_translations as t1 inner join sets as t2 on t1.setcode = t2.code where t2.mcmname = 'archenemy' and t2.setcode = 'arc'",
            "ground_truth_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.mcmname = 'archenemy' and t2.setcode = 'arc'",
            "res": 0
        },
        {
            "sql_idx": 376,
            "predicted_sql": "select t1.language from foreign_data as t1 inner join cards as t2 on t2.scryfallid = t1.scryfallid where t2.name = 'a pedra fellwar'",
            "ground_truth_sql": "select distinct language from foreign_data where name = 'a pedra fellwar'",
            "res": 0
        },
        {
            "sql_idx": 377,
            "predicted_sql": "select name, convertedmanacost from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
            "ground_truth_sql": "select name from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 378,
            "predicted_sql": "select t2.translation from cards as t1 inner join set_translations as t2 on t1.setcode = t2.setcode where t1.name = 'ancestor''s chosen' and t2.language = 'italian'",
            "ground_truth_sql": "select translation from set_translations where setcode in ( select setcode from cards where name = 'ancestor''s chosen' ) and language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 379,
            "predicted_sql": "select case when count(t1.id) > 0 then 'yes' else 'no' end as korean_version from foreign_data as t1 inner join cards as t2 on t1.multiverseid = t2.multiverseid where t2.name = 'ancestor''s chosen' and t1.language = 'korean'",
            "ground_truth_sql": "select case when sum( case when t2.language = 'korean' and not t2.translation is null then 1 else 0 end ) > 0 then 'yes' else 'no' end from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t1.name = 'ancestor''s chosen'",
            "res": 0
        },
        {
            "sql_idx": 380,
            "predicted_sql": "select count(t1.id) from cards as t1 inner join set_translations as t2 on t1.setcode = t2.setcode where t2.translation = 'hauptset zehnte edition' and t1.artist = 'adam rex'",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t2.translation = 'hauptset zehnte edition' and t1.artist = 'adam rex'",
            "res": 0
        },
        {
            "sql_idx": 381,
            "predicted_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
            "ground_truth_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
            "res": 0
        },
        {
            "sql_idx": 382,
            "predicted_sql": "select t1.isonlineonly from sets as t1 inner join cards as t2 on t1.code = t2.setcode where t2.name = 'angel of mercy'",
            "ground_truth_sql": "select case when not t2.mtgocode is null then 'yes' else 'no' end from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'angel of mercy'",
            "res": 0
        },
        {
            "sql_idx": 383,
            "predicted_sql": "select count(t1.id) from set_translations as t1 inner join sets as t2 on t1.setcode = t2.code where t2.block = 'ice age' and t1.language = 'italian' and t1.translation is not null",
            "ground_truth_sql": "select count(distinct t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.block = 'ice age' and t2.language = 'italian' and not t2.translation is null",
            "res": 0
        },
        {
            "sql_idx": 384,
            "predicted_sql": "select isforeignonly from sets where name = 'adarkar valkyrie'",
            "ground_truth_sql": "select case when isforeignonly = 1 then 'yes' else 'no' end from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'adarkar valkyrie'",
            "res": 0
        },
        {
            "sql_idx": 385,
            "predicted_sql": "select count(t1.id) from set_translations as t1 inner join sets as t2 on t1.setcode = t2.code where t1.language = 'italian' and t2.basesetsize < 10",
            "ground_truth_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where not t2.translation is null and t1.basesetsize < 100 and t2.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 386,
            "predicted_sql": "select distinct t1.artist from cards as t1 inner join sets as t2 on t1.setcode = t2.code where t1.artist in ('jeremy jarvis', 'aaron miller', 'chippy') and t2.name = 'coldsnap'",
            "ground_truth_sql": "select t1.artist from cards as t1 inner join sets as t2 on t2.code = t1.setcode where ( t2.name = 'coldsnap' and t1.artist = 'chippy' ) or ( t2.name = 'coldsnap' and t1.artist = 'aaron miller' ) or ( t2.name = 'coldsnap' and t1.artist = 'jeremy jarvis' ) group by t1.artist",
            "res": 0
        },
        {
            "sql_idx": 387,
            "predicted_sql": "select count(t1.id) from cards as t1 inner join sets as t2 on t1.setcode = t2.code where t2.name = 'coldsnap' and t1.convertedmanacost > 5 and (t1.power = '*' or t1.power is null)",
            "ground_truth_sql": "select sum(case when t1.power = '*' or t1.power is null then 1 else 0 end) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap' and t1.convertedmanacost > 5",
            "res": 0
        },
        {
            "sql_idx": 388,
            "predicted_sql": "select t1.flavortext from foreign_data as t1 inner join cards as t2 on t1.uuid = t2.uuid where t2.name = 'ancestor''s chosen' and t1.language = 'italian'",
            "ground_truth_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t2.uuid = t1.uuid where t1.name = 'ancestor''s chosen' and t2.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 389,
            "predicted_sql": "select t1.flavortext from rulings as t1 inner join cards as t2 on t1.uuid = t2.uuid where t2.setcode = 'coldsnap' and t1.language = 'italian'",
            "ground_truth_sql": "select distinct t1.text from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 390,
            "predicted_sql": "select t1.name from cards as t1 inner join set_translations as t2 on t1.setcode = t2.setcode where t2.language = 'italian' and t1.name = 'coldsnap' order by t1.convertedmanacost desc limit 1",
            "ground_truth_sql": "select t2.name from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian' order by t2.convertedmanacost desc",
            "res": 0
        },
        {
            "sql_idx": 391,
            "predicted_sql": "select cast(sum(case when t1.convertedmanacost = 7 then 1 else 0 end) as decimal(10, 4)) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t1.setcode = t2.code where t2.name = 'coldsnap'",
            "ground_truth_sql": "select cast(sum(case when t1.convertedmanacost = 7 then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 392,
            "predicted_sql": "select cast(sum(case when cardkingdomfoilid is not null and cardkingdomid is not null then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) from cards where name = 'coldsnap'",
            "ground_truth_sql": "select cast(sum( case when not t1.cardkingdomfoilid is null and not t1.cardkingdomid is null then 1 else 0 end ) as double) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 393,
            "predicted_sql": "select t1.format, t1.name from legalities as t1 inner join cards as t2 on t1.uuid = t2.uuid where t1.status = 'banned' group by t1.format, t1.name order by count(t1.status) desc limit 1",
            "ground_truth_sql": "select t2.format, t1.name from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid inner join ( select format from legalities where status = 'banned' group by format order by count(*) desc limit 1 ) as maxbanned on maxbanned.format = t2.format where t2.status = 'banned'",
            "res": 0
        },
        {
            "sql_idx": 394,
            "predicted_sql": "select distinct t1.name, t2.format from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.edhrecrank = 1 and t2.status = 'banned'",
            "ground_truth_sql": "select t1.name, t2.format from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid where t1.edhrecrank = 1 and t2.status = 'banned' group by t1.name, t2.format",
            "res": 0
        },
        {
            "sql_idx": 395,
            "predicted_sql": "select c.name as card_name, l.format from cards c join legalities l on c.uuid = l.uuid where c.setcode = 'h0d'",
            "ground_truth_sql": "select distinct t2.name, case when t1.status = 'legal' then t1.format else null end from legalities as t1 inner join cards as t2 on t2.uuid = t1.uuid where t2.setcode in ( select code from sets where name = 'hour of devastation' )",
            "res": 0
        },
        {
            "sql_idx": 396,
            "predicted_sql": "select t1.name from sets as t1 left join set_translations as t2 on t1.code = t2.setcode and t2.language = 'japanese' where t2.setcode is null and t1.name in ( select t3.name from sets as t3 left join set_translations as t4 on t3.code = t4.setcode and t4.language = 'korean' where t4.setcode is not null )",
            "ground_truth_sql": "select name from sets where code in ( select setcode from set_translations where language = 'korean' and not language like '%japanese%' )",
            "res": 0
        },
        {
            "sql_idx": 397,
            "predicted_sql": "select distinct t1.frameversion, t1.name from cards as t1 inner join legalities as t2 on t1.id = t2.id where t1.artist = 'allen williams' and t2.status = 'banned'",
            "ground_truth_sql": "select distinct t1.frameversion, t1.name, case when t2.status = 'banned' then t1.name else 'no' end from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.artist = 'allen williams'",
            "res": 0
        }
    ],
    "toxicology": [
        {
            "sql_idx": 398,
            "predicted_sql": "select bond_type from bond group by bond_type order by count(bond_id) desc limit 1",
            "ground_truth_sql": "select t.bond_type from ( select bond_type, count(bond_id) from bond group by bond_type order by count(bond_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 399,
            "predicted_sql": "select avg(t1.element) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-'",
            "ground_truth_sql": "select avg(oxygen_count) from ( select t1.molecule_id, count(t1.element) as oxygen_count from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-' and t1.element = 'o' group by t1.molecule_id ) as oxygen_counts",
            "res": 0
        },
        {
            "sql_idx": 400,
            "predicted_sql": "select avg(case when bond_type = '-' then 1 else 0 end) as average from bond where molecule_id in ( select molecule_id from molecule where label = '+' )",
            "ground_truth_sql": "select avg(single_bond_count) from ( select t3.molecule_id, count(t1.bond_type) as single_bond_count from bond as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id inner join molecule as t3 on t3.molecule_id = t2.molecule_id where t1.bond_type = '-' and t3.label = '+' group by t3.molecule_id ) as subquery",
            "res": 0
        },
        {
            "sql_idx": 401,
            "predicted_sql": "select t1.molecule_id from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '#' and t1.label = '+'",
            "ground_truth_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '#' and t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 402,
            "predicted_sql": "select cast(sum(case when t2.element = 'c' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t2.atom_id) from bond as t1 inner join atom as t2 on t1.bond_id = t2.atom_id where t1.bond_type = '='",
            "ground_truth_sql": "select cast(count(distinct case when t1.element = 'c' then t1.atom_id else null end) as double) * 100 / count(distinct t1.atom_id) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '='",
            "res": 0
        },
        {
            "sql_idx": 403,
            "predicted_sql": "select t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr004_8_9'",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr004_8_9'",
            "res": 0
        },
        {
            "sql_idx": 404,
            "predicted_sql": "select t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t3.bond_id = t2.bond_id where t3.bond_type = '='",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id inner join connected as t3 on t1.atom_id = t3.atom_id where t2.bond_type = '='",
            "res": 0
        },
        {
            "sql_idx": 405,
            "predicted_sql": "select t1.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' group by t1.label order by count(t1.label) desc limit 1",
            "ground_truth_sql": "select t.label from ( select t2.label, count(t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' group by t2.label order by count(t2.molecule_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 406,
            "predicted_sql": "select t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-' group by t1.element order by count(t1.element) asc limit 1",
            "ground_truth_sql": "select t.element from ( select t1.element, count(distinct t1.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-' group by t1.element order by count(distinct t1.molecule_id) asc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 407,
            "predicted_sql": "select bond_type from bond as t1 join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_8' and t2.atom_id2 = 'tr004_20' union select bond_type from bond as t1 join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_20' and t2.atom_id2 = 'tr004_8'",
            "ground_truth_sql": "select t1.bond_type from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_8' and t2.atom_id2 = 'tr004_20' or t2.atom_id2 = 'tr004_8' and t2.atom_id = 'tr004_20'",
            "res": 0
        },
        {
            "sql_idx": 408,
            "predicted_sql": "select count(distinct t1.atom_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t3.bond_id = t2.bond_id where t1.element = 'i' and t3.bond_type = '-' and t1.molecule_id in ( select molecule_id from atom where element = 's' )",
            "ground_truth_sql": "select count(distinct case when t1.element = 'i' then t1.atom_id else null end) as iodine_nums, count(distinct case when t1.element = 's' then t1.atom_id else null end) as sulfur_nums from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '-'",
            "res": 0
        },
        {
            "sql_idx": 409,
            "predicted_sql": "select cast(sum(case when t1.label = '+' and t2.element != 'f' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.molecule_id) from molecule as t1 left join atom as t2 on t1.molecule_id = t2.molecule_id",
            "ground_truth_sql": "select cast(count(distinct case when t1.element <> 'f' then t2.molecule_id else null end) as double) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 410,
            "predicted_sql": "select cast(sum(case when t2.bond_type = '#' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t2.bond_id) from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t1.label = '+'",
            "ground_truth_sql": "select cast(count(distinct case when t2.label = '+' then t2.molecule_id else null end) as double) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#'",
            "res": 0
        },
        {
            "sql_idx": 411,
            "predicted_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id in ( select bond_id from bond where molecule_id = 'tr000' ) order by t2.element asc limit 3",
            "ground_truth_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr000' order by t.element limit 3",
            "res": 0
        },
        {
            "sql_idx": 412,
            "predicted_sql": "select cast(sum(case when bond_type = '=' then 1 else 0 end) as decimal(10, 5)) * 100 / count(bond_id) from bond where molecule_id = 'tr008'",
            "ground_truth_sql": "select round( cast(count(case when t.bond_type = '=' then t.bond_id else null end) as double) * 100 / count(t.bond_id), 5 ) from bond as t where t.molecule_id = 'tr008'",
            "res": 0
        },
        {
            "sql_idx": 413,
            "predicted_sql": "select cast(sum(case when label = '+' then 1 else 0 end) as decimal(10, 2)) * 100 / count(molecule_id) from molecule",
            "ground_truth_sql": "select round( cast(count(case when t.label = '+' then t.molecule_id else null end) as double) * 100 / count(t.molecule_id), 3 ) from molecule as t",
            "res": 0
        },
        {
            "sql_idx": 414,
            "predicted_sql": "select cast(sum(case when t2.element = 'h' then 1 else 0 end) as decimal(10, 4)) * 100 / count(t2.atom_id) from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.molecule_id = 'tr206'",
            "ground_truth_sql": "select round( cast(count(case when t.element = 'h' then t.atom_id else null end) as double) * 100 / count(t.atom_id), 4 ) from atom as t where t.molecule_id = 'tr206'",
            "res": 0
        },
        {
            "sql_idx": 415,
            "predicted_sql": "select t2.element, t1.label from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.molecule_id = 'tr060'",
            "ground_truth_sql": "select distinct t1.element, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr060'",
            "res": 0
        },
        {
            "sql_idx": 416,
            "predicted_sql": "select t3.bond_type, t1.label from molecule as t1 inner join connected as t2 on t1.molecule_id = t2.atom_id inner join bond as t3 on t3.bond_id = t2.bond_id where t1.molecule_id = 'tr010' group by t3.bond_type order by count(t3.bond_id) desc limit 1",
            "ground_truth_sql": "select t.bond_type from ( select t1.bond_type, count(t1.molecule_id) from bond as t1 where t1.molecule_id = 'tr010' group by t1.bond_type order by count(t1.molecule_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 417,
            "predicted_sql": "select t1.molecule_id from molecule as t1 join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-' order by t1.label asc limit 3",
            "ground_truth_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-' and t2.label = '-' order by t2.molecule_id limit 3",
            "res": 0
        },
        {
            "sql_idx": 418,
            "predicted_sql": "select count(distinct t1.bond_id) from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t2.molecule_id = 'tr009' and (t1.atom_id2 = 'tr009_12' or t1.atom_id = 'tr009_12')",
            "ground_truth_sql": "select count(t2.bond_id) from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t1.molecule_id = 'tr009' and t2.atom_id = concat(t1.molecule_id, '_1') or t2.atom_id2 = concat(t1.molecule_id, '_2')",
            "res": 0
        },
        {
            "sql_idx": 419,
            "predicted_sql": "select t2.bond_type, t1.element from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_id = 'tr001_6_9'",
            "ground_truth_sql": "select t1.bond_type, t2.atom_id, t2.atom_id2 from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.bond_id = 'tr001_6_9'",
            "res": 0
        },
        {
            "sql_idx": 420,
            "predicted_sql": "select count(bond_id) from connected where atom_id = 'tr%_19'",
            "ground_truth_sql": "select count(t.bond_id) from connected as t where substr(t.atom_id, -2) = '19'",
            "res": 0
        },
        {
            "sql_idx": 421,
            "predicted_sql": "select t2.element from connected as t1 inner join atom as t2 on t2.atom_id = t1.atom_id2 where t1.bond_id in ( select bond_id from bond where molecule_id = 'tr004' )",
            "ground_truth_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr004'",
            "res": 0
        },
        {
            "sql_idx": 422,
            "predicted_sql": "select t1.molecule_id from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t2.atom_id between '21' and '25' and t1.label = '+'",
            "ground_truth_sql": "select distinct t2.molecule_id from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where substr(t1.atom_id, -2) between '21' and '25' and t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 423,
            "predicted_sql": "select t3.bond_id from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t1.element = 'p' and t1.element = 'n'",
            "ground_truth_sql": "select t2.bond_id from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id in ( select t3.bond_id from connected as t3 inner join atom as t4 on t3.atom_id = t4.atom_id where t4.element = 'p' ) and t1.element = 'n'",
            "res": 0
        },
        {
            "sql_idx": 424,
            "predicted_sql": "select t1.label from molecule as t1 join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = ' = ' group by t1.molecule_id order by count(t2.bond_id) desc limit 1",
            "ground_truth_sql": "select t1.label from molecule as t1 inner join ( select t.molecule_id, count(t.bond_type) from bond as t where t.bond_type = '=' group by t.molecule_id order by count(t.bond_type) desc limit 1 ) as t2 on t1.molecule_id = t2.molecule_id",
            "res": 0
        },
        {
            "sql_idx": 425,
            "predicted_sql": "select avg(t3.bond_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id2 inner join bond as t3 on t2.bond_id = t3.bond_id where t1.element = 'i'",
            "ground_truth_sql": "select cast(count(t2.bond_id) as double) / count(t1.atom_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t1.element = 'i'",
            "res": 0
        },
        {
            "sql_idx": 426,
            "predicted_sql": "select t1.element from atom as t1 left join connected as t2 on t1.atom_id = t2.atom_id2 where t2.atom_id2 is null",
            "ground_truth_sql": "select distinct t.element from atom as t where not t.element in ( select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id )",
            "res": 0
        },
        {
            "sql_idx": 427,
            "predicted_sql": "select t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t3.bond_id = t2.bond_id where t3.bond_type = '#' and t3.molecule_id = 'tr041'",
            "ground_truth_sql": "select t2.atom_id, t2.atom_id2 from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '#' and t3.molecule_id = 'tr041'",
            "res": 0
        },
        {
            "sql_idx": 428,
            "predicted_sql": "select t3.element from connected as t1 inner join bond as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t1.atom_id = t3.atom_id where t2.bond_id = 'tr144_8_19'",
            "ground_truth_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr144_8_19'",
            "res": 0
        },
        {
            "sql_idx": 429,
            "predicted_sql": "select t1.element from atom as t1 join connected as t2 on t1.atom_id = t2.atom_id join bond as t3 on t3.bond_id = t2.bond_id where t3.bond_type = '#'",
            "ground_truth_sql": "select distinct t3.element from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '#'",
            "res": 0
        },
        {
            "sql_idx": 430,
            "predicted_sql": "select round(sum(case when t1.label = '+' then 1 else 0 end) * 100.0 / count(*), 5) as proportion from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-'",
            "ground_truth_sql": "select round( cast(count(case when t2.label = '+' then t1.bond_id else null end) as double) * 100 / count(t1.bond_id), 5 ) from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-'",
            "res": 0
        },
        {
            "sql_idx": 431,
            "predicted_sql": "select count(t1.atom_id) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '#' and (t1.element = 'p' or t1.element = 'br')",
            "ground_truth_sql": "select count(t1.atom_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#' and t1.element in ('p', 'br')",
            "res": 0
        },
        {
            "sql_idx": 432,
            "predicted_sql": "select cast(sum(case when t1.element = 'cl' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.atom_id) as percent from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-'",
            "ground_truth_sql": "select cast(count(case when t.element = 'cl' then t.atom_id else null end) as double) * 100 / count(t.atom_id) from ( select t1.atom_id, t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '-' ) as t",
            "res": 0
        },
        {
            "sql_idx": 433,
            "predicted_sql": "select t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr001_10_11'",
            "ground_truth_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr001_10_11'",
            "res": 0
        },
        {
            "sql_idx": 434,
            "predicted_sql": "select cast(sum(case when t1.element = 'cl' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "ground_truth_sql": "select cast(count(case when t1.element = 'cl' then t1.element else null end) as double) * 100 / count(t1.element) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 435,
            "predicted_sql": "select t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and t1.atom_id like '4%'",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and substr(t1.atom_id, -1) = '4' and length(t1.atom_id) = 7",
            "res": 0
        },
        {
            "sql_idx": 436,
            "predicted_sql": "select cast(sum(case when t2.element = 'h' then 1 else 0 end) as decimal(10, 2)) / count(t2.element) as ratio, t1.label from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.molecule_id = 'tr006'",
            "ground_truth_sql": "with subquery as (select distinct t1.atom_id, t1.element, t1.molecule_id, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr006') select cast(count(case when element = 'h' then atom_id else null end) as decimal(10, 2)) / nullif(count(atom_id), 0) as ratio, label from subquery group by label",
            "res": 0
        },
        {
            "sql_idx": 437,
            "predicted_sql": "select t1.molecule_id from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '-' group by t1.molecule_id having count(t2.atom_id) > 5",
            "ground_truth_sql": "select t.molecule_id from ( select t1.molecule_id, count(t2.atom_id) from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '-' group by t1.molecule_id having count(t2.atom_id) > 5 ) as t",
            "res": 0
        }
    ],
    "california_schools": [
        {
            "sql_idx": 438,
            "predicted_sql": "select count(t1.cds) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t1.avgscrmath > 400 and t2.virtual = 'f'",
            "ground_truth_sql": "select count(distinct t2.school) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' and t1.avgscrmath > 400",
            "res": 0
        },
        {
            "sql_idx": 439,
            "predicted_sql": "select cdscode from frpm where frpm_count_k12 + frpm_count_age5_17 > 500",
            "ground_truth_sql": "select t2.cdscode from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.enrollment (k-12) + t2.enrollment (ages 5-17) > 500",
            "res": 0
        },
        {
            "sql_idx": 440,
            "predicted_sql": "select max( cast(t1.free meal count (ages 5-17) as double) / t1.enrollment (ages 5-17) ) from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where cast(t2.numge1500 as double) / t2.numtsttakr > 0.3",
            "ground_truth_sql": "select max( cast(t1.free meal count (ages 5-17) as double) / t1.enrollment (ages 5-17) ) from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where cast(t2.numge1500 as double) / t2.numtsttakr > 0.3",
            "res": 1
        },
        {
            "sql_idx": 441,
            "predicted_sql": "select t1.cds, t1.cname, t1.avgscrwrite, t1.cds from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t1.avgscrwrite > 499 order by t1.avgscrwrite desc",
            "ground_truth_sql": "select charternum, avgscrwrite, rank() over (order by avgscrwrite desc) as writingscorerank from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrwrite > 499 and not charternum is null",
            "res": 0
        },
        {
            "sql_idx": 442,
            "predicted_sql": "select t1.school, t1.street from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.enrollment (k-12) - t2.enrollment (ages 5-17) > 30",
            "ground_truth_sql": "select t1.school, t1.street from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.enrollment (k-12) - t2.enrollment (ages 5-17) > 30",
            "res": 1
        },
        {
            "sql_idx": 443,
            "predicted_sql": "select t1.school from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.percent (%) eligible free (k-12) > 0.1 and t2.frpm_count_k12 > 1500",
            "ground_truth_sql": "select t2.school name from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where cast(t2.free meal count (k-12) as double) / t2.enrollment (k-12) > 0.1 and t1.numge1500 > 0",
            "res": 0
        },
        {
            "sql_idx": 444,
            "predicted_sql": "select t1.school, t1.fundingtype from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrmath > 400 group by t1.school, t1.fundingtype",
            "ground_truth_sql": "select t1.sname, t2.charter funding type from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where t2.district name like 'riverside%' group by t1.sname, t2.charter funding type having cast(sum(t1.avgscrmath) as double) / count(t1.cds) > 400",
            "res": 0
        },
        {
            "sql_idx": 445,
            "predicted_sql": "select t1.school, t1.street, t1.city, t1.state, t1.zip from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.school type = 'high school' and t1.city = 'monterey' and (t2.free meal count (ages 15-17) > 800 or t2.frpm count (ages 15-17) > 800)",
            "ground_truth_sql": "select t1.school name, t2.street, t2.city, t2.state, t2.zip from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'monterey' and t1.free meal count (ages 5-17) > 800 and t1.school type = 'high schools (public)'",
            "res": 0
        },
        {
            "sql_idx": 446,
            "predicted_sql": "select t1.school, t1.communication number, avg(t2.avgscrwrite) from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t1.opendate > '1991-01-01' or t1.closeddate < '2000-01-01' group by t1.school, t1.communication number",
            "ground_truth_sql": "select t2.school, t1.avgscrwrite, t2.phone from schools as t2 left join satscores as t1 on t2.cdscode = t1.cds where date_format(cast(t2.opendate as datetime), '%y') > '1991' or date_format(cast(t2.closeddate as datetime), '%y') < '2000'",
            "res": 0
        },
        {
            "sql_idx": 447,
            "predicted_sql": "select t1.school, t1.doctype from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.fundingtype = 'locally funded' and abs(t2.enrollment (k-12) - t2.enrollment (ages 5-17)) > ( select avg(abs(t2.enrollment (k-12) - t2.enrollment (ages 5-17))) from frpm as t2 inner join schools as t1 on t1.cdscode = t2.cdscode where t1.fundingtype = 'locally funded' )",
            "ground_truth_sql": "select t2.school, t2.doc from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.fundingtype = 'locally funded' and ( t1.enrollment (k-12) - t1.enrollment (ages 5-17) ) > ( select avg(t3.enrollment (k-12) - t3.enrollment (ages 5-17)) from frpm as t3 inner join schools as t4 on t3.cdscode = t4.cdscode where t4.fundingtype = 'locally funded' )",
            "res": 0
        },
        {
            "sql_idx": 448,
            "predicted_sql": "select cast(free meal count (k-12) as double) / enrollment (k-12) from frpm order by enrollment (k-12) desc limit 10, 2",
            "ground_truth_sql": "select cast(free meal count (k-12) as double) / enrollment (k-12) from frpm order by enrollment (k-12) desc limit 2 offset 9",
            "res": 0
        },
        {
            "sql_idx": 449,
            "predicted_sql": "select cast(t2.free meal count (k-12) as double) / t2.enrollment (k-12) as eligiblefreerate from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.ownership = '66' order by t2.free meal count (k-12) desc limit 5",
            "ground_truth_sql": "select cast(t1.frpm count (k-12) as double) / t1.enrollment (k-12) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.soc = 66 order by t1.frpm count (k-12) desc limit 5",
            "res": 0
        },
        {
            "sql_idx": 450,
            "predicted_sql": "select t1.street, t1.city, t1.zip, t1.state from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds order by t2.avgscrread / t2.numtsttakr asc limit 1",
            "ground_truth_sql": "select t2.street, t2.city, t2.state, t2.zip from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by cast(t1.numge1500 as double) / t1.numtsttakr asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 451,
            "predicted_sql": "select t1.admfname1, t1.admlname1 from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.numge1500 > 0 order by t2.numge1500 desc limit 1",
            "ground_truth_sql": "select t2.admfname1, t2.admlname1, t2.admfname2, t2.admlname2, t2.admfname3, t2.admlname3 from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.numge1500 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 452,
            "predicted_sql": "select avg(t2.numtsttakr) from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.opendate between '1980-01-01' and '1980-12-31' and t1.district = 'fresno'",
            "ground_truth_sql": "select avg(t1.numtsttakr) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where date_format(cast(t2.opendate as datetime), '%y') = '1980' and t2.county = 'fresno'",
            "res": 0
        },
        {
            "sql_idx": 453,
            "predicted_sql": "select t1.phone from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.dname = 'fresno unified' order by t2.avgscrread asc limit 1",
            "ground_truth_sql": "select t2.phone from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.district = 'fresno unified' and not t1.avgscrread is null order by t1.avgscrread asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 454,
            "predicted_sql": "select t1.school, t1.county from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t1.virtual = 'f' order by t2.avgscrread desc group by t1.school, t1.county limit 5",
            "ground_truth_sql": "select school from ( select t2.school, t1.avgscrread, rank() over (partition by t2.county order by t1.avgscrread desc) as rnk from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f') ranked_schools where rnk <= 5",
            "res": 0
        },
        {
            "sql_idx": 455,
            "predicted_sql": "select avg(t2.avgscrwrite) as avg_writing_score, t1.school from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t1.admfname1 = 'ricci' and t1.admlname1 = 'ulrich' group by t1.school",
            "ground_truth_sql": "select t2.school, t1.avgscrwrite from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.admfname1 = 'ricci' and t2.admlname1 = 'ulrich'",
            "res": 0
        },
        {
            "sql_idx": 456,
            "predicted_sql": "select t1.state from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.doc = 31 group by t1.state order by sum(t2.enrollment (k-12)) desc limit 1",
            "ground_truth_sql": "select t2.school from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.doc = 31 order by t1.enrollment (k-12) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 457,
            "predicted_sql": "select avg(opendate) from schools where opendate >= 1980 and opendate < 1981 and doc = 52 and state = 'alameda'",
            "ground_truth_sql": "select cast(count(school) as double) / 12 from schools where doc = 52 and county = 'alameda' and date_format(cast(opendate as datetime), '%y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 458,
            "predicted_sql": "select cast(sum(case when t1.doc = 54 then 1 else 0 end) as decimal(10, 2)) / sum(case when t1.doc = 52 then 1 else 0 end) as ratio from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.county = 'orange'",
            "ground_truth_sql": "select cast(sum(case when doc = 54 then 1 else 0 end) as double) / sum(case when doc = 52 then 1 else 0 end) from schools where statustype = 'merged' and county = 'orange'",
            "res": 0
        },
        {
            "sql_idx": 459,
            "predicted_sql": "select t1.school, t1.street from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds order by t2.avgscrmath desc limit 6, 1",
            "ground_truth_sql": "select t2.mailstreet, t2.school from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.avgscrmath desc limit 1 offset 6",
            "res": 0
        },
        {
            "sql_idx": 460,
            "predicted_sql": "select count(t1.cdscode) from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.charter = 0 and t2.percent (%) eligible free (k-12) < 0.18",
            "ground_truth_sql": "select count(t2.school) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.charter = 0 and cast(t1.free meal count (k-12) as double) * 100 / t1.enrollment (k-12) < 0.18",
            "res": 0
        },
        {
            "sql_idx": 461,
            "predicted_sql": "select count(t2.frpm count (ages 5-17)) from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.district = 'fremont' and t2.academic year = '2014-2015' and t1.edopscode = 'sss'",
            "ground_truth_sql": "select t1.enrollment (ages 5-17) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.edopscode = 'sss' and t2.city = 'fremont' and t1.academic year between 2014 and 2015",
            "res": 0
        },
        {
            "sql_idx": 462,
            "predicted_sql": "select t1.school, t2.percent (%) eligible frpm (ages 5-17) from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.gsserved = 'k-9' and t1.county = 'los angeles'",
            "ground_truth_sql": "select t2.school, t1.frpm count (ages 5-17) * 100 / t1.enrollment (ages 5-17) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.gsserved = 'k-9'",
            "res": 0
        },
        {
            "sql_idx": 463,
            "predicted_sql": "select t1.county, count(t1.cdscode) from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.virtual = 'f' and t1.county in ('san diego', 'santa barbara') group by t1.county order by count(t1.cdscode) desc limit 1",
            "ground_truth_sql": "select county, count(virtual) from schools where ( county = 'san diego' or county = 'santa barbara' ) and virtual = 'f' group by county order by count(virtual) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 464,
            "predicted_sql": "select t1.gsoffered from schools as t1 order by t1.longitude desc limit 1",
            "ground_truth_sql": "select gsoffered from schools order by abs(longitude) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 465,
            "predicted_sql": "select count(distinct t1.city) as numberofcities, count(t1.cdscode) as numberofschools from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.gsoffered = 'k-8' and t1.magnet = 1 and t2.nslp provision status = 'multiple provision types'",
            "ground_truth_sql": "select t2.city, count(t2.cdscode) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.magnet = 1 and t2.gsoffered = 'k-8' and t1.nslp provision status = 'multiple provision types' group by t2.city",
            "res": 0
        },
        {
            "sql_idx": 466,
            "predicted_sql": "select t2.percent (%) eligible free (k-12), t1.district from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode inner join satscores as t3 on t1.cdscode = t3.cds where t1.admfname1 = 'alusine'",
            "ground_truth_sql": "select t1.free meal count (k-12) * 100 / t1.enrollment (k-12), t1.district code from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.admfname1 = 'alusine'",
            "res": 0
        },
        {
            "sql_idx": 467,
            "predicted_sql": "select distinct t1.admemail1 from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.county = 'san bernardino' and t1.city = 'san bernardino city' and t1.opendate between '2009-01-01' and '2010-12-31' and t1.doctype = 'unified' and t1.soc = '62' and t1.statustype = 'public' and t1.district = 'city of san bernardino city unified'",
            "ground_truth_sql": "select t2.admemail1, t2.admemail2 from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'san bernardino' and t2.city = 'san bernardino' and t2.doc = 54 and date_format(cast(t2.opendate as datetime), '%y') between '2009' and '2010' and t2.soc = 62",
            "res": 0
        }
    ],
    "financial": [
        {
            "sql_idx": 468,
            "predicted_sql": "select count(t2.account_id) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a3 = 'east bohemia' and t2.frequency = 'poplatek po obratu'",
            "ground_truth_sql": "select count(t2.account_id) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a3 = 'east bohemia' and t2.frequency = 'poplatek po obratu'",
            "res": 1
        },
        {
            "sql_idx": 469,
            "predicted_sql": "select count(district_id) from district where a11 > 6000 and a11 < 10000",
            "ground_truth_sql": "select count(distinct t2.district_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' and t2.a11 between 6000 and 10000",
            "res": 0
        },
        {
            "sql_idx": 470,
            "predicted_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a3 = 'north bohemia' and t2.a11 > 8000",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a3 = 'north bohemia' and t2.a11 > 8000",
            "res": 1
        },
        {
            "sql_idx": 471,
            "predicted_sql": "select t1.account_id, t2.a11, max(t2.a11) - min(t2.a11) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' order by t1.birth_date asc limit 1",
            "ground_truth_sql": "select t1.account_id, ( select max(a11) - min(a11) from district ) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join disp as t3 on t1.account_id = t3.account_id inner join client as t4 on t3.client_id = t4.client_id where t2.district_id = ( select district_id from client where gender = 'f' order by birth_date asc limit 1 ) order by t2.a11 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 472,
            "predicted_sql": "select t1.account_id from client as t1 inner join district as t2 on t1.district_id = t2.district_id order by t1.birth_date desc, t2.a11 desc limit 1",
            "ground_truth_sql": "select t1.account_id from account as t1 inner join disp as t2 on t1.account_id = t2.account_id inner join client as t3 on t2.client_id = t3.client_id inner join district as t4 on t4.district_id = t1.district_id where t2.client_id = ( select client_id from client order by birth_date desc limit 1 ) group by t4.a11, t1.account_id",
            "res": 0
        },
        {
            "sql_idx": 473,
            "predicted_sql": "select t2.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where year(t1.date) = 1997 order by t1.amount asc limit 1",
            "ground_truth_sql": "select t2.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t1.date as datetime), '%y') = '1997' and t2.frequency = 'poplatek tydne' order by t1.amount limit 1",
            "res": 0
        },
        {
            "sql_idx": 474,
            "predicted_sql": "select t1.account_id from loan as t1 join account as t2 on t1.account_id = t2.account_id where t1.duration > 12 and year(t2.date) = 1993 order by t1.amount desc limit 1",
            "ground_truth_sql": "select t1.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t2.date as datetime), '%y') = '1993' and t1.duration > 12 order by t1.amount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 475,
            "predicted_sql": "select count(t1.client_id) from client as t1 inner join account as t2 on t1.client_id = t2.district_id inner join district as t3 on t2.district_id = t3.district_id where t1.gender = 'f' and t1.birth_date < '1950-01-01' and t3.a2 = 'sokolov'",
            "ground_truth_sql": "select count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'f' and date_format(cast(t2.birth_date as datetime), '%y') < '1950' and t1.a2 = 'sokolov'",
            "res": 0
        },
        {
            "sql_idx": 476,
            "predicted_sql": "select t1.district_id from client as t1 inner join account as t2 on t1.client_id = t2.account_id where t1.gender = 'f' and t1.birth_date = '1976-01-29'",
            "ground_truth_sql": "select t1.a2 from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.birth_date = '1976-01-29' and t2.gender = 'f'",
            "res": 0
        },
        {
            "sql_idx": 477,
            "predicted_sql": "select cast(sum(case when t1.gender = 'm' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.gender) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a3 = 'south bohemia'",
            "ground_truth_sql": "select cast(sum(t1.gender = 'm') as double) * 100 / count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a3 = 'south bohemia' group by t2.a4 order by t2.a4 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 478,
            "predicted_sql": "select (sum(t2.balance) - sum(t2.balance) * 1.0 / sum(t2.balance)) * 100 from account as t1 inner join trans as t2 on t1.account_id = t2.account_id where t1.date = '1993-07-05' and t2.date = '1993-03-22' and t1.account_id = ( select account_id from account where date = '1993-07-05' order by date asc limit 1 ) and t2.date = '1998-12-27'",
            "ground_truth_sql": "select cast(( sum(case when t3.date = '1998-12-27' then t3.balance else 0 end) - sum(case when t3.date = '1993-03-22' then t3.balance else 0 end) ) as double) * 100 / sum(case when t3.date = '1993-03-22' then t3.balance else 0 end) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join trans as t3 on t3.account_id = t2.account_id where t1.date = '1993-07-05'",
            "res": 0
        },
        {
            "sql_idx": 479,
            "predicted_sql": "select cast(sum(case when t1.status = 'a' then t1.amount else 0 end) as decimal(10, 2)) * 100 / sum(t1.amount) from loan as t1",
            "ground_truth_sql": "select ( cast(sum(case when status = 'a' then amount else 0 end) as double) * 100 ) / sum(amount) from loan",
            "res": 0
        },
        {
            "sql_idx": 480,
            "predicted_sql": "select cast(sum(case when t2.status = 'c' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t2.loan_id) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where t1.amount < 100000",
            "ground_truth_sql": "select cast(sum(status = 'c') as double) * 100 / count(account_id) from loan where amount < 100000",
            "res": 0
        },
        {
            "sql_idx": 481,
            "predicted_sql": "select t1.a3, t1.a12, (t1.a13 - t1.a12) * 100 / t1.a12 as percentage_increase from district as t1 inner join loan as t2 on t1.district_id = t2.account_id where t2.status = 'd'",
            "ground_truth_sql": "select cast(( t3.a13 - t3.a12 ) as double) * 100 / t3.a12 from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.status = 'd'",
            "res": 0
        },
        {
            "sql_idx": 482,
            "predicted_sql": "select t1.a3, count(t2.account_id) as num from district as t1 join account as t2 on t1.district_id = t2.district_id join client as t3 on t2.account_id = t3.client_id where t3.gender = 'f' group by t1.a3 order by num desc limit 9",
            "ground_truth_sql": "select t2.a2, count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' group by t2.district_id, t2.a2 order by count(t1.client_id) desc limit 9",
            "res": 0
        },
        {
            "sql_idx": 483,
            "predicted_sql": "select count(t1.loan_id) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where t2.frequency = 'poplatek mesicne' and t1.amount >= 250000 and t1.date between '1995-01-01' and '1997-12-31' and t1.status = 'approved'",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.date between '1995-01-01' and '1997-12-31' and t1.frequency = 'poplatek mesicne' and t2.amount >= 250000",
            "res": 0
        },
        {
            "sql_idx": 484,
            "predicted_sql": "select count(t1.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status = 'c' and t1.district_id = 1",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and ( t3.status = 'c' or t3.status = 'd' )",
            "res": 0
        },
        {
            "sql_idx": 485,
            "predicted_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a15 = ( select a15 from district order by a15 desc limit 1, 1 ) and t1.gender = 'm'",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = ( select t3.a15 from district as t3 order by t3.a15 desc limit 1 offset 1 )",
            "res": 0
        },
        {
            "sql_idx": 486,
            "predicted_sql": "select t1.a2, count(t2.account_id) as withdrawals from district as t1 join account as t2 on t1.district_id = t2.district_id join trans as t3 on t2.account_id = t3.account_id where t3.type = 'vydaj' and t3.date like '1996-01%' group by t1.a2 order by withdrawals desc limit 10",
            "ground_truth_sql": "select distinct t1.a2 from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join trans as t3 on t2.account_id = t3.account_id where t3.type = 'vydaj' and t3.date like '1996-01%' order by a2 asc limit 10",
            "res": 0
        },
        {
            "sql_idx": 487,
            "predicted_sql": "select count(t2.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status = 'c' and t1.frequency = 'poplatek po obratu'",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and ( t3.status = 'c' or t3.status = 'd' )",
            "res": 0
        },
        {
            "sql_idx": 488,
            "predicted_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a15 = ( select a15 from district order by a15 desc limit 1, 1 ) and t1.gender = 'm'",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = ( select t3.a15 from district as t3 order by t3.a15 desc limit 1 offset 1 )",
            "res": 0
        },
        {
            "sql_idx": 489,
            "predicted_sql": "select t1.account_id from account as t1 inner join trans as t2 on t1.account_id = t2.account_id where t2.type = 'vyber kartou' and t2.amount < ( select avg(amount) from trans where year(t2.date) = 1998 )",
            "ground_truth_sql": "select t1.account_id from trans as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t1.date as datetime), '%y') = '1998' and t1.operation = 'vyber kartou' and t1.amount < ( select avg(amount) from trans where date_format(cast(date as datetime), '%y') = '1998' )",
            "res": 0
        },
        {
            "sql_idx": 490,
            "predicted_sql": "select t2.type from account as t1 inner join client as t2 on t1.account_id = t2.client_id inner join district as t3 on t2.district_id = t3.district_id where t3.a11 between 8000 and 9000 and t1.frequency != 'owner'",
            "ground_truth_sql": "select t3.type from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join disp as t3 on t2.account_id = t3.account_id where t3.type <> 'owner' and t1.a11 between 8000 and 9000",
            "res": 0
        },
        {
            "sql_idx": 491,
            "predicted_sql": "select avg(t1.a15) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a15 > 4000 and year(t2.date) = 1997",
            "ground_truth_sql": "select avg(t1.a15) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where date_format(cast(t2.date as datetime), '%y') >= '1997' and t1.a15 > 4000",
            "res": 0
        },
        {
            "sql_idx": 492,
            "predicted_sql": "select t1.amount from trans as t1 inner join client as t2 on t1.account_id = t2.client_id where t2.client_id = 3356 and t1.operation = 'vyber'",
            "ground_truth_sql": "select t4.trans_id from client as t1 inner join disp as t2 on t1.client_id = t2.client_id inner join account as t3 on t2.account_id = t3.account_id inner join trans as t4 on t3.account_id = t4.account_id where t1.client_id = 3356 and t4.operation = 'vyber'",
            "res": 0
        },
        {
            "sql_idx": 493,
            "predicted_sql": "select cast(sum(case when t1.gender = 'f' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.gender) from client as t1 inner join account as t2 on t1.client_id = t2.account_id inner join district as t3 on t1.district_id = t3.district_id where t3.a11 > 10000",
            "ground_truth_sql": "select cast(sum(t2.gender = 'f') as double) * 100 / count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.a11 > 10000",
            "res": 0
        },
        {
            "sql_idx": 494,
            "predicted_sql": "select (sum(t2.amount) - sum(t2.amount)) / sum(t2.amount) * 100 as growth_rate from client as t1 inner join loan as t2 on t1.client_id = t2.account_id where t1.gender = 'm' and year(t2.date) = 1996",
            "ground_truth_sql": "select cast(( sum( case when date_format(cast(t1.date as datetime), '%y') = '1997' then t1.amount else 0 end ) - sum( case when date_format(cast(t1.date as datetime), '%y') = '1996' then t1.amount else 0 end ) ) as double) * 100 / sum( case when date_format(cast(t1.date as datetime), '%y') = '1996' then t1.amount else 0 end ) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join disp as t3 on t3.account_id = t2.account_id inner join client as t4 on t4.client_id = t3.client_id where t4.gender = 'm' and t3.type = 'owner'",
            "res": 0
        },
        {
            "sql_idx": 495,
            "predicted_sql": "select t2.frequency, t1.k_symbol from trans as t1 inner join account as t2 on t1.account_id = t2.account_id where t1.account = 3 and t1.amount = 3539",
            "ground_truth_sql": "select t1.frequency, t2.k_symbol from account as t1 inner join ( select account_id, k_symbol, sum(amount) as total_amount from order group by account_id, k_symbol ) as t2 on t1.account_id = t2.account_id where t1.account_id = 3 and t2.total_amount = 3539",
            "res": 0
        },
        {
            "sql_idx": 496,
            "predicted_sql": "select cast(sum(case when t1.gender = 'm' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.gender) from client as t1 inner join account as t2 on t1.client_id = t2.client_id where t2.frequency = 'poplatek tydne'",
            "ground_truth_sql": "select cast(sum(t1.gender = 'm') as double) * 100 / count(t1.client_id) from client as t1 inner join district as t3 on t1.district_id = t3.district_id inner join account as t2 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t2.account_id = t4.account_id where t2.frequency = 'poplatek tydne'",
            "res": 0
        },
        {
            "sql_idx": 497,
            "predicted_sql": "select t2.account_id from client as t1 inner join account as t2 on t1.client_id = t2.account_id where t1.gender = 'f' order by t1.birth_date asc, t1.district_id asc limit 1",
            "ground_truth_sql": "select t3.account_id from client as t1 inner join district as t2 on t1.district_id = t2.district_id inner join account as t3 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t4.account_id = t3.account_id where t1.gender = 'f' order by t1.birth_date asc, t2.a11 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 498,
            "predicted_sql": "select avg(t2.amount) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t1.frequency = 'poplatek po obratu' and t2.status = 'c'",
            "ground_truth_sql": "select avg(t2.amount) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status in ('c', 'd') and t1.frequency = 'poplatek po obratu'",
            "res": 0
        },
        {
            "sql_idx": 499,
            "predicted_sql": "select t1.client_id, t1.birth_date from client as t1 inner join card as t2 on t1.client_id = t2.client_id inner join disp as t3 on t2.disp_id = t3.disp_id where t3.type = 'owner' and t2.type = 'gold'",
            "ground_truth_sql": "select t1.client_id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t3.birth_date as datetime), '%y') from disp as t1 inner join card as t2 on t2.disp_id = t1.disp_id inner join client as t3 on t1.client_id = t3.client_id where t2.type = 'gold' and t1.type = 'owner'",
            "res": 0
        }
    ]
}