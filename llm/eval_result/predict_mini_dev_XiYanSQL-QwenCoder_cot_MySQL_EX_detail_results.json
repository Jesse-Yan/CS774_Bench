{
    "debit_card_specializing": [
        {
            "sql_idx": 0,
            "predicted_sql": "SELECT SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS EUR_Count, SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS CZK_Count, SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS Ratio FROM customers;",
            "ground_truth_sql": "SELECT  CAST(SUM(CASE WHEN `Currency` = 'EUR' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `Currency` = 'CZK' THEN 1 ELSE 0 END) FROM `customers`",
            "res": 0
        },
        {
            "sql_idx": 1,
            "predicted_sql": "SELECT t1.CustomerID FROM customers AS t1 INNER JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t2.Date LIKE '2012%' ORDER BY t2.Consumption ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`CustomerID` FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Segment` = 'LAM' AND SUBSTR(`T2`.`Date`, 1, 4) = '2012' GROUP BY   `T1`.`CustomerID` ORDER BY   SUM(`T2`.`Consumption`) ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 2,
            "predicted_sql": "SELECT AVG(Consumption) / 12 AS AverageMonthlyConsumption FROM yearmonth WHERE Date LIKE '2013%' AND Segment = 'SME';",
            "ground_truth_sql": "SELECT   AVG(`T2`.`Consumption`) / 12 FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2013' AND `T1`.`Segment` = 'SME'",
            "res": 0
        },
        {
            "sql_idx": 3,
            "predicted_sql": "SELECT SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS consumption_difference FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212';",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`Currency` = 'CZK' THEN `T2`.`Consumption` ELSE 0 END) - SUM(CASE WHEN `T1`.`Currency` = 'EUR' THEN `T2`.`Consumption` ELSE 0 END) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2012'",
            "res": 1
        },
        {
            "sql_idx": 4,
            "predicted_sql": "SELECT SUBSTRING(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   SUBSTR(`T2`.`Date`, 1, 4) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Currency` = 'CZK' GROUP BY   SUBSTR(`T2`.`Date`, 1, 4) ORDER BY   SUM(`T2`.`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 5,
            "predicted_sql": "SELECT DATE_FORMAT(Date, '%Y-%m') AS PeakMonth, SUM(Consumption) AS PeakMonthConsumption FROM yearmonth WHERE DATE_FORMAT(Date, '%Y') = '2013' GROUP BY DATE_FORMAT(Date, '%Y-%m') ORDER BY PeakMonthConsumption DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   SUBSTR(`T2`.`Date`, 5, 2) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   SUBSTR(`T2`.`Date`, 1, 4) = '2013' AND `T1`.`Segment` = 'SME' GROUP BY   SUBSTR(`T2`.`Date`, 5, 2) ORDER BY   SUM(`T2`.`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 6,
            "predicted_sql": "SELECT ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'SME' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'LAM' ) AS SME_LAM_Difference, ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'LAM' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'KAM' ) AS LAM_KAM_Difference, ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'KAM' ) - ( SELECT AVG(Consumption) FROM yearmonth WHERE `Date` LIKE '2013%' AND Segment = 'SME' ) AS KAM_SME_Difference;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),   CAST(SUM(CASE WHEN `T1`.`Segment` = 'LAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`),   CAST(SUM(CASE WHEN `T1`.`Segment` = 'KAM' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) - CAST(SUM(CASE WHEN `T1`.`Segment` = 'SME' THEN `T2`.`Consumption` ELSE 0 END) AS DOUBLE) / COUNT(`T1`.`CustomerID`) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Currency` = 'CZK'   AND `T2`.`Consumption` = (     SELECT       MIN(`Consumption`)     FROM `yearmonth`   )   AND `T2`.`Date` BETWEEN 201301 AND 201312",
            "res": 0
        },
        {
            "sql_idx": 7,
            "predicted_sql": "SELECT Segment, MAX(PercentageIncrease) AS HighestPercentageIncrease, MIN(PercentageIncrease) AS LowestPercentageIncrease FROM ( SELECT t1.Segment, ( (SUM(t2.Consumption) - SUM(t3.Consumption)) / SUM(t2.Consumption) ) * 100 AS PercentageIncrease FROM customers t1 INNER JOIN yearmonth t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Currency = 'EUR' AND t1.Segment IN ('SME', 'LAM', 'KAM') AND t2.Date LIKE '2013%' GROUP BY t1.Segment ) AS Subquery GROUP BY Segment;",
            "ground_truth_sql": "SELECT   CAST((     SUM(       CASE         WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2013%'         THEN `T2`.`Consumption`         ELSE 0       END     ) - SUM(       CASE         WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'         THEN `T2`.`Consumption`         ELSE 0       END     )   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'SME' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ),   CAST(SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2013%'       THEN `T2`.`Consumption`       ELSE 0     END   ) - SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'LAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ),   CAST(SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2013%'       THEN `T2`.`Consumption`       ELSE 0     END   ) - SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN `T1`.`Segment` = 'KAM' AND `T2`.`Date` LIKE '2012%'       THEN `T2`.`Consumption`       ELSE 0     END   ) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID`",
            "res": 0
        },
        {
            "sql_idx": 8,
            "predicted_sql": "SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';",
            "ground_truth_sql": "SELECT   SUM(`Consumption`) FROM `yearmonth` WHERE   `CustomerID` = 6 AND `Date` BETWEEN '201308' AND '201311'",
            "res": 1
        },
        {
            "sql_idx": 9,
            "predicted_sql": "SELECT ( SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'discount' ) - ( SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'discount' ) AS difference;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `Country` = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN `Country` = 'SVK' THEN 1 ELSE 0 END) FROM `gasstations` WHERE   `Segment` = 'Discount'",
            "res": 1
        },
        {
            "sql_idx": 10,
            "predicted_sql": "SELECT ( SELECT COUNT(*) FROM customers WHERE Segment = 'SME' AND Currency = 'CZK' ) - ( SELECT COUNT(*) FROM customers WHERE Segment = 'SME' AND Currency = 'EUR' ) AS difference;",
            "ground_truth_sql": "SELECT   SUM(`Currency` = 'CZK') - SUM(`Currency` = 'EUR') FROM `customers` WHERE   `Segment` = 'SME'",
            "res": 1
        },
        {
            "sql_idx": 11,
            "predicted_sql": "SELECT (COUNT(CASE WHEN Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'LAM' );",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Consumption` > 46.73 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`CustomerID`) FROM `customers` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Segment` = 'LAM'",
            "res": 0
        },
        {
            "sql_idx": 12,
            "predicted_sql": "SELECT (COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM yearmonth WHERE Date LIKE '201202%';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Consumption` > 528.3 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`CustomerID`) FROM `yearmonth` WHERE   `Date` = '201202'",
            "res": 0
        },
        {
            "sql_idx": 13,
            "predicted_sql": "SELECT MAX(Consumption) AS HighestMonthlyConsumption FROM yearmonth WHERE Date LIKE '2012-%';",
            "ground_truth_sql": "SELECT   SUM(`Consumption`) FROM `yearmonth` WHERE   SUBSTR(`Date`, 1, 4) = '2012' GROUP BY   SUBSTR(`Date`, 5, 2) ORDER BY   SUM(`Consumption`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 14,
            "predicted_sql": "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN yearmonth ym ON t.TransactionID = ym.CustomerID WHERE ym.Date LIKE '201309%'",
            "ground_truth_sql": "SELECT   `T3`.`Description` FROM `transactions_1k` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` INNER JOIN `products` AS `T3`   ON `T1`.`ProductID` = `T3`.`ProductID` WHERE   `T2`.`Date` = '201309'",
            "res": 0
        },
        {
            "sql_idx": 15,
            "predicted_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '201306'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`Country` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `yearmonth` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T3`.`Date` = '201306'",
            "res": 0
        },
        {
            "sql_idx": 16,
            "predicted_sql": "SELECT COUNT(DISTINCT t.CustomerID) AS NumberOfCustomers FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Amount > 1000;",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `yearmonth` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T2`.`Currency` = 'EUR' AND `T1`.`Consumption` > 1000.00",
            "res": 0
        },
        {
            "sql_idx": 17,
            "predicted_sql": "SELECT DISTINCT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`Description` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `products` AS `T3`   ON `T1`.`ProductID` = `T3`.`ProductID` WHERE   `T2`.`Country` = 'CZE'",
            "res": 1
        },
        {
            "sql_idx": 18,
            "predicted_sql": "SELECT DISTINCT Time FROM transactions_1k WHERE GasStationID IN ( SELECT GasStationID FROM gasstations WHERE ChainID = 11 )",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`Time` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T2`.`ChainID` = 11",
            "res": 1
        },
        {
            "sql_idx": 19,
            "predicted_sql": "SELECT COUNT(*) AS transactions_after_2012_1_1 FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`TransactionID`) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T2`.`Country` = 'CZE'   AND DATE_FORMAT(CAST(`T1`.`Date` AS DATETIME), '%Y') >= '2012'",
            "res": 1
        },
        {
            "sql_idx": 20,
            "predicted_sql": "SELECT t.Currency FROM customers t JOIN transactions_1k tt ON t.CustomerID = tt.CustomerID WHERE tt.Date = '2012-08-24' AND tt.Time = '16:25:00';",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`Currency` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `customers` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T1`.`Date` = '2012-08-24' AND `T1`.`Time` = '16:25:00'",
            "res": 1
        },
        {
            "sql_idx": 21,
            "predicted_sql": "SELECT t.Segment FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';",
            "ground_truth_sql": "SELECT   `T2`.`Segment` FROM `transactions_1k` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`date` = '2012-08-23' AND `T1`.`time` = '21:20:00'",
            "res": 0
        },
        {
            "sql_idx": 22,
            "predicted_sql": "SELECT COUNT(T1.TransactionID) AS cnt FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T2.GasStationID = T1.GasStationID WHERE T1.`Date` = '2012-08-26' AND T1.`Time` BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`TransactionID`) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T1`.`Date` = '2012-08-26'   AND `T1`.`Time` BETWEEN '08:00:00' AND '09:00:00'   AND `T2`.`Country` = 'CZE'",
            "res": 1
        },
        {
            "sql_idx": 23,
            "predicted_sql": "SELECT c.Segment FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE t.Date = '2012-08-24' AND t.Amount = 548.4;",
            "ground_truth_sql": "SELECT   `T2`.`Country` FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` WHERE   `T1`.`Date` = '2012-08-24' AND  `T1`.`Price` = 548.4",
            "res": 0
        },
        {
            "sql_idx": 24,
            "predicted_sql": "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM customers WHERE Date = '2012-08-25';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Currency` = 'EUR' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`CustomerID`) FROM `transactions_1k` AS `T1` INNER JOIN `customers` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Date` = '2012-08-25'",
            "res": 0
        },
        {
            "sql_idx": 25,
            "predicted_sql": "SELECT (SUM(CASE WHEN YEAR(Date) = 2012 THEN Consumption ELSE 0 END) - SUM(CASE WHEN YEAR(Date) = 2013 THEN Consumption ELSE 0 END)) / SUM(CASE WHEN YEAR(Date) = 2012 THEN Consumption ELSE 0 END) AS consumption_decrease_rate FROM yearmonth WHERE Date = '2012-08-25';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END) - SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2013' THEN `Consumption` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN SUBSTR(`Date`, 1, 4) = '2012' THEN `Consumption` ELSE 0 END) FROM `yearmonth` WHERE   `CustomerID` = (     SELECT       `T1`.`CustomerID`     FROM `transactions_1k` AS `T1`     INNER JOIN `gasstations` AS `T2`       ON `T1`.`GasStationID` = `T2`.`GasStationID`     WHERE       `T1`.`Date` = '2012-08-25' AND `T1`.`Price`  = 1513.12   )",
            "res": 1
        },
        {
            "sql_idx": 26,
            "predicted_sql": "SELECT (COUNT(CASE WHEN Segment = 'premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Country` = 'SVK' AND `Segment` = 'Premium' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN `Country` = 'SVK' THEN 1 ELSE 0 END) FROM `gasstations`",
            "res": 0
        },
        {
            "sql_idx": 27,
            "predicted_sql": "SELECT SUM(t.Amount) AS TotalAmountSpent, SUM(CASE WHEN t.Date = '201201' THEN t.Amount ELSE 0 END) AS January2012Amount FROM transactions_1k t WHERE t.CustomerID = 38508;",
            "ground_truth_sql": "SELECT   SUM(`T1`.`Price` ),   SUM(CASE WHEN `T3`.`Date` = '201201' THEN `T1`.`Price` ELSE 0 END) FROM `transactions_1k` AS `T1` INNER JOIN `gasstations` AS `T2`   ON `T1`.`GasStationID` = `T2`.`GasStationID` INNER JOIN `yearmonth` AS `T3`   ON `T1`.`CustomerID` = `T3`.`CustomerID` WHERE   `T1`.`CustomerID` = '38508'",
            "res": 0
        },
        {
            "sql_idx": 28,
            "predicted_sql": "SELECT c.CustomerID, AVG(t.Price) AS AveragePricePerItem, c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Currency ORDER BY SUM(t.Amount) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`CustomerID`,   SUM(`T2`.`Price` / `T2`.`Amount`),   `T1`.`Currency` FROM `customers` AS `T1` INNER JOIN `transactions_1k` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T2`.`CustomerID` = (     SELECT       `CustomerID`     FROM `yearmonth`     ORDER BY       `Consumption` DESC     LIMIT 1   ) GROUP BY   `T2`.`CustomerID`,   `T1`.`Currency`",
            "res": 0
        },
        {
            "sql_idx": 29,
            "predicted_sql": "SELECT t1.CustomerID, t2.Consumption FROM transactions_1k t1 INNER JOIN yearmonth t2 ON t1.CustomerID = t2.CustomerID WHERE t1.ProductID = 5 AND t1.Price / t1.Amount > 29.00 AND t2.Date = '201208'",
            "ground_truth_sql": "SELECT   `T2`.`Consumption` FROM `transactions_1k` AS `T1` INNER JOIN `yearmonth` AS `T2`   ON `T1`.`CustomerID` = `T2`.`CustomerID` WHERE   `T1`.`Price` / `T1`.`Amount` > 29.00   AND `T1`.`ProductID` = 5   AND `T2`.`Date` = '201208'",
            "res": 0
        }
    ],
    "student_club": [
        {
            "sql_idx": 30,
            "predicted_sql": "SELECT m.link_to_major FROM member m WHERE m.first_name = 'Angela' AND m.last_name = 'Sanders';",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`first_name` = 'Angela' AND `T1`.`last_name` = 'Sanders'",
            "res": 0
        },
        {
            "sql_idx": 31,
            "predicted_sql": "SELECT COUNT(DISTINCT m.member_id) AS medium_size_students FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.t_shirt_size = 'Medium';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`event_id`) FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `member` AS `T3`   ON `T2`.`link_to_member` = `T3`.`member_id` WHERE   `T1`.`event_name` = 'Women''s Soccer' AND `T3`.`t_shirt_size` = 'Medium'",
            "res": 1
        },
        {
            "sql_idx": 32,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.event_id) AS meetings FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T1.event_id) > 10;",
            "ground_truth_sql": "SELECT   `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` GROUP BY   `T1`.`event_id` HAVING   COUNT(`T2`.`link_to_event`) > 10 EXCEPT SELECT   `T1`.`event_name` FROM `event` AS `T1` WHERE   `T1`.`type` = 'Meeting'",
            "res": 0
        },
        {
            "sql_idx": 33,
            "predicted_sql": "SELECT e.event_name FROM event e JOIN ( SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20 ) a ON e.event_id = a.link_to_event WHERE e.type != 'fundraiser';",
            "ground_truth_sql": "SELECT `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2` ON `T1`.`event_id` = `T2`.`link_to_event` GROUP BY `T1`.`event_id` HAVING COUNT(`T2`.`link_to_event`) > 20 AND NOT EXISTS (SELECT 1 FROM `event` AS `E` WHERE `E`.`event_id` = `T1`.`event_id` AND `E`.`type` = 'Fundraiser')",
            "res": 1
        },
        {
            "sql_idx": 34,
            "predicted_sql": "SELECT SUM(i.amount) AS total_funds_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.position = 'Vice President';",
            "ground_truth_sql": "SELECT   `T2`.`amount` FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`position` = 'Vice President'",
            "res": 1
        },
        {
            "sql_idx": 35,
            "predicted_sql": "SELECT m.first_name, m.last_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois';",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `zip_code` AS `T2`   ON `T1`.`zip` = `T2`.`zip_code` WHERE   `T2`.`state` = 'Illinois'",
            "res": 1
        },
        {
            "sql_idx": 36,
            "predicted_sql": "SELECT e.expense_id, e.approved FROM expense e JOIN event ev ON e.link_to_budget = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08';",
            "ground_truth_sql": "SELECT   `T3`.`approved` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE   `T1`.`event_name` = 'October Meeting' AND `T1`.`event_date` LIKE '2019-10-08%'",
            "res": 0
        },
        {
            "sql_idx": 37,
            "predicted_sql": "SELECT AVG(e.cost) AS total_average_cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Elijah' AND m.last_name = 'Allen' AND MONTH(STR_TO_DATE(e.expense_date, '%Y-%m-%d')) IN (9, 10);",
            "ground_truth_sql": "SELECT   AVG(`T2`.`cost`) FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`last_name` = 'Allen'   AND `T1`.`first_name` = 'Elijah'   AND (     SUBSTR(`T2`.`expense_date`, 6, 2) = '09'     OR SUBSTR(`T2`.`expense_date`, 6, 2) = '10'   )",
            "res": 1
        },
        {
            "sql_idx": 38,
            "predicted_sql": "SELECT (SUM(CASE WHEN YEAR(event_date) = 2019 THEN spent ELSE 0 END) - SUM(CASE WHEN YEAR(event_date) = 2020 THEN spent ELSE 0 END)) AS difference FROM budget WHERE event_status = 'Student_Club';",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN SUBSTR(`T1`.`event_date`, 1, 4) = '2019' THEN `T2`.`spent` ELSE 0 END) - SUM(CASE WHEN SUBSTR(`T1`.`event_date`, 1, 4) = '2020' THEN `T2`.`spent` ELSE 0 END) AS `num` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event`",
            "res": 0
        },
        {
            "sql_idx": 39,
            "predicted_sql": "SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising';",
            "ground_truth_sql": "SELECT   `notes` FROM `income` WHERE   `source` = 'Fundraising' AND `date_received` = '2019-09-14'",
            "res": 1
        },
        {
            "sql_idx": 40,
            "predicted_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
            "ground_truth_sql": "SELECT   `phone` FROM `member` WHERE   `first_name` = 'Carlo' AND `last_name` = 'Jacobs'",
            "res": 1
        },
        {
            "sql_idx": 41,
            "predicted_sql": "SELECT e.status FROM event e JOIN expense exp ON e.event_id = exp.link_to_event WHERE exp.expense_description = 'Post Cards, Posters' AND exp.expense_date = '2019-08-20';",
            "ground_truth_sql": "SELECT   `T1`.`event_status` FROM `budget` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`budget_id` = `T2`.`link_to_budget` WHERE   `T2`.`expense_description` = 'Post Cards, Posters'   AND `T2`.`expense_date` = '2019-08-20'",
            "res": 0
        },
        {
            "sql_idx": 42,
            "predicted_sql": "SELECT m.major_name FROM major m JOIN member mem ON m.major_id = mem.link_to_major WHERE mem.first_name = 'Brent' AND mem.last_name = 'Thomason';",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`first_name` = 'Brent' AND `T1`.`last_name` = 'Thomason'",
            "res": 1
        },
        {
            "sql_idx": 43,
            "predicted_sql": "SELECT COUNT(*) AS medium_size_t_shirt_business_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`member_id`) FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T2`.`major_name` = 'Business' AND `T1`.`t_shirt_size` = 'Medium'",
            "res": 1
        },
        {
            "sql_idx": 44,
            "predicted_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
            "ground_truth_sql": "SELECT   `T2`.`department` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`position` = 'President'",
            "res": 1
        },
        {
            "sql_idx": 45,
            "predicted_sql": "SELECT date_received FROM income WHERE link_to_member IN ( SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton' ) AND source = 'Dues';",
            "ground_truth_sql": "SELECT   `T2`.`date_received` FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`first_name` = 'Connor'   AND `T1`.`last_name` = 'Hilton'   AND `T2`.`source` = 'Dues'",
            "res": 1
        },
        {
            "sql_idx": 46,
            "predicted_sql": "SELECT SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) AS yearly_kickoff_budget, SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS october_meeting_budget, SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS yearly_kickoff_to_october_meeting_ratio FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`event_name` = 'Yearly Kickoff' THEN `T1`.`amount` ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`event_name` = 'October Meeting' THEN `T1`.`amount` ELSE 0 END) FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T1`.`category` = 'Advertisement' AND `T2`.`type` = 'Meeting'",
            "res": 0
        },
        {
            "sql_idx": 47,
            "predicted_sql": "SELECT SUM(cost) AS total_cost_of_pizzas FROM expense WHERE expense_description = 'Pizza';",
            "ground_truth_sql": "SELECT   SUM(`cost`) FROM `expense` WHERE   `expense_description` = 'Pizza'",
            "res": 1
        },
        {
            "sql_idx": 48,
            "predicted_sql": "SELECT COUNT(DISTINCT city) AS number_of_cities FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';",
            "ground_truth_sql": "SELECT   COUNT(`city`) FROM `zip_code` WHERE   `county` = 'Orange County' AND `state` = 'Virginia'",
            "res": 1
        },
        {
            "sql_idx": 49,
            "predicted_sql": "SELECT m.link_to_major FROM member m WHERE m.phone = '809-555-3360';",
            "ground_truth_sql": "SELECT   `T2`.`major_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T1`.`phone` = '809-555-3360'",
            "res": 0
        },
        {
            "sql_idx": 50,
            "predicted_sql": "SELECT COUNT(DISTINCT am.link_to_member) AS total_members_attended FROM attendance am JOIN event e ON am.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`link_to_member`) FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`event_name` = 'Women''s Soccer'",
            "res": 1
        },
        {
            "sql_idx": 51,
            "predicted_sql": "SELECT m.first_name, m.last_name FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'School of Applied Sciences, Technology and Education';",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `major` AS `T2`   ON `T1`.`link_to_major` = `T2`.`major_id` WHERE   `T2`.`department` = 'School of Applied Sciences, Technology and Education'",
            "res": 1
        },
        {
            "sql_idx": 52,
            "predicted_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' ORDER BY (b.spent / b.amount) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T2`.`status` = 'Closed' ORDER BY   `T1`.`spent` / `T1`.`amount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 53,
            "predicted_sql": "SELECT MAX(spent) AS highest_budget_spend FROM budget;",
            "ground_truth_sql": "SELECT   MAX(`spent`) FROM `budget`",
            "res": 1
        },
        {
            "sql_idx": 54,
            "predicted_sql": "SELECT SUM(remaining) AS total_amount_spent_for_food FROM budget WHERE category = 'Food';",
            "ground_truth_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
            "res": 0
        },
        {
            "sql_idx": 55,
            "predicted_sql": "SELECT m.first_name, m.last_name FROM member m JOIN ( SELECT link_to_member FROM attendance GROUP BY link_to_member HAVING COUNT(link_to_event) > 7 ) a ON m.member_id = a.link_to_member;",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name` FROM `member` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` GROUP BY   `T2`.`link_to_member` HAVING   COUNT(`T2`.`link_to_event`) > 7",
            "res": 1
        },
        {
            "sql_idx": 56,
            "predicted_sql": "SELECT m.first_name, m.last_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff' AND m.position = 'Budget Manager';",
            "ground_truth_sql": "SELECT   `T4`.`first_name`,   `T4`.`last_name` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` INNER JOIN `member` AS `T4`   ON `T3`.`link_to_member` = `T4`.`member_id` WHERE   `T1`.`event_name` = 'Yearly Kickoff'",
            "res": 0
        },
        {
            "sql_idx": 57,
            "predicted_sql": "SELECT e.event_name FROM event e JOIN expense exp ON e.event_id = exp.link_to_event ORDER BY exp.cost ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`event_name` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` ORDER BY   `T3`.`cost` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 58,
            "predicted_sql": "SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS yearly_kickoff_percentage FROM expense e;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`event_name` = 'Yearly Kickoff' THEN `T3`.`cost` ELSE 0 END) AS DOUBLE) * 100 / SUM(`T3`.`cost`) FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget`",
            "res": 0
        },
        {
            "sql_idx": 59,
            "predicted_sql": "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `source` FROM `income` WHERE   `date_received` BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY   `source` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 60,
            "predicted_sql": "SELECT COUNT(*) AS number_of_members FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`member_id`) FROM `major` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`major_id` = `T2`.`link_to_major` WHERE   `T1`.`major_name` = 'Physics Teaching'",
            "res": 1
        },
        {
            "sql_idx": 61,
            "predicted_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T1`.`link_to_event` = `T2`.`event_id` WHERE   `T1`.`category` = 'Advertisement' ORDER BY   `T1`.`spent` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 62,
            "predicted_sql": "SELECT a.link_to_member FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';",
            "ground_truth_sql": "SELECT   CASE WHEN `T3`.`event_name` = 'Women''s Soccer' THEN 'YES' END AS `result` FROM `member` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` INNER JOIN `event` AS `T3`   ON `T2`.`link_to_event` = `T3`.`event_id` WHERE   `T1`.`first_name` = 'Maya' AND `T1`.`last_name` = 'Mclean'",
            "res": 0
        },
        {
            "sql_idx": 63,
            "predicted_sql": "SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Posters' AND event_name = 'September Speaker';",
            "ground_truth_sql": "SELECT   `T3`.`cost` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3`   ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE   `T1`.`event_name` = 'September Speaker'   AND `T3`.`expense_description` = 'Posters'",
            "res": 0
        },
        {
            "sql_idx": 64,
            "predicted_sql": "SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`event_name` FROM `budget` AS `T1` INNER JOIN `event` AS `T2`   ON `T2`.`event_id` = `T1`.`link_to_event` WHERE   `T1`.`event_status` = 'Closed' AND `T1`.`remaining` < 0 ORDER BY   `T1`.`remaining` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 65,
            "predicted_sql": "SELECT e.type, SUM(e.cost) AS total_value FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes' GROUP BY e.type;",
            "ground_truth_sql": "SELECT `T1`.`type`, SUM(`T3`.`cost`) AS `total_cost` FROM `event` AS `T1` INNER JOIN `budget` AS `T2` ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `expense` AS `T3` ON `T2`.`budget_id` = `T3`.`link_to_budget` WHERE `T1`.`event_name` = 'October Meeting' GROUP BY `T1`.`type`",
            "res": 0
        },
        {
            "sql_idx": 66,
            "predicted_sql": "SELECT b.category, SUM(b.amount) AS total_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY b.category ORDER BY total_amount ASC;",
            "ground_truth_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
            "res": 1
        },
        {
            "sql_idx": 67,
            "predicted_sql": "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';",
            "ground_truth_sql": "SELECT   SUM(`cost`) FROM `expense` WHERE   `expense_date` = '2019-08-20'",
            "res": 1
        },
        {
            "sql_idx": 68,
            "predicted_sql": "SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name;",
            "ground_truth_sql": "SELECT   `T1`.`first_name`,   `T1`.`last_name`,   SUM(`T2`.`cost`) FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`member_id` = 'rec4BLdZHS2Blfp4v'",
            "res": 1
        },
        {
            "sql_idx": 69,
            "predicted_sql": "SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
            "ground_truth_sql": "SELECT   `T2`.`expense_description` FROM `member` AS `T1` INNER JOIN `expense` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`first_name` = 'Sacha' AND `T1`.`last_name` = 'Harrison'",
            "res": 1
        },
        {
            "sql_idx": 70,
            "predicted_sql": "SELECT DISTINCT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`category` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`location` = 'MU 215'",
            "res": 1
        },
        {
            "sql_idx": 71,
            "predicted_sql": "SELECT m.last_name, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major, d.department, d.college FROM member m JOIN major d ON m.link_to_major = d.major_id WHERE d.major_name = 'Environmental Engineering';",
            "ground_truth_sql": "SELECT   `T2`.`last_name`,   `T1`.`department`,   `T1`.`college` FROM `major` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`major_id` = `T2`.`link_to_major` WHERE   `T2`.`position` = 'Member' AND `T1`.`major_name` = 'Environmental Engineering'",
            "res": 0
        },
        {
            "sql_idx": 72,
            "predicted_sql": "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`category`,   `T1`.`type` FROM `event` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` WHERE   `T1`.`location` = 'MU 215' AND `T2`.`spent` = 0 AND `T1`.`type` = 'Guest Speaker'",
            "res": 0
        },
        {
            "sql_idx": 73,
            "predicted_sql": "SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(i.link_to_member)) AS percentage FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`amount` = 50 THEN 1.0 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T2`.`income_id`) FROM `member` AS `T1` INNER JOIN `income` AS `T2`   ON `T1`.`member_id` = `T2`.`link_to_member` WHERE   `T1`.`position` = 'Member' AND `T1`.`t_shirt_size` = 'Medium'",
            "res": 1
        },
        {
            "sql_idx": 74,
            "predicted_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';",
            "ground_truth_sql": "SELECT DISTINCT   `event_name` FROM `event` WHERE   `type` = 'Game'   AND DATE(SUBSTR(`event_date`, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20'   AND `status` = 'Closed'",
            "res": 1
        },
        {
            "sql_idx": 75,
            "predicted_sql": "SELECT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > ( SELECT AVG(cost) FROM expense );",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`first_name`,   `T3`.`last_name`,   `T3`.`phone` FROM `expense` AS `T1` INNER JOIN `budget` AS `T2`   ON `T1`.`link_to_budget` = `T2`.`budget_id` INNER JOIN `member` AS `T3`   ON `T3`.`member_id` = `T1`.`link_to_member` WHERE   `T1`.`cost` > (     SELECT       AVG(`T1`.`cost`)     FROM `expense` AS `T1`     INNER JOIN `budget` AS `T2`       ON `T1`.`link_to_budget` = `T2`.`budget_id`     INNER JOIN `member` AS `T3`       ON `T3`.`member_id` = `T1`.`link_to_member`   )",
            "res": 1
        },
        {
            "sql_idx": 76,
            "predicted_sql": "SELECT m.first_name, m.last_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';",
            "ground_truth_sql": "SELECT   `T2`.`first_name`,   `T2`.`last_name`,   `T1`.`cost` FROM `expense` AS `T1` INNER JOIN `member` AS `T2`   ON `T1`.`link_to_member` = `T2`.`member_id` WHERE   `T1`.`expense_description` = 'Water, Veggie tray, supplies'",
            "res": 1
        },
        {
            "sql_idx": 77,
            "predicted_sql": "SELECT m.first_name, m.last_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '9/9/2019';",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`first_name`,   `T3`.`last_name`,   `T4`.`amount` FROM `event` AS `T1` INNER JOIN `attendance` AS `T2`   ON `T1`.`event_id` = `T2`.`link_to_event` INNER JOIN `member` AS `T3`   ON `T3`.`member_id` = `T2`.`link_to_member` INNER JOIN `income` AS `T4`   ON `T4`.`link_to_member` = `T3`.`member_id` WHERE   `T4`.`date_received` = '2019-09-09'",
            "res": 0
        }
    ],
    "thrombosis_prediction": [
        {
            "sql_idx": 78,
            "predicted_sql": "SELECT Admission, COUNT(ID) AS NumberOfMalePatients, (COUNT(ID) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M')) AS Percentage FROM Patient WHERE SEX = 'M' GROUP BY Admission;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) FROM `Patient` WHERE   `SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 79,
            "predicted_sql": "SELECT (COUNT(CASE WHEN YEAR(Birthday) > 1930 AND SEX = 'F' THEN 1 END) * 100.0 / COUNT(CASE WHEN SEX = 'F' THEN 1 END)) AS percentage FROM Patient;",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE WHEN DATE_FORMAT(CAST(`Birthday` AS DATETIME), '%Y') > '1930' THEN 1 ELSE 0 END   ) AS DOUBLE) * 100 / COUNT(*) FROM `Patient` WHERE   `SEX` = 'F'",
            "res": 0
        },
        {
            "sql_idx": 80,
            "predicted_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS OutpatientCount, SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS InpatientCount, SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS Ratio FROM Patient WHERE Diagnosis = 'SLE';",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) / SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) FROM `Patient` WHERE   `Diagnosis` = 'SLE'",
            "res": 0
        },
        {
            "sql_idx": 81,
            "predicted_sql": "SELECT Diagnosis, `Date` FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = '30609';",
            "ground_truth_sql": "SELECT   `T1`.`Diagnosis`,   `T2`.`Date` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` = 30609",
            "res": 1
        },
        {
            "sql_idx": 82,
            "predicted_sql": "SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH > 500;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`LDH` > 500",
            "res": 1
        },
        {
            "sql_idx": 83,
            "predicted_sql": "SELECT ID, TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) AS age FROM Patient WHERE ID IN ( SELECT ID FROM Examination WHERE RVVT = '+' );",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RVVT` = '+'",
            "res": 0
        },
        {
            "sql_idx": 84,
            "predicted_sql": "SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = 2;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`Thrombosis` = 2",
            "res": 1
        },
        {
            "sql_idx": 85,
            "predicted_sql": "SELECT COUNT(DISTINCT ID) AS NumberOfFemalePatients FROM Patient WHERE YEAR(Description) = 1997 AND SEX = 'F' AND Admission = '-';",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Patient` WHERE   DATE_FORMAT(CAST(`Description` AS DATETIME), '%Y') = '1997'   AND `SEX` = 'F'   AND `Admission` = '-'",
            "res": 1
        },
        {
            "sql_idx": 86,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND YEAR(T2.`Examination Date`) = 1997;",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`SEX` = 'F'   AND DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') = '1997'   AND `T2`.`Thrombosis` = 1",
            "res": 1
        },
        {
            "sql_idx": 87,
            "predicted_sql": "SELECT Symptoms, Diagnosis FROM Examination WHERE Symptoms IS NOT NULL ORDER BY `Examination Date` DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`Symptoms`,   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   NOT `T2`.`Symptoms` IS NULL ORDER BY   `T1`.`Birthday` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 88,
            "predicted_sql": "SELECT T1.`Date`, YEAR(T1.`First Date`) - YEAR(T1.Birthday) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' ORDER BY T1.`Date` DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`Date`,   DATE_FORMAT(CAST(`T2`.`First Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T2`.`Birthday` AS DATETIME), '%Y'),   `T2`.`Birthday` FROM `Laboratory` AS `T1` INNER JOIN `Patient` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`Diagnosis` = 'SJS' AND NOT `T2`.`Birthday` IS NULL ORDER BY   `T2`.`Birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 89,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS female_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 8.0 AND T1.SEX = 'M' UNION ALL SELECT SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS female_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA <= 6.5 AND T1.SEX = 'F'",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`UA` <= 8.0 AND `T1`.`SEX` = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `T2`.`UA` <= 6.5 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID`",
            "res": 0
        },
        {
            "sql_idx": 90,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS underage_patients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE YEAR(T2.`Examination Date`) BETWEEN 1990 AND 1993 AND YEAR(T1.Birthday) < 1990",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Examination` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') BETWEEN '1990' AND '1993'   AND DATE_FORMAT(CAST(`T2`.`Examination Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < '18'",
            "res": 0
        },
        {
            "sql_idx": 91,
            "predicted_sql": "SELECT TIMESTAMPDIFF(YEAR, T1.Birthday, T2.`Examination Date`) AS Age, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y'),   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` ORDER BY   `T2`.`HGB` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 92,
            "predicted_sql": "SELECT aCL_IgM FROM Examination WHERE `Examination Date` = '1993-11-12' AND ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' );",
            "ground_truth_sql": "SELECT   `aCL IgA`,   `aCL IgG`,   `aCL IgM` FROM `Examination` WHERE   `ID` IN (     SELECT       `ID`     FROM `Patient`     WHERE       `Diagnosis` = 'SLE' AND `Description` = '1994-02-19'   )   AND `Examination Date` = '1993-11-12'",
            "res": 0
        },
        {
            "sql_idx": 93,
            "predicted_sql": "SELECT (SUM(CASE WHEN DATE LIKE '1981-11-%' THEN T-CHO ELSE 0 END) - SUM(CASE WHEN DATE LIKE '1981-12-%' THEN T-CHO ELSE 0 END)) / SUM(CASE WHEN DATE LIKE '1981-12-%' THEN T-CHO ELSE 0 END) AS decrease_rate FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient WHERE Birthday = '1959-02-18' );",
            "ground_truth_sql": "SELECT   CAST((     SUM(CASE WHEN `T2`.`Date` LIKE '1981-11-%' THEN `T2`.`T-CHO` ELSE 0 END) - SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END)   ) AS DOUBLE) / SUM(CASE WHEN `T2`.`Date` LIKE '1981-12-%' THEN `T2`.`T-CHO` ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Birthday` = '1959-02-18'",
            "res": 0
        },
        {
            "sql_idx": 94,
            "predicted_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4",
            "ground_truth_sql": "SELECT DISTINCT   `ID` FROM `Laboratory` WHERE   `Date` BETWEEN '1987-07-06' AND '1996-01-31' AND `GPT` > 30 AND `ALB` < 4",
            "res": 1
        },
        {
            "sql_idx": 95,
            "predicted_sql": "SELECT COUNT(*) AS NumberOfPatients FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis = 2 AND e.ANA = 'S' AND l.aCL_IgM > ( SELECT AVG(aCL_IgM) FROM Laboratory ) * 1.2;",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `Examination` WHERE   `Thrombosis` = 2   AND `ANA Pattern` = 'S'   AND `aCL IgM` > (     SELECT       AVG(`aCL IgM`) * 1.2     FROM `Examination`     WHERE       `Thrombosis` = 2 AND `ANA Pattern` = 'S'   )",
            "res": 0
        },
        {
            "sql_idx": 96,
            "predicted_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`Date` LIKE '1991-10%' AND T2.T-BIL < 2.0;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Admission` = '-' AND `T2`.`T-BIL` < 2.0 AND `T2`.`Date` LIKE '1991-10-%'",
            "res": 0
        },
        {
            "sql_idx": 97,
            "predicted_sql": "SELECT AVG(T2.ALB) AS average_blood_albumin_level FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE'",
            "ground_truth_sql": "SELECT   AVG(`T2`.`ALB`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`PLT` > 400 AND `T1`.`Diagnosis` = 'SLE' AND `T1`.`SEX` = 'F'",
            "res": 1
        },
        {
            "sql_idx": 98,
            "predicted_sql": "SELECT COUNT(*) AS female_aps_diagnosed FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';",
            "ground_truth_sql": "SELECT   COUNT(`ID`) FROM `Patient` WHERE   `SEX` = 'F' AND `Diagnosis` = 'APS'",
            "res": 1
        },
        {
            "sql_idx": 99,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.SEX = 'F' THEN 1 END) * 100.0 / COUNT(T1.SEX)) AS percentage FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) = 1980 AND T2.Diagnosis = 'RA';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `SEX` = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`ID`) FROM `Patient` WHERE   `Diagnosis` = 'RA' AND DATE_FORMAT(CAST(`Birthday` AS DATETIME), '%Y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 100,
            "predicted_sql": "SELECT CASE WHEN (SELECT UA FROM Laboratory WHERE ID = 57266) > 8 AND SEX = 'M' THEN 'Within Normal Range' WHEN (SELECT UA FROM Laboratory WHERE ID = 57266) > 6.5 AND SEX = 'F' THEN 'Within Normal Range' ELSE 'Not Within Normal Range' END AS NormalRangeStatus;",
            "ground_truth_sql": "SELECT   CASE     WHEN (       `T1`.`SEX` = 'F' AND `T2`.`UA` > 6.5     )     OR (       `T1`.`SEX` = 'M' AND `T2`.`UA` > 8.0     )     THEN TRUE     ELSE FALSE   END FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` = 57266",
            "res": 0
        },
        {
            "sql_idx": 101,
            "predicted_sql": "SELECT DISTINCT p.ID FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M' AND e.GPT >= 60;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`SEX` = 'M' AND `T2`.`GPT` >= 60",
            "res": 0
        },
        {
            "sql_idx": 102,
            "predicted_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC;",
            "ground_truth_sql": "SELECT `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GPT` > 60 ORDER BY   `T1`.`Birthday` ASC",
            "res": 0
        },
        {
            "sql_idx": 103,
            "predicted_sql": "SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`UN` = 29",
            "res": 1
        },
        {
            "sql_idx": 104,
            "predicted_sql": "SELECT p.SEX, COUNT(l.ID) AS patient_count FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.T-BIL >= 2.0 GROUP BY p.SEX;",
            "ground_truth_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX, T1.ID",
            "res": 0
        },
        {
            "sql_idx": 105,
            "predicted_sql": "SELECT AVG(YEAR(CURDATE()) - YEAR(birthday)) AS average_age FROM Patient WHERE SEX = 'M' AND ID IN ( SELECT ID FROM Examination WHERE `T-CHO` >= 250 );",
            "ground_truth_sql": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(T1.Birthday)) FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
            "res": 0
        },
        {
            "sql_idx": 106,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND YEAR(CURDATE()) - YEAR(T1.Birthday) > 50;",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`TG` >= 200   AND DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') > 50",
            "res": 1
        },
        {
            "sql_idx": 107,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS male_patients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND T2.CPK >= 250;",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') BETWEEN '1936' AND '1956'   AND `T1`.`SEX` = 'M'   AND `T2`.`CPK` >= 250",
            "res": 0
        },
        {
            "sql_idx": 108,
            "predicted_sql": "SELECT ID, SEX, TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) AS age FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GLU >= 180 ) AND ID IN ( SELECT ID FROM Laboratory WHERE T-CHO < 250 );",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   `T1`.`SEX`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GLU` >= 180 AND `T2`.`T-CHO` < 250",
            "res": 0
        },
        {
            "sql_idx": 109,
            "predicted_sql": "SELECT p.ID, p.Diagnosis, TIMESTAMPDIFF(YEAR, p.Birthday, CURDATE()) AS Age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RBC < 3.5;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`Diagnosis`,   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RBC` < 3.5",
            "res": 0
        },
        {
            "sql_idx": 110,
            "predicted_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB BETWEEN 10 AND 17 ORDER BY T1.Birthday DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`ID`,   `T1`.`SEX` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`Diagnosis` = 'SLE' AND `T2`.`HGB` > 10 AND `T2`.`HGB` < 17 ORDER BY   `T1`.`Birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 111,
            "predicted_sql": "SELECT ID, TIMESTAMPDIFF(YEAR, Birthday, CURDATE()) AS age FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(*) > 2 )",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T1`.`ID` IN (     SELECT       `ID`     FROM `Laboratory`     WHERE       `HCT` >= 52     GROUP BY       `ID`     HAVING       COUNT(`ID`) >= 2   )",
            "res": 0
        },
        {
            "sql_idx": 112,
            "predicted_sql": "SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal FROM Laboratory WHERE PLT < 100 OR PLT > 400;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`PLT` <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`PLT` >= 400 THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID`",
            "res": 0
        },
        {
            "sql_idx": 113,
            "predicted_sql": "SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T2.`Date`) = 1984 AND TIMESTAMPDIFF(YEAR, T1.Birthday, CURDATE()) < 50 AND T2.PLT BETWEEN 100 AND 400;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`ID` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`PLT` BETWEEN 100 AND 400   AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') < 50   AND DATE_FORMAT(CAST(`T2`.`Date` AS DATETIME), '%Y') = '1984'",
            "res": 0
        },
        {
            "sql_idx": 114,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.SEX = 'F' AND T2.PT >= 14 THEN 1 END) * 100.0 / COUNT(T1.SEX)) AS percentage FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(CURDATE()) - YEAR(T1.Birthday) > 55;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`PT` >= 14 AND `T1`.`SEX` = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`PT` >= 14 THEN 1 ELSE 0 END) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T1`.`Birthday` AS DATETIME), '%Y') > 55",
            "res": 0
        },
        {
            "sql_idx": 115,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`FG` <= 150   OR `T2`.`FG` >= 450   AND `T2`.`WBC` > 3.5   AND `T2`.`WBC` < 9.0   AND `T1`.`SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 116,
            "predicted_sql": "SELECT COUNT(DISTINCT ID) AS NumberOfPatients FROM Laboratory WHERE IGG >= 2000;",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   `T2`.`IGG` >= 2000",
            "res": 0
        },
        {
            "sql_idx": 117,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS num_patients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T2.Symptoms IS NOT NULL;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   `T2`.`IGG` BETWEEN 900 AND 2000 AND NOT `T3`.`Symptoms` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 118,
            "predicted_sql": "SELECT COUNT(DISTINCT ID) AS normal_iga_patients FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID WHERE p.`First Date` > '1990-01-01' AND e.IGA > 80 AND e.IGA < 500;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`IGA` BETWEEN 80 AND 500   AND DATE_FORMAT(CAST(`T1`.`First Date` AS DATETIME), '%Y') > '1990'",
            "res": 0
        },
        {
            "sql_idx": 119,
            "predicted_sql": "SELECT Diagnosis, COUNT(*) AS DiagnosisCount FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`Diagnosis` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   NOT `T2`.`IGM` BETWEEN 40 AND 400 GROUP BY   `T1`.`Diagnosis` ORDER BY   COUNT(`T1`.`Diagnosis`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 120,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL;",
            "ground_truth_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL;",
            "res": 0
        },
        {
            "sql_idx": 121,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 70;",
            "ground_truth_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND YEAR(CURDATE()) - YEAR(T1.Birthday) < 70",
            "res": 1
        },
        {
            "sql_idx": 122,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS num_patients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RNP = '-' AND T1.Admission = '+'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`RNP` = 'negative' OR `T2`.`RNP` = '0' AND `T1`.`Admission` = '+'",
            "res": 0
        },
        {
            "sql_idx": 123,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SM = 'negative' AND T2.Thrombosis = 0;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Examination` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`SM` IN ('negative', '0') AND `T1`.`Thrombosis` = 0",
            "res": 0
        },
        {
            "sql_idx": 124,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS NumberOfPatients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Symptoms IS NULL AND T2.SC170 IN ('negative', '0')",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T3`.`ID` = `T2`.`ID` WHERE   (     `T2`.`SC170` = 'negative' OR `T2`.`SC170` = '0'   )   AND `T1`.`SEX` = 'F'   AND `T3`.`Symptoms` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 125,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS male_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`CENTROMEA` IN ('negative', '0')   AND `T2`.`SSB` IN ('negative', '0')   AND `T1`.`SEX` = 'M'",
            "res": 0
        },
        {
            "sql_idx": 126,
            "predicted_sql": "SELECT MIN(T1.Birthday) AS youngest_birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60;",
            "ground_truth_sql": "SELECT   `T1`.`Birthday` FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` WHERE   `T2`.`GOT` >= 60 ORDER BY   `T1`.`Birthday` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 127,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) AS num_patients FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`ID`) FROM `Patient` AS `T1` INNER JOIN `Laboratory` AS `T2`   ON `T1`.`ID` = `T2`.`ID` INNER JOIN `Examination` AS `T3`   ON `T1`.`ID` = `T3`.`ID` WHERE   `T2`.`CPK` < 250   AND (     `T3`.`KCT` = '+' OR `T3`.`RVVT` = '+' OR `T3`.`LAC` = '+'   )",
            "res": 0
        }
    ],
    "european_football_2": [
        {
            "sql_idx": 128,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT  `t2`.`name` FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` WHERE   `t1`.`season` = '2015/2016' GROUP BY   `t2`.`name` ORDER BY   SUM(`t1`.`home_team_goal` + `t1`.`away_team_goal`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 129,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T2.season = '2009/2010' AND T2.away_team_goal > T2.home_team_goal GROUP BY T1.team_long_name ORDER BY COUNT(T2.away_team_goal) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `teamInfo`.`team_long_name` FROM `League` AS `leagueData` INNER JOIN `Match` AS `matchData`   ON `leagueData`.`id` = `matchData`.`league_id` INNER JOIN `Team` AS `teamInfo`   ON `matchData`.`away_team_api_id` = `teamInfo`.`team_api_id` WHERE   `leagueData`.`name` = 'Scotland Premier League'   AND `matchData`.`season` = '2009/2010'   AND `matchData`.`away_team_goal` - `matchData`.`home_team_goal` > 0 GROUP BY   `matchData`.`away_team_api_id` ORDER BY   COUNT(*) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 130,
            "predicted_sql": "SELECT t.team_long_name, t.team_short_name, ta.buildUpPlaySpeed FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id ORDER BY ta.buildUpPlaySpeed DESC LIMIT 4;",
            "ground_truth_sql": "SELECT   `t1`.`buildUpPlaySpeed` FROM `Team_Attributes` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` ORDER BY   `t1`.`buildUpPlaySpeed` ASC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 131,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `t2`.`name` FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` WHERE   `t1`.`season` = '2015/2016' AND `t1`.`home_team_goal` = `t1`.`away_team_goal` GROUP BY   `t2`.`name` ORDER BY   COUNT(`t1`.`id`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 132,
            "predicted_sql": "SELECT DATE_FORMAT(CURDATE(), '%Y') - DATE_FORMAT(birthday, '%Y') - (DATE_FORMAT(CURDATE(), '%m%d') < DATE_FORMAT(birthday, '%m%d')) AS age FROM Player_Attributes WHERE sprint_speed >= 97 AND YEAR(date) BETWEEN 2013 AND 2015;",
            "ground_truth_sql": "SELECT DISTINCT YEAR(CURDATE()) - YEAR(t2.birthday) AS age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE YEAR(t1.`date`) BETWEEN 2013 AND 2015 AND t1.sprint_speed >= 97",
            "res": 0
        },
        {
            "sql_idx": 133,
            "predicted_sql": "SELECT T1.name, COUNT(T2.league_id) AS match_count FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY match_count DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `t2`.`name`,   COUNT(`t1`.`id`) FROM `Match` AS `t1` INNER JOIN `League` AS `t2`   ON `t1`.`league_id` = `t2`.`id` GROUP BY   `t2`.`name` ORDER BY   COUNT(`t1`.`id`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 134,
            "predicted_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
            "ground_truth_sql": "SELECT DISTINCT   `team_fifa_api_id` FROM `Team_Attributes` WHERE   `buildUpPlaySpeed` > 50 AND `buildUpPlaySpeed` < 60",
            "res": 1
        },
        {
            "sql_idx": 135,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T2.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE STR_TO_DATE(date, '%Y-%m-%d') >= STR_TO_DATE('2012-01-01', '%Y-%m-%d') AND STR_TO_DATE(date, '%Y-%m-%d') <= STR_TO_DATE('2012-12-31', '%Y-%m-%d') )",
            "ground_truth_sql": "SELECT DISTINCT   `t4`.`team_long_name` FROM `Team_Attributes` AS `t3` INNER JOIN `Team` AS `t4`   ON `t3`.`team_api_id` = `t4`.`team_api_id` WHERE   SUBSTR(`t3`.`date`, 1, 4) = '2012'   AND `t3`.`buildUpPlayPassing` > (     SELECT       CAST(SUM(`t2`.`buildUpPlayPassing`) AS DOUBLE) / COUNT(`t1`.`id`)     FROM `Team` AS `t1`     INNER JOIN `Team_Attributes` AS `t2`       ON `t1`.`team_api_id` = `t2`.`team_api_id`     WHERE       DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') = '2012'   )",
            "res": 0
        },
        {
            "sql_idx": 136,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(T1.player_api_id) AS percentage FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE YEAR(STR_TO_DATE(T2.birthday, '%d/%m/%Y')) BETWEEN 1987 AND 1992;",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `t2`.`preferred_foot` = 'left' THEN `t1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`t1`.`id`) AS `percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t1`.`birthday`, 1, 4) BETWEEN '1987' AND '1992'",
            "res": 0
        },
        {
            "sql_idx": 137,
            "predicted_sql": "SELECT AVG(T2.long_shots) AS average_long_shots FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T1.player_name = 'Ahmed Samir Farag'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`long_shots`) AS DOUBLE) / COUNT(`t2`.`date`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`player_name` = 'Ahmed Samir Farag'",
            "res": 0
        },
        {
            "sql_idx": 138,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10;",
            "ground_truth_sql": "SELECT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`height` > 180 GROUP BY   `t1`.`id` ORDER BY   CAST(SUM(`t2`.`heading_accuracy`) AS DOUBLE) / COUNT(`t2`.`player_fifa_api_id`) DESC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 139,
            "predicted_sql": "SELECT AVG(T1.home_team_goal) AS avg_home_goals, AVG(T1.away_team_goal) AS avg_away_goals, T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2009/2010' GROUP BY T2.name HAVING avg_home_goals > avg_away_goals;",
            "ground_truth_sql": "SELECT   `t1`.`name` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t2`.`season` = '2009/2010' GROUP BY   `t1`.`name` HAVING   (     CAST(SUM(`t2`.`home_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)   ) - (     CAST(SUM(`t2`.`away_team_goal`) AS DOUBLE) / COUNT(DISTINCT `t2`.`id`)   ) > 0",
            "res": 0
        },
        {
            "sql_idx": 140,
            "predicted_sql": "SELECT player_name FROM Player WHERE birthday LIKE '1970-10-%';",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` WHERE   SUBSTR(`birthday`, 1, 7) = '1970-10'",
            "res": 1
        },
        {
            "sql_idx": 141,
            "predicted_sql": "SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T1.player_name = 'Gabriel Tamas' AND T2.date LIKE '%2011%' GROUP BY T2.overall_rating;",
            "ground_truth_sql": "SELECT  `t2`.`overall_rating` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE  `t1`.`player_name` = 'Gabriel Tamas'  AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 142,
            "predicted_sql": "SELECT AVG(home_team_goal) AS average_home_team_goal FROM Match JOIN League ON Match.country_id = League.id WHERE League.name = 'Poland' AND Match.season = '2010/2011';",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`home_team_goal`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Country` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`country_id` WHERE   `t1`.`name` = 'Poland' AND `t2`.`season` = '2010/2011'",
            "res": 0
        },
        {
            "sql_idx": 143,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.finishing = ( SELECT AVG(finishing) FROM Player_Attributes WHERE height = ( SELECT MAX(height) FROM Player ) OR height = ( SELECT MIN(height) FROM Player ) )",
            "ground_truth_sql": "SELECT `A` FROM (SELECT AVG(`finishing`) AS `result`, 'Max' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MAX(`height`) FROM `Player`) UNION SELECT AVG(`finishing`) AS `result`, 'Min' AS `A` FROM `Player` AS `T1` INNER JOIN `Player_Attributes` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T1`.`height` = (SELECT MIN(`height`) FROM `Player`)) AS `derived` ORDER BY `result` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 144,
            "predicted_sql": "SELECT AVG(t2.overall_rating) AS average_overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.id = t2.player_fifa_api_id WHERE t2.date BETWEEN '2010-01-01' AND '2015-12-31' AND t1.height > 170;",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`height` > 170   AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') >= '2010'   AND DATE_FORMAT(CAST(`t2`.`date` AS DATETIME), '%Y') <= '2015'",
            "res": 0
        },
        {
            "sql_idx": 145,
            "predicted_sql": "SELECT (SUM(CASE WHEN T2.player_name = 'Abdou Diallo' THEN T1.ball_control ELSE 0 END) / COUNT(CASE WHEN T2.player_name = 'Abdou Diallo' THEN T1.id ELSE NULL END)) - (SUM(CASE WHEN T2.player_name = 'Aaron Appindangoye' THEN T1.ball_control ELSE 0 END) / COUNT(CASE WHEN T2.player_name = 'Aaron Appindangoye' THEN T1.id ELSE NULL END)) AS difference FROM Player_Attributes T1 INNER JOIN Player T2 ON T1.player_api_id = T2.id",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`ball_control` ELSE 0 END   ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Abdou Diallo' THEN `t2`.`id` ELSE NULL END) - CAST(SUM(     CASE       WHEN `t1`.`player_name` = 'Aaron Appindangoye'       THEN `t2`.`ball_control`       ELSE 0     END   ) AS DOUBLE) / COUNT(CASE WHEN `t1`.`player_name` = 'Aaron Appindangoye' THEN `t2`.`id` ELSE NULL END) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        },
        {
            "sql_idx": 146,
            "predicted_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` WHERE   `player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY   `birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 147,
            "predicted_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `player_name` FROM `Player` ORDER BY   `height` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 148,
            "predicted_sql": "SELECT COUNT(DISTINCT player_api_id) AS player_count FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';",
            "ground_truth_sql": "SELECT   COUNT(`player_api_id`) FROM `Player_Attributes` WHERE   `preferred_foot` = 'left' AND `attacking_work_rate` = 'low'",
            "res": 0
        },
        {
            "sql_idx": 149,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.defensive_work_rate = 'high' AND STR_TO_DATE(T1.birthday, '%d/%m/%Y') < '1986-01-01'",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `t1`.`player_name`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   DATE_FORMAT(CAST(`t1`.`birthday` AS DATETIME), '%Y') < '1986'   AND `t2`.`defensive_work_rate` = 'high'",
            "res": 0
        },
        {
            "sql_idx": 150,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70;",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`volleys` > 70 AND `t2`.`dribbling` > 70",
            "res": 0
        },
        {
            "sql_idx": 151,
            "predicted_sql": "SELECT COUNT(*) AS match_count FROM Match m JOIN League l ON m.league_id = l.id WHERE l.name = 'Belgium Jupiler League' AND SUBSTR(m.`date`, 1, 7) = '2009-04';",
            "ground_truth_sql": "SELECT   COUNT(`t2`.`id`) FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t1`.`name` = 'Belgium Jupiler League' AND SUBSTR(`t2`.`date`, 1, 7) = '2009-04'",
            "res": 0
        },
        {
            "sql_idx": 152,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `t1`.`name` FROM `League` AS `t1`JOIN `Match` AS `t2` ON `t1`.`id` = `t2`.`league_id` WHERE  `t2`.`season` = '2008/2009' GROUP BY  `t1`.`name` HAVING COUNT(`t2`.`id`) = (SELECT MAX(match_count) FROM (SELECT COUNT(`t2`.`id`) AS match_count FROM `Match` AS `t2` WHERE `t2`.`season` = '2008/2009' GROUP BY  `t2`.`league_id`) AS subquery)",
            "res": 0
        },
        {
            "sql_idx": 153,
            "predicted_sql": "SELECT ( (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel') ) * 100.0 / (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel') AS percentage_difference;",
            "ground_truth_sql": "SELECT   (     SUM(       CASE         WHEN `t1`.`player_name` = 'Ariel Borysiuk'         THEN `t2`.`overall_rating`         ELSE 0       END     ) * 1.0 - SUM(       CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END     )   ) * 100 / SUM(     CASE WHEN `t1`.`player_name` = 'Paulin Puel' THEN `t2`.`overall_rating` ELSE 0 END   ) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        },
        {
            "sql_idx": 154,
            "predicted_sql": "SELECT AVG(T1.overall_rating) AS average_overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.id WHERE T2.player_name = 'Pietro Marino';",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t1`.`player_name` = 'Pietro Marino'",
            "res": 0
        },
        {
            "sql_idx": 155,
            "predicted_sql": "SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'",
            "ground_truth_sql": "SELECT   `t2`.`chanceCreationPassing`,   `t2`.`chanceCreationPassingClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'Ajax' ORDER BY   `t2`.`chanceCreationPassing` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 156,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date = '2016-06-23%' ORDER BY T1.birthday DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2016-06-23' AND `t2`.`overall_rating` = 77 ORDER BY   `t1`.`birthday` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 157,
            "predicted_sql": "SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Mooy' AND date = '2016-02-04';",
            "ground_truth_sql": "SELECT   `t2`.`overall_rating` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2016-02-04' AND `t1`.`player_name` = 'Aaron Mooy'",
            "res": 0
        },
        {
            "sql_idx": 158,
            "predicted_sql": "SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date LIKE '2015-05-01%'",
            "ground_truth_sql": "SELECT   `t2`.`attacking_work_rate` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`date` LIKE '2015-05-01%' AND `t1`.`player_name` = 'Francesco Migliore'",
            "res": 0
        },
        {
            "sql_idx": 159,
            "predicted_sql": "SELECT T2.date FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T1.player_name = 'Kevin Constant' ORDER BY T2.crossing DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `date` FROM (SELECT `t2`.`crossing`, `t2`.`date` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2` ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE `t1`.`player_name` = 'Kevin Constant' ORDER BY `t2`.`crossing` DESC) AS `subquery` ORDER BY `date` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 160,
            "predicted_sql": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date LIKE '2010-02-22%'",
            "ground_truth_sql": "SELECT   `t2`.`buildUpPlayPassingClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'FC Lorient' AND `t2`.`date` LIKE '2010-02-22%'",
            "res": 0
        },
        {
            "sql_idx": 161,
            "predicted_sql": "SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'",
            "ground_truth_sql": "SELECT   `t2`.`defenceAggressionClass` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t1`.`team_long_name` = 'Hannover 96' AND `t2`.`date` LIKE '2015-09-10%'",
            "res": 0
        },
        {
            "sql_idx": 162,
            "predicted_sql": "SELECT AVG(T2.overall_rating) AS average_overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T1.player_name = 'Marko Arnautovic' AND T2.date LIKE '2007%' AND T2.date LIKE '%2016%'",
            "ground_truth_sql": "SELECT   CAST(SUM(`t2`.`overall_rating`) AS DOUBLE) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE   `t1`.`player_name` = 'Marko Arnautovic'   AND SUBSTR(`t2`.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
            "res": 0
        },
        {
            "sql_idx": 163,
            "predicted_sql": "SELECT (SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Jordan Bowery' THEN T2.overall_rating ELSE 0 END)) * 100.0 / SUM(CASE WHEN T1.player_name = 'Landon Donovan' THEN T2.overall_rating ELSE 0 END) AS percentage FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_fifa_api_id WHERE T2.date = '2013-07-12';",
            "ground_truth_sql": "SELECT   (     SUM(       CASE         WHEN `t1`.`player_name` = 'Landon Donovan'         THEN `t2`.`overall_rating`         ELSE 0       END     ) * 1.0 - SUM(       CASE WHEN `t1`.`player_name` = 'Jordan Bowery' THEN `t2`.`overall_rating` ELSE 0 END     )   ) * 100 / SUM(     CASE       WHEN `t1`.`player_name` = 'Landon Donovan'       THEN `t2`.`overall_rating`       ELSE 0     END   ) AS `LvsJ_percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_fifa_api_id` = `t2`.`player_fifa_api_id` WHERE   SUBSTR(`t2`.`date`, 1, 10) = '2013-07-12'",
            "res": 0
        },
        {
            "sql_idx": 164,
            "predicted_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;",
            "ground_truth_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as `rank`FROM Player) AS ranked_players WHERE `rank` = 1",
            "res": 1
        },
        {
            "sql_idx": 165,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1;",
            "ground_truth_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
            "res": 0
        },
        {
            "sql_idx": 166,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.attacking_work_rate = 'high' GROUP BY T1.player_name;",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`attacking_work_rate` = 'high'",
            "res": 0
        },
        {
            "sql_idx": 167,
            "predicted_sql": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`team_short_name` FROM `Team` AS `t1` INNER JOIN `Team_Attributes` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t2`.`chanceCreationPassingClass` = 'Safe'",
            "res": 0
        },
        {
            "sql_idx": 168,
            "predicted_sql": "SELECT COUNT(*) AS number_of_players FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990';",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `Player` WHERE   `birthday` > '1990' AND `player_name` LIKE 'Aaron%'",
            "res": 1
        },
        {
            "sql_idx": 169,
            "predicted_sql": "SELECT ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 6 ) - ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 23 ) AS difference;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `t1`.`id` = 6 THEN `t1`.`jumping` ELSE 0 END) - SUM(CASE WHEN `t1`.`id` = 23 THEN `t1`.`jumping` ELSE 0 END) FROM `Player_Attributes` AS `t1`",
            "res": 0
        },
        {
            "sql_idx": 170,
            "predicted_sql": "SELECT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 4;",
            "ground_truth_sql": "SELECT   `id` FROM `Player_Attributes` WHERE   `preferred_foot` = 'right' ORDER BY   `potential` ASC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 171,
            "predicted_sql": "SELECT COUNT(DISTINCT player_api_id) AS player_count FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE preferred_foot = 'left' );",
            "ground_truth_sql": "SELECT   COUNT(`t1`.`id`) FROM `Player_Attributes` AS `t1` WHERE   `t1`.`preferred_foot` = 'left'   AND `t1`.`crossing` = (     SELECT       MAX(`crossing`)     FROM `Player_Attributes`   )",
            "res": 0
        },
        {
            "sql_idx": 172,
            "predicted_sql": "SELECT m.home_team_goal AS home_team_score, m.away_team_goal AS away_team_score FROM Match m JOIN League l ON m.league_id = l.id WHERE m.date LIKE '2008-09-24%' AND l.name = 'Belgium Jupiler League';",
            "ground_truth_sql": "SELECT   `t2`.`home_team_goal`,   `t2`.`away_team_goal` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t1`.`name` = 'Belgium Jupiler League' AND `t2`.`date` LIKE '2008-09-24%'",
            "res": 0
        },
        {
            "sql_idx": 173,
            "predicted_sql": "SELECT t.team_long_name, taa.buildUpPlaySpeedClass FROM Team t JOIN Team_Attributes taa ON t.team_api_id = taa.team_api_id WHERE t.team_long_name = 'KSV Cercle Brugge';",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`buildUpPlaySpeedClass` FROM `Team_Attributes` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`team_api_id` = `t2`.`team_api_id` WHERE   `t2`.`team_long_name` = 'KSV Cercle Brugge'",
            "res": 0
        },
        {
            "sql_idx": 174,
            "predicted_sql": "SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.id WHERE T2.weight = ( SELECT MAX(weight) FROM Player )",
            "ground_truth_sql": "SELECT   `id`,   `finishing`,   `curve` FROM `Player_Attributes` WHERE   `player_api_id` = (     SELECT       `player_api_id`     FROM `Player`     ORDER BY       `weight` DESC     LIMIT 1   ) LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 175,
            "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 4;",
            "ground_truth_sql": "SELECT   `t1`.`name` FROM `League` AS `t1` INNER JOIN `Match` AS `t2`   ON `t1`.`id` = `t2`.`league_id` WHERE   `t2`.`season` = '2015/2016' GROUP BY   `t1`.`name` ORDER BY   COUNT(`t2`.`id`) DESC LIMIT 4",
            "res": 0
        },
        {
            "sql_idx": 176,
            "predicted_sql": "SELECT T1.team_long_name FROM Team AS T1 JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id ORDER BY T2.away_team_goal DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `t2`.`team_long_name` FROM `Match` AS `t1` INNER JOIN `Team` AS `t2`   ON `t1`.`away_team_api_id` = `t2`.`team_api_id` ORDER BY   `t1`.`away_team_goal` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 177,
            "predicted_sql": "SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1;",
            "ground_truth_sql": "SELECT DISTINCT   `t1`.`player_name` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE   `t2`.`overall_rating` = (     SELECT       MAX(`overall_rating`)     FROM `Player_Attributes`   )",
            "res": 0
        },
        {
            "sql_idx": 178,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.id)) AS percentage FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id;",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `t2`.`overall_rating` > 70 AND `t1`.`height` < 180 THEN `t1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`t1`.`id`) AS `percent` FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2`   ON `t1`.`player_api_id` = `t2`.`player_api_id`",
            "res": 0
        }
    ],
    "formula_1": [
        {
            "sql_idx": 179,
            "predicted_sql": "SELECT T.driverRef FROM ( SELECT T1.driverRef, T2.q1 FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 20 ORDER BY T2.q1 DESC LIMIT 5 ) AS T ORDER BY T.q1 DESC;",
            "ground_truth_sql": "SELECT   `T2`.`driverRef` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 20 ORDER BY   `T1`.`q1` DESC LIMIT 5",
            "res": 1
        },
        {
            "sql_idx": 180,
            "predicted_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL ORDER BY T1.q2 ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`surname` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 19 ORDER BY   `T1`.`q2` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 181,
            "predicted_sql": "SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Germany';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T1`.`country` = 'Germany'",
            "res": 1
        },
        {
            "sql_idx": 182,
            "predicted_sql": "SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Australian Grand Prix';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Australian Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 183,
            "predicted_sql": "SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Abu Dhabi Grand Prix';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Abu Dhabi Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 184,
            "predicted_sql": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna' );",
            "ground_truth_sql": "SELECT   `T1`.`q1` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 354 AND `T2`.`forename` = 'Bruno' AND `T2`.`surname` = 'Senna'",
            "res": 1
        },
        {
            "sql_idx": 185,
            "predicted_sql": "SELECT q.number FROM qualifying q WHERE q.raceId = 903 AND q.q3 = '1:54';",
            "ground_truth_sql": "SELECT   `T2`.`number` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 903 AND `T1`.`q3` LIKE '1:54%'",
            "res": 0
        },
        {
            "sql_idx": 186,
            "predicted_sql": "SELECT COUNT(DISTINCT driverId) AS drivers_not_finished FROM results WHERE raceId = ( SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007 ) AND time IS NULL;",
            "ground_truth_sql": "SELECT   COUNT(`T3`.`driverId`) FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T1`.`year` = 2007 AND `T1`.`name` = 'Bahrain Grand Prix' AND `T2`.`time` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 187,
            "predicted_sql": "SELECT d.driverRef, d.surname, d.dob FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`raceId` = 592 AND NOT `T2`.`time` IS NULL AND NOT `T1`.`dob` IS NULL ORDER BY   `T1`.`dob` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 188,
            "predicted_sql": "SELECT d.forename, d.surname, d.url FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE lt.raceId = 161 AND lt.time = '1:27';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`forename`,   `T2`.`surname`,   `T2`.`url` FROM `lapTimes` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 161 AND `T1`.`time` LIKE '1:27%'",
            "res": 0
        },
        {
            "sql_idx": 189,
            "predicted_sql": "SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Malaysian Grand Prix';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`lat`,   `T1`.`lng` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'Malaysian Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 190,
            "predicted_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`url` FROM `constructorResults` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T2`.`constructorId` = `T1`.`constructorId` WHERE   `T1`.`raceId` = 9 ORDER BY   `T1`.`points` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 191,
            "predicted_sql": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q3 = '1:33' AND T2.raceid = 45;",
            "ground_truth_sql": "SELECT   `T2`.`code` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`raceId` = 45 AND `T1`.`q3` LIKE '1:33%'",
            "res": 0
        },
        {
            "sql_idx": 192,
            "predicted_sql": "SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;",
            "ground_truth_sql": "SELECT   `T2`.`url` FROM `races` AS `T1` INNER JOIN `seasons` AS `T2`   ON `T2`.`year` = `T1`.`year` WHERE   `T1`.`raceId` = 901",
            "res": 1
        },
        {
            "sql_idx": 193,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`raceId` = 872 AND NOT `T2`.`time` IS NULL ORDER BY   `T1`.`dob` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 194,
            "predicted_sql": "SELECT d.nationality FROM drivers d JOIN results r ON d.driverid = r.driverid ORDER BY r.fastestlapspeed DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`nationality` FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` ORDER BY   `T2`.`fastestLapSpeed` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 195,
            "predicted_sql": "SELECT ( (SELECT fastestLapSpeed FROM results WHERE raceId = 853) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854) ) * 100.0 / (SELECT fastestLapSpeed FROM results WHERE raceId = 853) AS percentage_faster",
            "ground_truth_sql": "SELECT   (     SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END) - SUM(CASE WHEN `T2`.`raceId` = 854 THEN `T2`.`fastestLapSpeed` ELSE 0 END)   ) * 100 / SUM(CASE WHEN `T2`.`raceId` = 853 THEN `T2`.`fastestLapSpeed` ELSE 0 END) FROM `drivers` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T1`.`forename` = 'Paul' AND `T1`.`surname` = 'di Resta'",
            "res": 0
        },
        {
            "sql_idx": 196,
            "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN T2.time IS NOT NULL THEN T1.driverid END) * 100.0 / COUNT(DISTINCT T1.driverid)) AS completion_rate FROM results AS T1 INNER JOIN pitstops AS T2 ON T1.driverid = T2.driverid AND T1.raceid = T2.raceid WHERE T1.raceid = ( SELECT raceid FROM races WHERE date = '1983-07-16' )",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN NOT `T2`.`time` IS NULL THEN `T2`.`driverId` END) AS DOUBLE) * 100 / COUNT(`T2`.`driverId`) FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` WHERE   `T1`.`date` = '1983-07-16'",
            "res": 0
        },
        {
            "sql_idx": 197,
            "predicted_sql": "SELECT name FROM races ORDER BY date ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `name` FROM `races` WHERE   DATE_FORMAT(CAST(`date` AS DATETIME), '%Y') = (     SELECT       DATE_FORMAT(CAST(`date` AS DATETIME), '%Y')     FROM `races`     ORDER BY       `date` ASC     LIMIT 1   )   AND DATE_FORMAT(CAST(`date` AS DATETIME), '%m') = (     SELECT       DATE_FORMAT(CAST(`date` AS DATETIME), '%m')     FROM `races`     ORDER BY       `date` ASC     LIMIT 1   )",
            "res": 0
        },
        {
            "sql_idx": 198,
            "predicted_sql": "SELECT d.forename, d.surname, MAX(dr.points) AS max_points FROM drivers d JOIN driverStandings dr ON d.driverId = dr.driverId GROUP BY d.forename, d.surname ORDER BY max_points DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T3`.`forename`,   `T3`.`surname`,   `T2`.`points` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` ORDER BY   `T2`.`points` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 199,
            "predicted_sql": "SELECT d.forename, d.surname, r.name AS race_name, lt.time AS best_lap_time FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN lapTimes lt ON r.resultid = lt.driverid ORDER BY lt.milliseconds ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`milliseconds`,   `T1`.`forename`,   `T1`.`surname`,   `T3`.`name` FROM `drivers` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T2`.`raceId` = `T3`.`raceId` ORDER BY   `T2`.`milliseconds` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 200,
            "predicted_sql": "SELECT AVG(lt.milliseconds) AS average_lap_time FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races rc ON r.raceid = rc.raceid JOIN lapTimes lt ON r.resultid = lt.driverid WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND rc.name = 'Malaysian Grand Prix' AND rc.year = 2009;",
            "ground_truth_sql": "SELECT   AVG(`T2`.`milliseconds`) FROM `races` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis'   AND `T3`.`surname` = 'Hamilton'   AND `T1`.`year` = 2009   AND `T1`.`name` = 'Malaysian Grand Prix'",
            "res": 0
        },
        {
            "sql_idx": 201,
            "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN position > 1 THEN raceId END) * 100.0 / COUNT(DISTINCT raceId)) AS percentage FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton' AND results.raceId IN ( SELECT raceId FROM races WHERE year >= 2010 );",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`position` <> 1 THEN `T2`.`position` END) AS DOUBLE) * 100 / COUNT(`T2`.`driverStandingsId`) FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`surname` = 'Hamilton' AND `T1`.`year` >= 2010",
            "res": 0
        },
        {
            "sql_idx": 202,
            "predicted_sql": "SELECT d.forename, d.surname, d.nationality, MAX(cs.wins) AS max_wins, MAX(cs.points) AS max_points FROM drivers d JOIN driverStandings cs ON d.driverId = cs.driverId GROUP BY d.forename, d.surname, d.nationality ORDER BY max_wins DESC, max_points DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`forename`,   `T1`.`surname`,   `T1`.`nationality`,   MAX(`T2`.`points`) FROM `drivers` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`driverId` = `T1`.`driverId` WHERE   `T2`.`wins` >= 1 GROUP BY   `T1`.`forename`,   `T1`.`surname`,   `T1`.`nationality` ORDER BY   COUNT(`T2`.`wins`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 203,
            "predicted_sql": "SELECT YEAR(CURDATE()) - YEAR(dob) AS age, CONCAT(forename, ' ', surname) AS name FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`dob` AS DATETIME), '%Y'),   `forename`,   `surname` FROM `drivers` WHERE   `nationality` = 'Japanese' ORDER BY   `dob` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 204,
            "predicted_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location AS circuit_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE YEAR(r.date) = 2005 AND MONTH(r.date) = 9;",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name`,   `T1`.`name`,   `T1`.`location` FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`year` = 2005 AND DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%m') = '09'",
            "res": 1
        },
        {
            "sql_idx": 205,
            "predicted_sql": "SELECT r.name AS race_name FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;",
            "ground_truth_sql": "SELECT   `T1`.`name` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Alex' AND `T3`.`surname` = 'Yoong' AND `T2`.`position` < 20",
            "res": 0
        },
        {
            "sql_idx": 206,
            "predicted_sql": "SELECT r.name AS race_name, r.year FROM races r JOIN results rs ON r.raceId = rs.raceId JOIN drivers d ON rs.driverId = d.driverId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' ORDER BY rs.milliseconds ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T1`.`year` FROM `races` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Michael' AND `T3`.`surname` = 'Schumacher' ORDER BY   `T2`.`milliseconds` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 207,
            "predicted_sql": "SELECT r.name AS first_race, r.points AS points_recorded FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC, r.round ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T2`.`points` FROM `races` AS `T1` INNER JOIN `driverStandings` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis' AND `T3`.`surname` = 'Hamilton' ORDER BY   `T1`.`year` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 208,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T2.country = 'Germany' THEN 1 ELSE NULL END) * 100.0 / COUNT(*)) AS percentage FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix';",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T1`.`country` = 'Germany' THEN `T2`.`circuitID` END) AS DOUBLE) * 100 / COUNT(`T2`.`circuitId`) FROM `circuits` AS `T1` INNER JOIN `races` AS `T2`   ON `T2`.`circuitID` = `T1`.`circuitId` WHERE   `T2`.`name` = 'European Grand Prix'",
            "res": 0
        },
        {
            "sql_idx": 209,
            "predicted_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
            "ground_truth_sql": "SELECT   `lat`,   `lng` FROM `circuits` WHERE   `name` = 'Silverstone Circuit'",
            "res": 1
        },
        {
            "sql_idx": 210,
            "predicted_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';",
            "ground_truth_sql": "SELECT   `circuitRef` FROM `circuits` WHERE   `name` = 'Marina Bay Street Circuit'",
            "res": 1
        },
        {
            "sql_idx": 211,
            "predicted_sql": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `nationality` FROM `drivers` WHERE   NOT `dob` IS NULL ORDER BY   `dob` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 212,
            "predicted_sql": "SELECT T2.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2007 AND T2.position = 1;",
            "ground_truth_sql": "SELECT   `T3`.`forename`,   `T3`.`surname`,   `T3`.`driverRef` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T1`.`name` = 'Canadian Grand Prix' AND `T2`.`rank` = 1 AND `T1`.`year` = 2007",
            "res": 0
        },
        {
            "sql_idx": 213,
            "predicted_sql": "SELECT r.name AS race_name FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.rank ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `name` FROM `races` WHERE   `raceId` IN (     SELECT       `raceId`     FROM `results`     WHERE       `rank` = 1       AND `driverId` = (         SELECT           `driverId`         FROM `drivers`         WHERE           `forename` = 'Lewis' AND `surname` = 'Hamilton'       )   )",
            "res": 0
        },
        {
            "sql_idx": 214,
            "predicted_sql": "SELECT MAX(T2.fastestLapSpeed) AS fastest_lap_speed FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;",
            "ground_truth_sql": "SELECT   `T2`.`fastestLapSpeed` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` WHERE   `T1`.`name` = 'Spanish Grand Prix'   AND `T1`.`year` = 2009   AND NOT `T2`.`fastestLapSpeed` IS NULL ORDER BY   `T2`.`fastestLapSpeed` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 215,
            "predicted_sql": "SELECT r.positionOrder FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races rc ON r.raceId = rc.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND rc.name = 'Chinese Grand Prix' AND rc.year = 2008 ORDER BY rc.year DESC, rc.round DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`positionOrder` FROM `races` AS `T1` INNER JOIN `results` AS `T2`   ON `T2`.`raceId` = `T1`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T3`.`driverId` = `T2`.`driverId` WHERE   `T3`.`forename` = 'Lewis'   AND `T3`.`surname` = 'Hamilton'   AND `T1`.`name` = 'Chinese Grand Prix'   AND `T1`.`year` = 2008",
            "res": 1
        },
        {
            "sql_idx": 216,
            "predicted_sql": "SELECT r.time FROM results r JOIN races rc ON r.raceId = rc.raceId WHERE rc.name = 'Chinese Grand Prix' AND r.rank = 2 AND r.positionText = '2nd';",
            "ground_truth_sql": "SELECT   `T1`.`time` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T1`.`rank` = 2 AND `T2`.`name` = 'Chinese Grand Prix' AND `T2`.`year` = 2008",
            "res": 0
        },
        {
            "sql_idx": 217,
            "predicted_sql": "SELECT COUNT(DISTINCT driverId) AS drivers_participated FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2008 AND name = '2008 Chinese Grand Prix' ) AND time IS NOT NULL;",
            "ground_truth_sql": "SELECT COUNT(*) FROM (SELECT `T1`.`driverId` FROM `results` AS `T1` INNER JOIN `races` AS `T2` ON `T1`.`raceId` = `T2`.`raceId` WHERE `T2`.`name` = 'Chinese Grand Prix' AND `T2`.`year` = 2008 AND `T1`.`time` IS NOT NULL GROUP BY `T1`.`driverId` HAVING COUNT(`T2`.`raceId`) > 0) AS derived_table",
            "res": 0
        },
        {
            "sql_idx": 218,
            "predicted_sql": "SELECT (SUM(T1.milliseconds) - MIN(T1.milliseconds)) * 100.0 / SUM(T1.milliseconds) AS percentage_faster FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 1;",
            "ground_truth_sql": "WITH `time_in_seconds` AS (   SELECT     `T1`.`positionOrder`,     CASE       WHEN `T1`.`positionOrder` = 1       THEN (         CAST(SUBSTR(`T1`.`time`, 1, 1) AS DOUBLE) * 3600       ) + (         CAST(SUBSTR(`T1`.`time`, 3, 2) AS DOUBLE) * 60       ) + CAST(SUBSTR(`T1`.`time`, 6) AS DOUBLE)       ELSE CAST(SUBSTR(`T1`.`time`, 2) AS DOUBLE)     END AS `time_seconds`   FROM `results` AS `T1`   INNER JOIN `races` AS `T2`     ON `T1`.`raceId` = `T2`.`raceId`   WHERE     `T2`.`name` = 'Australian Grand Prix'     AND NOT `T1`.`time` IS NULL     AND `T2`.`year` = 2008 ), `champion_time` AS (   SELECT     `time_seconds`   FROM `time_in_seconds`   WHERE     `positionOrder` = 1 ), `last_driver_incremental` AS (   SELECT     `time_seconds`   FROM `time_in_seconds`   WHERE     `positionOrder` = (       SELECT         MAX(`positionOrder`)       FROM `time_in_seconds`     ) ) SELECT   (     CAST((       SELECT         `time_seconds`       FROM `last_driver_incremental`     ) AS DOUBLE) * 100   ) / (     SELECT       `time_seconds` + (         SELECT           `time_seconds`         FROM `last_driver_incremental`       )     FROM `champion_time`   )",
            "res": 1
        },
        {
            "sql_idx": 219,
            "predicted_sql": "SELECT COUNT(*) AS circuit_count FROM circuits WHERE country = 'Australia' AND location = 'Adelaide';",
            "ground_truth_sql": "SELECT   COUNT(`circuitId`) FROM `circuits` WHERE   `location` = 'Adelaide' AND `country` = 'Australia'",
            "res": 1
        },
        {
            "sql_idx": 220,
            "predicted_sql": "SELECT MAX(points) AS max_points FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';",
            "ground_truth_sql": "SELECT   MAX(`T1`.`points`) FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T2`.`nationality` = 'British'",
            "res": 1
        },
        {
            "sql_idx": 221,
            "predicted_sql": "SELECT DISTINCT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.raceId = 291 AND cs.points = 0;",
            "ground_truth_sql": "SELECT   `T2`.`name` FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T1`.`points` = 0 AND `T1`.`raceId` = 291",
            "res": 1
        },
        {
            "sql_idx": 222,
            "predicted_sql": "SELECT COUNT(DISTINCT constructorId) AS japanese_constructors_with_0_points_in_2_races FROM constructorStandings WHERE points = 0 AND constructorId IN ( SELECT constructorId FROM constructors WHERE nationality = 'Japanese' ) AND raceId IN ( SELECT raceId FROM races GROUP BY raceId HAVING COUNT(raceId) = 2 );",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`raceId`) FROM `constructorStandings` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` WHERE   `T1`.`points` = 0 AND `T2`.`nationality` = 'Japanese' GROUP BY   `T1`.`constructorId` HAVING   COUNT(`raceId`) = 2",
            "res": 0
        },
        {
            "sql_idx": 223,
            "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN T2.time IS NOT NULL THEN T1.driverid END) * 100.0 / COUNT(DISTINCT T1.driverid)) AS completion_percentage FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN NOT `T1`.`time` IS NULL THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`raceId`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T1`.`driverId` = `T3`.`driverId` WHERE   `T3`.`nationality` = 'Japanese' AND `T2`.`year` BETWEEN 2007 AND 2009",
            "res": 0
        },
        {
            "sql_idx": 224,
            "predicted_sql": "SELECT year, AVG(TIME_TO_SEC(TIMESTAMP(time, '00:00:00'))) AS average_time_seconds FROM results WHERE time IS NOT NULL AND year < 1975 GROUP BY year;",
            "ground_truth_sql": "WITH time_in_seconds AS (SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS FLOAT) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS FLOAT) * 60) + CAST(SUBSTR(T1.time, 6, 2) AS FLOAT) + CAST(SUBSTR(T1.time, 9) AS FLOAT) / 1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE NOT T1.time IS NULL), champion_time AS (SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING NOT AVG(time_seconds) IS NULL",
            "res": 0
        },
        {
            "sql_idx": 225,
            "predicted_sql": "SELECT fastestLap FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE year = 2009 ) ORDER BY positionText = '1' DESC, fastestLap ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`fastestLap` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`year` = 2009 AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 226,
            "predicted_sql": "SELECT AVG(T.fastestLapSpeed) AS average_fastest_lap_speed FROM results T JOIN races R ON T.raceId = R.raceId WHERE R.name = 'Spanish Grand Prix' AND R.year = 2009;",
            "ground_truth_sql": "SELECT   AVG(`T1`.`fastestLapSpeed`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`year` = 2009 AND `T2`.`name` = 'Spanish Grand Prix'",
            "res": 1
        },
        {
            "sql_idx": 227,
            "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN YEAR(dob) < 1985 THEN driverId END) * 100.0 / COUNT(DISTINCT CASE WHEN YEAR(r.date) BETWEEN 2000 AND 2005 THEN driverId END)) AS percentage FROM drivers d JOIN results r ON d.driverid = r.driverid WHERE r.laps > 50;",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`T3`.`dob` AS DATETIME), '%Y') < '1985' AND `T1`.`laps` > 50       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(*) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `drivers` AS `T3`   ON `T1`.`driverId` = `T3`.`driverId` WHERE   `T2`.`year` BETWEEN 2000 AND 2005",
            "res": 0
        },
        {
            "sql_idx": 228,
            "predicted_sql": "SELECT COUNT(DISTINCT driverId) AS french_drivers_with_laptime_less_than_2_minutes FROM drivers WHERE nationality = 'French' AND driverId IN ( SELECT driverId FROM lapTimes WHERE time < '02:00:00' );",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`driverId`) FROM `drivers` AS `T1` INNER JOIN `lapTimes` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   `T1`.`nationality` = 'French'   AND (     CAST(SUBSTR(`T2`.`time`, 1, 2) AS SIGNED) * 60 + CAST(SUBSTR(`T2`.`time`, 4, 2) AS SIGNED) + CAST(SUBSTR(`T2`.`time`, 7, 2) AS DOUBLE) / 1000   ) < 120",
            "res": 0
        },
        {
            "sql_idx": 229,
            "predicted_sql": "SELECT code FROM drivers WHERE nationality = 'American';",
            "ground_truth_sql": "SELECT `code` FROM `drivers` WHERE `Nationality` = 'American'",
            "res": 1
        },
        {
            "sql_idx": 230,
            "predicted_sql": "SELECT code, COUNT(*) AS netherlandic_drivers FROM drivers WHERE nationality IN ('Netherlands', 'Dutch') ORDER BY YEAR(dob) DESC LIMIT 3;",
            "ground_truth_sql": "SELECT COUNT(*) FROM (SELECT `T1`.`nationality` FROM `drivers` AS `T1` ORDER BY `T1`.`dob` DESC LIMIT 3) AS `T3` WHERE `T3`.`nationality` = 'Dutch'",
            "res": 0
        },
        {
            "sql_idx": 231,
            "predicted_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
            "ground_truth_sql": "SELECT `driverRef` FROM `drivers` WHERE `nationality` = 'German' ORDER BY `dob` ASC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 232,
            "predicted_sql": "SELECT DISTINCT d.driverId, d.code FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE YEAR(d.dob) = 1971 AND r.fastestLapTime IS NOT NULL;",
            "ground_truth_sql": "SELECT   `T2`.`driverId`,   `T2`.`code` FROM `results` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   DATE_FORMAT(CAST(`T2`.`dob` AS DATETIME), '%Y') = '1971'   AND NOT `T1`.`fastestLapTime` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 233,
            "predicted_sql": "SELECT COUNT(*) AS disqualified_finishers FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN NOT `time` IS NULL THEN 1 ELSE 0 END) FROM `results` WHERE   `statusId` = 2 AND `raceID` < 100 AND `raceId` > 50",
            "res": 1
        },
        {
            "sql_idx": 234,
            "predicted_sql": "SELECT COUNT(*) AS times_held, location, CONCAT(lat, ',', lng) AS coordinates FROM circuits WHERE country = 'Austria';",
            "ground_truth_sql": "SELECT DISTINCT   `location`,   `lat`,   `lng` FROM `circuits` WHERE   `country` = 'Austria'",
            "res": 0
        },
        {
            "sql_idx": 235,
            "predicted_sql": "SELECT MIN(T2.year) AS youngest_driver_year, T2.name AS race_name, T2.date AS race_date, T2.time AS race_time FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverid = T3.driverid INNER JOIN races AS T2 ON T3.raceid = T2.raceid ORDER BY T1.dob DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T3`.`year`,   `T3`.`name`,   `T3`.`date`,   `T3`.`time` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T1`.`raceId` = `T3`.`raceId` WHERE   `T1`.`driverId` = (     SELECT       `driverId`     FROM `drivers`     ORDER BY       `dob` DESC     LIMIT 1   ) ORDER BY   `T3`.`date` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 236,
            "predicted_sql": "SELECT d.forename, d.surname, AVG(p.duration) AS avg_duration FROM drivers d JOIN pitstops p ON d.driverid = p.driverid WHERE d.nationality = 'German' AND YEAR(d.dob) BETWEEN 1980 AND 1985 GROUP BY d.forename, d.surname ORDER BY avg_duration ASC LIMIT 3;",
            "ground_truth_sql": "SELECT   `T2`.`forename`,   `T2`.`surname` FROM `pitStops` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` WHERE   `T2`.`nationality` = 'German'   AND DATE_FORMAT(CAST(`T2`.`dob` AS DATETIME), '%Y') BETWEEN '1980' AND '1985' GROUP BY   `T2`.`forename`,   `T2`.`surname` ORDER BY   AVG(`T1`.`duration`) LIMIT 3",
            "res": 0
        },
        {
            "sql_idx": 237,
            "predicted_sql": "SELECT d.forename, d.surname, r.time FROM drivers d JOIN results r ON d.driverid = r.driverid JOIN races rc ON r.raceid = rc.raceid WHERE rc.name = 'Canadian Grand Prix' AND rc.year = 2008 AND r.position = 1;",
            "ground_truth_sql": "SELECT   `T1`.`time` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` WHERE   `T2`.`name` = 'Canadian Grand Prix'   AND `T2`.`year` = 2008   AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 238,
            "predicted_sql": "SELECT c.constructorRef, c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' ORDER BY cs.position ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T3`.`constructorRef`,   `T3`.`url` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `constructors` AS `T3`   ON `T1`.`constructorId` = `T3`.`constructorId` WHERE   `T2`.`name` = 'Singapore Grand Prix'   AND `T2`.`year` = 2009   AND `T1`.`time` LIKE '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 240,
            "predicted_sql": "SELECT c.name AS constructor_name, c.nationality AS constructor_nationality, cr.points FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 ORDER BY cr.points DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   SUM(`T1`.`points`),   `T2`.`name`,   `T2`.`nationality` FROM `constructorResults` AS `T1` INNER JOIN `constructors` AS `T2`   ON `T1`.`constructorId` = `T2`.`constructorId` INNER JOIN `races` AS `T3`   ON `T3`.`raceid` = `T1`.`raceid` WHERE   `T3`.`name` = 'Monaco Grand Prix' AND `T3`.`year` BETWEEN 1980 AND 2010 GROUP BY   `T2`.`name` ORDER BY   SUM(`T1`.`points`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 241,
            "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T3.raceid = T2.raceid INNER JOIN circuits AS T4 ON T4.circuitid = T3.circuitid WHERE T2.position = 1 AND T3.year = 2008 AND T4.name = 'Marina Bay Street Circuit' AND T2.q3 = '0:00:00.000';",
            "ground_truth_sql": "SELECT   `T2`.`forename`,   `T2`.`surname` FROM `qualifying` AS `T1` INNER JOIN `drivers` AS `T2`   ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3`   ON `T1`.`raceid` = `T3`.`raceid` WHERE   NOT `q3` IS NULL   AND `T3`.`year` = 2008   AND `T3`.`circuitId` IN (     SELECT       `circuitId`     FROM `circuits`     WHERE       `name` = 'Marina Bay Street Circuit'   ) ORDER BY   CAST(SUBSTR(`q3`, 1, INSTR(`q3`, ':') - 1) AS SIGNED) * 60 + CAST(SUBSTR(`q3`, INSTR(`q3`, ':') + 1, INSTR(`q3`, '.') - INSTR(`q3`, ':') - 1) AS DOUBLE) + CAST(SUBSTR(`q3`, INSTR(`q3`, '.') + 1) AS DOUBLE) / 1000 ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 242,
            "predicted_sql": "SELECT d.forename, d.surname, d.nationality, r.name AS race_name FROM drivers d JOIN results r ON d.driverid = r.driverid ORDER BY d.dob DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `T1`.`forename`, `T1`.`surname`, `T1`.`nationality`, `T3`.`name` FROM `drivers` AS `T1` INNER JOIN `driverStandings` AS `T2` ON `T1`.`driverId` = `T2`.`driverId` INNER JOIN `races` AS `T3` ON `T2`.`raceId` = `T3`.`raceId` ORDER BY `T1`.`dob` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 243,
            "predicted_sql": "SELECT COUNT(*) AS accident_count FROM results JOIN status ON results.statusId = status.statusId WHERE results.raceId = ( SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' ) AND status.status = 'accident';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`driverId`) FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `status` AS `T3`   ON `T1`.`statusId` = `T3`.`statusId` WHERE   `T3`.`statusId` = 3 AND `T2`.`name` = 'Canadian Grand Prix' GROUP BY   `T1`.`driverId` ORDER BY   COUNT(`T1`.`driverId`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 244,
            "predicted_sql": "SELECT d.forename, d.surname FROM drivers d JOIN ( SELECT driverId FROM lapTimes ORDER BY TIME(time) ASC LIMIT 20 ) AS shortest_lap ON d.driverId = shortest_lap.driverId;",
            "ground_truth_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS FLOAT) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS FLOAT) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS FLOAT) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
            "res": 0
        },
        {
            "sql_idx": 245,
            "predicted_sql": "SELECT r.name AS race_name, q.q1, q.q2, q.q3 FROM races r JOIN qualifying q ON r.raceId = q.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy' ORDER BY q.q1, q.q2, q.q3;",
            "ground_truth_sql": "WITH `fastest_lap_times` AS (   SELECT     `T1`.`raceId`,     `T1`.`FastestLapTime`,     (       CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60     ) + (       CAST(SUBSTR(         `T1`.`FastestLapTime`,         INSTR(`T1`.`FastestLapTime`, ':') + 1,         INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1       ) AS DOUBLE)     ) + (       CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000     ) AS `time_in_seconds`   FROM `results` AS `T1`   WHERE     NOT `T1`.`FastestLapTime` IS NULL ) SELECT   `T1`.`FastestLapTime` AS `lap_record` FROM `results` AS `T1` INNER JOIN `races` AS `T2`   ON `T1`.`raceId` = `T2`.`raceId` INNER JOIN `circuits` AS `T3`   ON `T2`.`circuitId` = `T3`.`circuitId` INNER JOIN (   SELECT     MIN(`fastest_lap_times`.`time_in_seconds`) AS `min_time_in_seconds`   FROM `fastest_lap_times`   INNER JOIN `races` AS `T2`     ON `fastest_lap_times`.`raceId` = `T2`.`raceId`   INNER JOIN `circuits` AS `T3`     ON `T2`.`circuitId` = `T3`.`circuitId`   WHERE     `T3`.`country` = 'Italy' ) AS `T4`   ON (     CAST(SUBSTR(`T1`.`FastestLapTime`, 1, INSTR(`T1`.`FastestLapTime`, ':') - 1) AS DOUBLE) * 60   ) + (     CAST(SUBSTR(       `T1`.`FastestLapTime`,       INSTR(`T1`.`FastestLapTime`, ':') + 1,       INSTR(`T1`.`FastestLapTime`, '.') - INSTR(`T1`.`FastestLapTime`, ':') - 1     ) AS DOUBLE)   ) + (     CAST(SUBSTR(`T1`.`FastestLapTime`, INSTR(`T1`.`FastestLapTime`, '.') + 1) AS DOUBLE) / 1000   ) = `T4`.`min_time_in_seconds` LIMIT 1",
            "res": 0
        }
    ],
    "superhero": [
        {
            "sql_idx": 239,
            "predicted_sql": "SELECT s.power_name FROM superpower s JOIN hero_power hp ON s.id = hp.power_id JOIN superhero h ON hp.hero_id = h.id WHERE h.superhero_name = '3-D Man';",
            "ground_truth_sql": "SELECT  `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`  ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`  ON `T2`.`power_id` = `T3`.`id` WHERE  `T1`.`superhero_name` = '3-D Man'",
            "res": 1
        },
        {
            "sql_idx": 246,
            "predicted_sql": "SELECT COUNT(DISTINCT h.id) AS superhero_count FROM superhero h JOIN hero_power hp ON h.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND h.height_cm > 200;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Super Strength' AND `T1`.`height_cm` > 200",
            "res": 1
        },
        {
            "sql_idx": 247,
            "predicted_sql": "SELECT COUNT(DISTINCT h.id) AS superhero_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Blue' AND p.power_name = 'Agility';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` INNER JOIN `colour` AS `T4`   ON `T1`.`eye_colour_id` = `T4`.`id` WHERE   `T3`.`power_name` = 'Agility' AND `T4`.`colour` = 'Blue'",
            "res": 0
        },
        {
            "sql_idx": 248,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id WHERE c.colour IN ('Blue', 'Blond');",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T2`.`colour` = 'Blue' AND `T3`.`colour` = 'Blond'",
            "res": 0
        },
        {
            "sql_idx": 249,
            "predicted_sql": "SELECT s.superhero_name, s.height_cm FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC;",
            "ground_truth_sql": "SELECT   `superhero_name`,   `height_cm`,   RANK() OVER (ORDER BY `height_cm` DESC) AS `HeightRank` FROM `superhero` INNER JOIN `publisher`   ON `superhero`.`publisher_id` = `publisher`.`id` WHERE   `publisher`.`publisher_name` = 'Marvel Comics'",
            "res": 0
        },
        {
            "sql_idx": 250,
            "predicted_sql": "SELECT c.colour, COUNT(s.id) AS popularity FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE p.publisher_name = 'Marvel Comics' GROUP BY c.colour ORDER BY popularity DESC;",
            "ground_truth_sql": "SELECT   `colour`.`colour` AS `EyeColor`,   COUNT(`superhero`.`id`) AS `Count`,   RANK() OVER (ORDER BY COUNT(`superhero`.`id`) DESC) AS `PopularityRank` FROM `superhero` INNER JOIN `colour`   ON `superhero`.`eye_colour_id` = `colour`.`id` INNER JOIN `publisher`   ON `superhero`.`publisher_id` = `publisher`.`id` WHERE   `publisher`.`publisher_name` = 'Marvel Comics' GROUP BY   `colour`.`colour`",
            "res": 0
        },
        {
            "sql_idx": 251,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';",
            "ground_truth_sql": "SELECT   `superhero_name` FROM `superhero` AS `T1` WHERE   EXISTS(     SELECT       1     FROM `hero_power` AS `T2`     INNER JOIN `superpower` AS `T3`       ON `T2`.`power_id` = `T3`.`id`     WHERE       `T3`.`power_name` = 'Super Strength' AND `T1`.`id` = `T2`.`hero_id`   )   AND EXISTS(     SELECT       1     FROM `publisher` AS `T4`     WHERE       `T4`.`publisher_name` = 'Marvel Comics' AND `T1`.`publisher_id` = `T4`.`id`   )",
            "res": 1
        },
        {
            "sql_idx": 252,
            "predicted_sql": "SELECT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `hero_attribute` AS `T3`   ON `T1`.`id` = `T3`.`hero_id` INNER JOIN `attribute` AS `T4`   ON `T3`.`attribute_id` = `T4`.`id` WHERE   `T4`.`attribute_name` = 'Speed' ORDER BY   `T3`.`attribute_value` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 253,
            "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS gold_eyed_superheroes FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE p.publisher_name = 'Marvel Comics' AND c.colour = 'Gold';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`eye_colour_id` = `T3`.`id` WHERE   `T2`.`publisher_name` = 'Marvel Comics' AND `T3`.`colour` = 'Gold'",
            "res": 1
        },
        {
            "sql_idx": 254,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` WHERE   `T3`.`attribute_name` = 'Intelligence' ORDER BY   `T2`.`attribute_value` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 255,
            "predicted_sql": "SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.superhero_name = 'Copycat';",
            "ground_truth_sql": "SELECT   `T2`.`race` FROM `superhero` AS `T1` INNER JOIN `race` AS `T2`   ON `T1`.`race_id` = `T2`.`id` WHERE   `T1`.`superhero_name` = 'Copycat'",
            "res": 1
        },
        {
            "sql_idx": 256,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;",
            "ground_truth_sql": "SELECT   `superhero_name` FROM `superhero` AS `T1` WHERE   EXISTS(     SELECT       1     FROM `hero_attribute` AS `T2`     INNER JOIN `attribute` AS `T3`       ON `T2`.`attribute_id` = `T3`.`id`     WHERE       `T3`.`attribute_name` = 'Durability'       AND `T2`.`attribute_value` < 50       AND `T1`.`id` = `T2`.`hero_id`   )",
            "res": 1
        },
        {
            "sql_idx": 257,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Death Touch'",
            "res": 1
        },
        {
            "sql_idx": 258,
            "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS female_superheroes_with_strength_100 FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' ) AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` INNER JOIN `gender` AS `T4`   ON `T1`.`gender_id` = `T4`.`id` WHERE   `T3`.`attribute_name` = 'Strength'   AND `T2`.`attribute_value` = 100   AND `T4`.`gender` = 'Female'",
            "res": 1
        },
        {
            "sql_idx": 259,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage, COUNT(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 END) AS count_marvel_comics FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Bad'",
            "ground_truth_sql": "SELECT   (     CAST(COUNT(*) AS DOUBLE) * 100 / (       SELECT         COUNT(*)       FROM `superhero`     )   ),   CAST(SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) AS DOUBLE) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `alignment` AS `T3`   ON `T3`.`id` = `T1`.`alignment_id` WHERE   `T3`.`alignment` = 'Bad'",
            "res": 0
        },
        {
            "sql_idx": 260,
            "predicted_sql": "SELECT ( SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ) - ( SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics' ) AS difference_in_superheroes;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id`",
            "res": 1
        },
        {
            "sql_idx": 261,
            "predicted_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
            "ground_truth_sql": "SELECT   `id` FROM `publisher` WHERE   `publisher_name` = 'Star Trek'",
            "res": 1
        },
        {
            "sql_idx": 262,
            "predicted_sql": "SELECT COUNT(*) AS total_superheroes_without_full_name FROM superhero WHERE full_name IS NULL;",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `superhero` WHERE   `full_name` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 263,
            "predicted_sql": "SELECT AVG(s.weight_kg) AS average_weight FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Female';",
            "ground_truth_sql": "SELECT   AVG(`T1`.`weight_kg`) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` WHERE   `T2`.`gender` = 'Female'",
            "res": 1
        },
        {
            "sql_idx": 264,
            "predicted_sql": "SELECT DISTINCT s.power_name FROM superpower s JOIN hero_power hp ON s.id = hp.power_id JOIN superhero h ON hp.hero_id = h.id JOIN gender g ON h.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5;",
            "ground_truth_sql": "SELECT   `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T3`.`id` = `T2`.`power_id` INNER JOIN `gender` AS `T4`   ON `T4`.`id` = `T1`.`gender_id` WHERE   `T4`.`gender` = 'Male' LIMIT 5",
            "res": 1
        },
        {
            "sql_idx": 265,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.height_cm BETWEEN 170 AND 190 AND a.attribute_name = 'Eye Color' AND ha.attribute_value = 0;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`height_cm` BETWEEN 170 AND 190 AND `T2`.`colour` = 'No Colour'",
            "res": 0
        },
        {
            "sql_idx": 266,
            "predicted_sql": "SELECT c.colour FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE r.race = 'human' AND s.height_cm = 185;",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`colour` FROM `superhero` AS `T1` INNER JOIN `race` AS `T2`   ON `T1`.`race_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T1`.`height_cm` = 185 AND `T2`.`race` = 'Human'",
            "res": 1
        },
        {
            "sql_idx": 267,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180;",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`height_cm` BETWEEN 150 AND 180",
            "res": 0
        },
        {
            "sql_idx": 268,
            "predicted_sql": "SELECT superhero_name FROM superhero WHERE gender_id = ( SELECT id FROM gender WHERE gender = 'Male' ) AND weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero );",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` WHERE   `T2`.`gender` = 'Male'   AND `T1`.`weight_kg` * 100 > (     SELECT       AVG(`weight_kg`)     FROM `superhero`   ) * 79",
            "res": 1
        },
        {
            "sql_idx": 269,
            "predicted_sql": "SELECT s.power_name FROM superpower s JOIN hero_power hp ON s.id = hp.power_id WHERE hp.hero_id = 1;",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`power_name` FROM `hero_power` AS `T1` INNER JOIN `superpower` AS `T2`   ON `T1`.`power_id` = `T2`.`id` WHERE   `T1`.`hero_id` = 1",
            "res": 1
        },
        {
            "sql_idx": 270,
            "predicted_sql": "SELECT COUNT(DISTINCT hp.hero_id) AS hero_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Stealth';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`hero_id`) FROM `hero_power` AS `T1` INNER JOIN `superpower` AS `T2`   ON `T1`.`power_id` = `T2`.`id` WHERE   `T2`.`power_name` = 'Stealth'",
            "res": 1
        },
        {
            "sql_idx": 271,
            "predicted_sql": "SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `T1`.`full_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2` ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3` ON `T2`.`attribute_id` = `T3`.`id` WHERE `T3`.`attribute_name` = 'Strength' ORDER BY `T2`.`attribute_value` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 272,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics' ORDER BY h.attribute_value DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T3`.`id` = `T2`.`attribute_id` INNER JOIN `publisher` AS `T4`   ON `T4`.`id` = `T1`.`publisher_id` WHERE   `T4`.`publisher_name` = 'Dark Horse Comics'   AND `T3`.`attribute_name` = 'Durability' ORDER BY   `T2`.`attribute_value` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 273,
            "predicted_sql": "SELECT s.eye_colour_id AS eyes, s.hair_colour_id AS hair, s.skin_colour_id AS skin_colour FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Dark Horse Comics' AND s.gender_id = ( SELECT id FROM gender WHERE gender = 'Female' );",
            "ground_truth_sql": "SELECT   `T1`.`eye_colour_id`,   `T1`.`hair_colour_id`,   `T1`.`skin_colour_id` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T2`.`id` = `T1`.`publisher_id` INNER JOIN `gender` AS `T3`   ON `T3`.`id` = `T1`.`gender_id` WHERE   `T2`.`publisher_name` = 'Dark Horse Comics' AND `T3`.`gender` = 'Female'",
            "res": 1
        },
        {
            "sql_idx": 274,
            "predicted_sql": "SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id;",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name`,   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`eye_colour_id` = `T1`.`hair_colour_id`   AND `T1`.`eye_colour_id` = `T1`.`skin_colour_id`",
            "res": 1
        },
        {
            "sql_idx": 275,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.skin_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' ) THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.id)) AS percentage FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T3`.`colour` = 'Blue' THEN `T1`.`id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`skin_colour_id` = `T3`.`id` WHERE   `T2`.`gender` = 'Female'",
            "res": 0
        },
        {
            "sql_idx": 276,
            "predicted_sql": "SELECT COUNT(DISTINCT hp.power_id) AS number_of_powers FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.superhero_name = 'Amazo';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`power_id`) FROM `hero_power` AS `T1` INNER JOIN `superhero` AS `T2`   ON `T1`.`hero_id` = `T2`.`id` WHERE   `T2`.`superhero_name` = 'Amazo'",
            "res": 1
        },
        {
            "sql_idx": 277,
            "predicted_sql": "SELECT s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber';",
            "ground_truth_sql": "SELECT   `T1`.`height_cm` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T2`.`colour` = 'Amber'",
            "res": 1
        },
        {
            "sql_idx": 278,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id WHERE c.colour = 'Black';",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` AND `T1`.`hair_colour_id` = `T2`.`id` WHERE   `T2`.`colour` = 'Black'",
            "res": 1
        },
        {
            "sql_idx": 279,
            "predicted_sql": "SELECT superhero_name FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' );",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `alignment` AS `T2`   ON `T1`.`alignment_id` = `T2`.`id` WHERE   `T2`.`alignment` = 'Neutral'",
            "res": 1
        },
        {
            "sql_idx": 280,
            "predicted_sql": "SELECT COUNT(DISTINCT h.id) AS hero_count FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE a.attribute_name = 'Strength' AND ha.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' );",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`hero_id`) FROM `hero_attribute` AS `T1` INNER JOIN `attribute` AS `T2`   ON `T1`.`attribute_id` = `T2`.`id` WHERE   `T2`.`attribute_name` = 'Strength'   AND `T1`.`attribute_value` = (     SELECT       MAX(`attribute_value`)     FROM `hero_attribute`   )",
            "res": 0
        },
        {
            "sql_idx": 281,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T1.gender = 'Female' THEN 1 END) * 100.0 / COUNT(T1.publisher_id)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' AND `T3`.`gender` = 'Female' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE NULL END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` INNER JOIN `gender` AS `T3`   ON `T1`.`gender_id` = `T3`.`id` ",
            "res": 0
        },
        {
            "sql_idx": 282,
            "predicted_sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler' ) AS weight_difference;",
            "ground_truth_sql": "SELECT   (     SELECT       `weight_kg`     FROM `superhero`     WHERE       `full_name` LIKE 'Emil Blonsky'   ) - (     SELECT       `weight_kg`     FROM `superhero`     WHERE       `full_name` LIKE 'Charles Chandler'   ) AS `CALCULATE`",
            "res": 1
        },
        {
            "sql_idx": 283,
            "predicted_sql": "SELECT AVG(height_cm) AS average_height FROM superhero;",
            "ground_truth_sql": "SELECT   CAST(SUM(`height_cm`) AS DOUBLE) / COUNT(`id`) FROM `superhero`",
            "res": 0
        },
        {
            "sql_idx": 284,
            "predicted_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination';",
            "ground_truth_sql": "SELECT   `T3`.`power_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T1`.`superhero_name` = 'Abomination'",
            "res": 1
        },
        {
            "sql_idx": 285,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2` ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3` ON `T2`.`attribute_id` = `T3`.`id`WHERE `T3`.`attribute_name` = 'Speed' AND `T2`.`attribute_value` = (SELECT MAX(`attribute_value`) FROM `hero_attribute` AS `T2b` WHERE `T2b`.`attribute_id` = `T3`.`id` ) LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 286,
            "predicted_sql": "SELECT a.attribute_name, ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = '3-D Man';",
            "ground_truth_sql": "SELECT   `T3`.`attribute_name`,   `T2`.`attribute_value` FROM `superhero` AS `T1` INNER JOIN `hero_attribute` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `attribute` AS `T3`   ON `T2`.`attribute_id` = `T3`.`id` WHERE   `T1`.`superhero_name` = '3-D Man'",
            "res": 1
        },
        {
            "sql_idx": 287,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id AND s.hair_colour_id = c.id WHERE c.colour IN ('Blue', 'Brown');",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`hair_colour_id` = `T3`.`id` WHERE   `T2`.`colour` = 'Blue' AND `T3`.`colour` = 'Brown'",
            "res": 0
        },
        {
            "sql_idx": 288,
            "predicted_sql": "SELECT T.publisher_name FROM publisher AS T JOIN superhero AS T2 ON T.id = T2.publisher_id WHERE T2.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
            "ground_truth_sql": "SELECT   `T2`.`publisher_name` FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id` WHERE   `T1`.`superhero_name` IN ('Hawkman', 'Karate Kid', 'Speedy')",
            "res": 1
        },
        {
            "sql_idx": 289,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.id)) AS percentage FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue';",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`colour` = 'Blue' THEN 1 ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id`",
            "res": 0
        },
        {
            "sql_idx": 290,
            "predicted_sql": "SELECT SUM(CASE WHEN T.gender_id = 1 THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN T.gender_id = 2 THEN 1 ELSE 0 END) AS female_count, CAST(SUM(CASE WHEN T.gender_id = 1 THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / SUM(CASE WHEN T.gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero T;",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T2`.`gender` = 'Male' THEN `T1`.`id` ELSE NULL END) AS DOUBLE) / COUNT(CASE WHEN `T2`.`gender` = 'Female' THEN `T1`.`id` ELSE NULL END) FROM `superhero` AS `T1` INNER JOIN `gender` AS `T2`   ON `T1`.`gender_id` = `T2`.`id`",
            "res": 0
        },
        {
            "sql_idx": 291,
            "predicted_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.full_name = 'Karen Beecher-Duncan';",
            "ground_truth_sql": "SELECT   `T2`.`colour` FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`full_name` = 'Karen Beecher-Duncan'",
            "res": 1
        },
        {
            "sql_idx": 292,
            "predicted_sql": "SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`id` = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`id` = 1 THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `colour` AS `T2`   ON `T1`.`eye_colour_id` = `T2`.`id` WHERE   `T1`.`weight_kg` = 0 OR `T1`.`weight_kg` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 293,
            "predicted_sql": "SELECT COUNT(*) AS green_skinned_villains_count FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN colour c ON s.skin_colour_id = c.id WHERE a.alignment = 'Bad' AND c.colour = 'Green';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `superhero` AS `T1` INNER JOIN `alignment` AS `T2`   ON `T1`.`alignment_id` = `T2`.`id` INNER JOIN `colour` AS `T3`   ON `T1`.`skin_colour_id` = `T3`.`id` WHERE   `T2`.`alignment` = 'Bad' AND `T3`.`colour` = 'Green'",
            "res": 1
        },
        {
            "sql_idx": 294,
            "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower p ON hp.power_id = p.id WHERE p.power_name = 'Wind Control' ORDER BY s.superhero_name ASC;",
            "ground_truth_sql": "SELECT   `T1`.`superhero_name` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` WHERE   `T3`.`power_name` = 'Wind Control' ORDER BY   `T1`.`superhero_name`",
            "res": 1
        },
        {
            "sql_idx": 295,
            "predicted_sql": "SELECT g.gender FROM gender g JOIN superhero s ON g.id = s.gender_id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Phoenix Force';",
            "ground_truth_sql": "SELECT   `T4`.`gender` FROM `superhero` AS `T1` INNER JOIN `hero_power` AS `T2`   ON `T1`.`id` = `T2`.`hero_id` INNER JOIN `superpower` AS `T3`   ON `T2`.`power_id` = `T3`.`id` INNER JOIN `gender` AS `T4`   ON `T1`.`gender_id` = `T4`.`id` WHERE   `T3`.`power_name` = 'Phoenix Force'",
            "res": 1
        },
        {
            "sql_idx": 296,
            "predicted_sql": "SELECT ( SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics' ) - ( SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ) AS difference_in_superheroes;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T2`.`publisher_name` = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN `T2`.`publisher_name` = 'Marvel Comics' THEN 1 ELSE 0 END) FROM `superhero` AS `T1` INNER JOIN `publisher` AS `T2`   ON `T1`.`publisher_id` = `T2`.`id`",
            "res": 1
        }
    ],
    "codebase_community": [
        {
            "sql_idx": 297,
            "predicted_sql": "SELECT DisplayName, MAX(Reputation) AS HighestReputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName;",
            "ground_truth_sql": "SELECT   `DisplayName` FROM `users` WHERE   `DisplayName` IN ('Harlan', 'Jarrod Dixon')   AND `Reputation` = (     SELECT       MAX(`Reputation`)     FROM `users`     WHERE       `DisplayName` IN ('Harlan', 'Jarrod Dixon')   )",
            "res": 0
        },
        {
            "sql_idx": 298,
            "predicted_sql": "SELECT DisplayName FROM users WHERE YEAR(CreationDate) = 2011;",
            "ground_truth_sql": "SELECT   `DisplayName` FROM `users` WHERE   DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2011'",
            "res": 1
        },
        {
            "sql_idx": 299,
            "predicted_sql": "SELECT COUNT(*) AS NumberOfUsers FROM users WHERE LastAccessDate > '2014-09-01';",
            "ground_truth_sql": "SELECT   COUNT(`Id`) FROM `users` WHERE   DATE(`LastAccessDate`) > '2014-09-01'",
            "res": 0
        },
        {
            "sql_idx": 300,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Eliciting priors from experts';",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Eliciting priors from experts'",
            "res": 1
        },
        {
            "sql_idx": 301,
            "predicted_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE OwnerDisplayName = 'csgillespie';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T2`.`DisplayName` = 'csgillespie'",
            "res": 0
        },
        {
            "sql_idx": 302,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Examples for teaching: Correlation does not mean causation' ORDER BY ph.CreationDate DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`LastEditorUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Examples for teaching: Correlation does not mean causation'",
            "res": 0
        },
        {
            "sql_idx": 303,
            "predicted_sql": "SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score > 19;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Score` >= 20 AND `T2`.`Age` > 65",
            "res": 1
        },
        {
            "sql_idx": 304,
            "predicted_sql": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';",
            "ground_truth_sql": "SELECT   `T2`.`Body` FROM `tags` AS `T1` INNER JOIN `posts` AS `T2`   ON `T2`.`Id` = `T1`.`ExcerptPostId` WHERE   `T1`.`TagName` = 'bayesian'",
            "res": 1
        },
        {
            "sql_idx": 305,
            "predicted_sql": "SELECT AVG(p.Score) AS AverageScore FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';",
            "ground_truth_sql": "SELECT   AVG(`T1`.`Score`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T2`.`DisplayName` = 'csgillespie'",
            "res": 1
        },
        {
            "sql_idx": 306,
            "predicted_sql": "SELECT (COUNT(CASE WHEN u.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS ElderUserPercentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 5;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Age` > 65 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Score` > 5",
            "res": 0
        },
        {
            "sql_idx": 307,
            "predicted_sql": "SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.CreationDate = '2014-04-23 20:29:39' AND c.UserId = 3025;",
            "ground_truth_sql": "SELECT   `T1`.`FavoriteCount` FROM `posts` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` WHERE   `T2`.`CreationDate` = '2014-04-23 20:29:39.0' AND `T2`.`UserId` = 3025",
            "res": 1
        },
        {
            "sql_idx": 308,
            "predicted_sql": "SELECT p.ClosedDate IS NULL AS well_finished FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.CreationDate = '2013-07-12 09:08:18.0' AND c.UserId = 23853;",
            "ground_truth_sql": "SELECT   CASE     WHEN `T2`.`ClosedDate` IS NULL     THEN 'NOT well-finished'     ELSE 'well-finished'   END AS `resylt` FROM `comments` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T1`.`UserId` = 23853 AND `T1`.`CreationDate` = '2013-07-12 09:08:18.0'",
            "res": 0
        },
        {
            "sql_idx": 309,
            "predicted_sql": "SELECT COUNT(*) AS NumberOfPosts FROM posts WHERE OwnerDisplayName = 'Tiago Pasqualini';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`DisplayName` = 'Tiago Pasqualini'",
            "res": 0
        },
        {
            "sql_idx": 310,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.Id = 6347;",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Id` = 6347",
            "res": 1
        },
        {
            "sql_idx": 311,
            "predicted_sql": "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount, (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount, (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS PostToVoteRatio",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT `T2`.`Id`) AS DOUBLE) / COUNT(DISTINCT `T1`.`Id`) FROM `votes` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`UserId` = `T2`.`OwnerUserId` WHERE   `T1`.`UserId` = 24",
            "res": 0
        },
        {
            "sql_idx": 312,
            "predicted_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
            "ground_truth_sql": "SELECT   `ViewCount` FROM `posts` WHERE   `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
            "res": 1
        },
        {
            "sql_idx": 313,
            "predicted_sql": "SELECT Text FROM comments WHERE Score = 17;",
            "ground_truth_sql": "SELECT   `Text` FROM `comments` WHERE   `Score` = 17",
            "res": 1
        },
        {
            "sql_idx": 314,
            "predicted_sql": "SELECT UserDisplayName FROM comments WHERE Text = 'thank you user93!';",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Text` = 'thank you user93!'",
            "res": 0
        },
        {
            "sql_idx": 315,
            "predicted_sql": "SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?'",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName`,   `T1`.`Reputation` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T2`.`Title` = 'Understanding what Dassault iSight is doing?'",
            "res": 1
        },
        {
            "sql_idx": 316,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Open source tools for visualizing multi-dimensional data';",
            "ground_truth_sql": "SELECT   `T2`.`DisplayName` FROM `posts` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE   `T1`.`Title` = 'Open source tools for visualizing multi-dimensional data?'",
            "res": 0
        },
        {
            "sql_idx": 317,
            "predicted_sql": "SELECT c.Text, c.CreationDate, c.UserId, c.UserDisplayName FROM comments c JOIN postHistory ph ON c.PostId = ph.PostId WHERE ph.Text LIKE '%Why square the difference instead of taking the absolute value in standard deviation?'",
            "ground_truth_sql": "SELECT   `T2`.`Comment` FROM `posts` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` WHERE   `T1`.`Title` = 'Why square the difference instead of taking the absolute value in standard deviation?'",
            "res": 0
        },
        {
            "sql_idx": 318,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN votes v ON u.Id = v.UserId JOIN posts p ON v.PostId = p.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%'",
            "ground_truth_sql": "SELECT   `T3`.`DisplayName`,   `T1`.`Title` FROM `posts` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` INNER JOIN `users` AS `T3`   ON `T3`.`Id` = `T2`.`UserId` WHERE   `T2`.`BountyAmount` = 50 AND `T1`.`Title` LIKE '%variance%'",
            "res": 0
        },
        {
            "sql_idx": 319,
            "predicted_sql": "SELECT AVG(p.ViewCount) AS AverageViewCount, p.Title, c.Text AS Comment FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Tags LIKE '%<humor>%' GROUP BY p.Title, c.Text;",
            "ground_truth_sql": "SELECT AVG(T2.ViewCount) AS average_view_count, T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text",
            "res": 0
        },
        {
            "sql_idx": 320,
            "predicted_sql": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;",
            "ground_truth_sql": "SELECT   COUNT(`UserId`) FROM (   SELECT     `UserId`,     COUNT(`Name`) AS `num`   FROM `badges`   GROUP BY     `UserId` ) AS `T` WHERE   `T`.`num` > 5",
            "res": 0
        },
        {
            "sql_idx": 321,
            "predicted_sql": "SELECT u.Id AS UserId, u.DisplayName FROM users u JOIN ( SELECT ph.PostId, COUNT(ph.Id) AS HistoryCount FROM postHistory ph GROUP BY ph.PostId HAVING HistoryCount = 1 ) ph ON u.Id = ph.PostId JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000;",
            "ground_truth_sql": "SELECT   `T2`.`UserId` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T3`.`ViewCount` >= 1000 GROUP BY   `T2`.`UserId` HAVING   COUNT(DISTINCT `T2`.`PostHistoryTypeId`) = 1",
            "res": 0
        },
        {
            "sql_idx": 322,
            "predicted_sql": "SELECT (COUNT(CASE WHEN YEAR(b.Date) = 2010 THEN 1 END) * 100.0 / COUNT(b.Name)) - (COUNT(CASE WHEN YEAR(b.Date) = 2011 THEN 1 END) * 100.0 / COUNT(b.Name)) AS percentage_difference FROM badges b WHERE b.Name = 'Student';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2010' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`) - CAST(SUM(CASE WHEN DATE_FORMAT(CAST(`Date` AS DATETIME), '%Y') = '2011' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`Id`) FROM `badges` WHERE   `Name` = 'Student'",
            "res": 0
        },
        {
            "sql_idx": 323,
            "predicted_sql": "SELECT AVG(u.UpVotes) AS average_up_votes, AVG(u.Age) AS average_user_age FROM users u JOIN ( SELECT UserId FROM posts GROUP BY UserId HAVING COUNT(Id) > 10 ) AS filtered_users ON u.Id = filtered_users.UserId;",
            "ground_truth_sql": "SELECT   AVG(`T1`.`UpVotes`),   AVG(`T1`.`Age`) FROM `users` AS `T1` INNER JOIN (   SELECT     `OwnerUserId`,     COUNT(*) AS `post_count`   FROM `posts`   GROUP BY     `OwnerUserId`   HAVING     `post_count` > 10 ) AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId`",
            "res": 0
        },
        {
            "sql_idx": 324,
            "predicted_sql": "SELECT SUM(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 ELSE 0 END) AS votes_2010, SUM(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 ELSE 0 END) AS votes_2011, SUM(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 ELSE 0 END) * 1.0 / SUM(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 ELSE 0 END) AS ratio FROM votes;",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2010'       THEN 1       ELSE 0     END   ) AS DOUBLE) / SUM(     CASE       WHEN DATE_FORMAT(CAST(`CreationDate` AS DATETIME), '%Y') = '2011'       THEN 1       ELSE 0     END   ) FROM `votes`",
            "res": 0
        },
        {
            "sql_idx": 325,
            "predicted_sql": "SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`PostId` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T1`.`DisplayName` = 'slashnick' ORDER BY   `T3`.`AnswerCount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 326,
            "predicted_sql": "SELECT p.OwnerUserId, u.DisplayName, SUM(p.ViewCount) AS TotalViewCount FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY p.OwnerUserId, u.DisplayName ORDER BY TotalViewCount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T2`.`PostId` = `T3`.`Id` WHERE   `T1`.`DisplayName` = 'Harvey Motulsky' OR `T1`.`DisplayName` = 'Noah Snyder' GROUP BY   `T1`.`DisplayName` ORDER BY   SUM(`T3`.`ViewCount`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 327,
            "predicted_sql": "SELECT DISTINCT T1.Tags FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Mark Meckes' AND T1.CommentCount = 0",
            "ground_truth_sql": "SELECT   `T3`.`Tags` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T3`.`Id` = `T2`.`PostId` WHERE   `T1`.`DisplayName` = 'Mark Meckes' AND `T3`.`CommentCount` = 0",
            "res": 1
        },
        {
            "sql_idx": 328,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T2.TagName = 'r' THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.Id)) AS percentage FROM posts AS T1 INNER JOIN postTags AS T2 ON T1.Id = T2.PostId WHERE T1.OwnerUserId = 0;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T3`.`TagName` = 'r' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `tags` AS `T3`   ON `T3`.`ExcerptPostId` = `T2`.`PostId` WHERE   `T1`.`DisplayName` = 'Community'",
            "res": 0
        },
        {
            "sql_idx": 329,
            "predicted_sql": "SELECT SUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - SUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS difference_in_view_count FROM posts p JOIN users u ON p.OwnerUserId = u.Id;",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`DisplayName` = 'Mornington' THEN `T3`.`ViewCount` ELSE 0 END) - SUM(CASE WHEN `T1`.`DisplayName` = 'Amos' THEN `T3`.`ViewCount` ELSE 0 END) AS `diff` FROM `users` AS `T1` INNER JOIN `postHistory` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` INNER JOIN `posts` AS `T3`   ON `T3`.`Id` = `T2`.`PostId`",
            "res": 0
        },
        {
            "sql_idx": 330,
            "predicted_sql": "SELECT AVG(monthly_count) AS average_monthly_links FROM ( SELECT COUNT(*) AS monthly_count FROM postLinks WHERE YEAR(CreationDate) = 2010 GROUP BY MONTH(CreationDate) ) AS monthly_counts;",
            "ground_truth_sql": "SELECT   CAST(COUNT(`T1`.`Id`) AS DOUBLE) / 12 FROM `postLinks` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T2`.`AnswerCount` <= 2   AND DATE_FORMAT(CAST(`T1`.`CreationDate` AS DATETIME), '%Y') = '2010'",
            "res": 0
        },
        {
            "sql_idx": 331,
            "predicted_sql": "SELECT MIN(v.CreationDate) AS FirstVoteDate FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';",
            "ground_truth_sql": "SELECT   `T2`.`CreationDate` FROM `users` AS `T1` INNER JOIN `votes` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T1`.`DisplayName` = 'chl' ORDER BY   `T2`.`CreationDate` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 332,
            "predicted_sql": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `badges` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Name` = 'Autobiographer' ORDER BY   `T2`.`Date` LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 333,
            "predicted_sql": "SELECT COUNT(DISTINCT u.Id) AS NumberOfUsers FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`Location` = 'United Kingdom' AND `T2`.`FavoriteCount` >= 4",
            "res": 0
        },
        {
            "sql_idx": 334,
            "predicted_sql": "SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`Id`,   `T2`.`Title` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   `T1`.`DisplayName` = 'Harvey Motulsky' ORDER BY   `T2`.`ViewCount` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 335,
            "predicted_sql": "SELECT p.Id AS PostId, p.OwnerDisplayName FROM posts p WHERE YEAR(p.CreationDate) = 2010 ORDER BY p.FavoriteCount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`OwnerUserId`,   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` WHERE   DATE_FORMAT(CAST(`T1`.`CreationDate` AS DATETIME), '%Y') = '2010' ORDER BY   `T2`.`FavoriteCount` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 336,
            "predicted_sql": "SELECT (COUNT(CASE WHEN u.Reputation > 1000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE YEAR(p.CreationDate) = 2011;",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN DATE_FORMAT(CAST(`T2`.`CreaionDate` AS DATETIME), '%Y') = '2011'       AND `T1`.`Reputation` > 1000       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId`",
            "res": 0
        },
        {
            "sql_idx": 337,
            "predicted_sql": "SELECT SUM(p.ViewCount) AS TotalViews, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets' ORDER BY p.LasActivityDate DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`ViewCount`,   `T3`.`DisplayName` FROM `postHistory` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` INNER JOIN `users` AS `T3`   ON `T2`.`LastEditorUserId` = `T3`.`Id` WHERE   `T1`.`Text` = 'Computer Game Datasets'",
            "res": 0
        },
        {
            "sql_idx": 338,
            "predicted_sql": "SELECT MAX(p.Score) AS HighestScorePostId, SUM(c.CommentCount) AS TotalComments FROM posts p JOIN comments c ON p.Id = c.PostId WHERE p.Score = ( SELECT MAX(Score) FROM posts );",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`Id`) FROM `posts` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`PostId` GROUP BY   `T1`.`Id` ORDER BY   `T1`.`Score` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 339,
            "predicted_sql": "SELECT c.Text, u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10;",
            "ground_truth_sql": "SELECT   `T3`.`Text`,   `T1`.`DisplayName` FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` INNER JOIN `comments` AS `T3`   ON `T2`.`Id` = `T3`.`PostId` WHERE   `T2`.`Title` = 'Analysing wind data with R' ORDER BY   `T1`.`CreationDate` DESC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 340,
            "predicted_sql": "SELECT (COUNT(CASE WHEN p.Score > 50 THEN 1 END) * 100.0 / COUNT(p.Id)) AS Percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Reputation = ( SELECT MAX(Reputation) FROM users )",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`Score` > 50 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`Id` = `T2`.`OwnerUserId` INNER JOIN (   SELECT     MAX(`Reputation`) AS `max_reputation`   FROM `users` ) AS `T3`   ON `T1`.`Reputation` = `T3`.`max_reputation`",
            "res": 0
        },
        {
            "sql_idx": 341,
            "predicted_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",
            "ground_truth_sql": "SELECT   `ExcerptPostId`,   `WikiPostId` FROM `tags` WHERE   `TagName` = 'sample'",
            "res": 1
        },
        {
            "sql_idx": 342,
            "predicted_sql": "SELECT u.Reputation, u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'fine, you win :)';",
            "ground_truth_sql": "SELECT   `T2`.`Reputation`,   `T2`.`UpVotes` FROM `comments` AS `T1` INNER JOIN `users` AS `T2`   ON `T1`.`UserId` = `T2`.`Id` WHERE   `T1`.`Text` = 'fine, you win :)'",
            "res": 1
        },
        {
            "sql_idx": 343,
            "predicted_sql": "SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `Text` FROM `comments` WHERE   `PostId` IN (     SELECT       `Id`     FROM `posts`     WHERE       `ViewCount` BETWEEN 100 AND 150   ) ORDER BY   `Score` DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 344,
            "predicted_sql": "SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CommentCount = 1 AND c.Score = 0;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `comments` AS `T1` INNER JOIN `posts` AS `T2`   ON `T1`.`PostId` = `T2`.`Id` WHERE   `T2`.`CommentCount` = 1 AND `T2`.`Score` = 0",
            "res": 0
        },
        {
            "sql_idx": 345,
            "predicted_sql": "SELECT (COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`UpVotes` = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`Id`) AS `per` FROM `users` AS `T1` INNER JOIN `comments` AS `T2`   ON `T1`.`Id` = `T2`.`UserId` WHERE   `T2`.`Score` BETWEEN 5 AND 10",
            "res": 0
        }
    ],
    "card_games": [
        {
            "sql_idx": 346,
            "predicted_sql": "SELECT * FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   NOT `cardKingdomFoilId` IS NULL AND NOT `cardKingdomId` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 347,
            "predicted_sql": "SELECT c.name FROM cards c WHERE c.borderColor = 'borderless' AND c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL;",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   `borderColor` = 'borderless'   AND (     `cardKingdomId` IS NULL OR `cardKingdomId` IS NULL   )",
            "res": 0
        },
        {
            "sql_idx": 348,
            "predicted_sql": "SELECT c.name FROM cards c JOIN legalities l ON c.id = l.id WHERE c.rarity = 'mythic' AND l.status = 'Banned' AND l.format = 'gladiator';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`id` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`format` = 'gladiator'   AND `T2`.`status` = 'Banned'   AND `T1`.`rarity` = 'mythic'",
            "res": 0
        },
        {
            "sql_idx": 349,
            "predicted_sql": "SELECT DISTINCT t1.status FROM legalities t1 INNER JOIN cards t2 ON t2.uuid = t1.uuid WHERE t2.types = 'Artifact' AND t2.side IS NULL AND t1.format = 'vintage'",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`status` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`type` = 'Artifact' AND `T2`.`format` = 'vintage' AND `T1`.`side` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 350,
            "predicted_sql": "SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.id = l.id WHERE l.format = 'commander' AND (c.power = '*' OR c.power IS NULL) AND l.status = 'Legal';",
            "ground_truth_sql": "SELECT   `T1`.`id`,   `T1`.`artist` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`status` = 'Legal'   AND `T2`.`format` = 'commander'   AND (     `T1`.`power` IS NULL OR `T1`.`power` = '*'   )",
            "res": 0
        },
        {
            "sql_idx": 351,
            "predicted_sql": "SELECT c.id, c.text, r.text AS ruling_text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel';",
            "ground_truth_sql": "SELECT   `T1`.`id`,   `T2`.`text`,   `T1`.`hasContentWarning` FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`artist` = 'Stephen Daniele'",
            "res": 0
        },
        {
            "sql_idx": 352,
            "predicted_sql": "SELECT c.name AS card_name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.isPromo = 1 GROUP BY c.name, c.artist, c.isPromo ORDER BY COUNT(r.id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT `T1`.`name`, `T1`.`artist`, `T1`.`isPromo` FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2` ON `T1`.`uuid` = `T2`.`uuid` WHERE `T1`.`isPromo` = 1 AND `T1`.`artist` = ( SELECT `artist` FROM `cards` WHERE `isPromo` = 1 GROUP BY `artist` HAVING COUNT(DISTINCT `uuid`) = (SELECT MAX(card_counts.max_count) FROM (SELECT COUNT(DISTINCT `uuid`) AS max_count FROM `cards` WHERE `isPromo` = 1 GROUP BY `artist`) AS card_counts))LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 353,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) * 100 / COUNT(*) AS percentage FROM set_translations;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid`",
            "res": 0
        },
        {
            "sql_idx": 354,
            "predicted_sql": "SELECT COUNT(*) AS infinite_power_cards FROM cards WHERE power = '*';",
            "ground_truth_sql": "SELECT   COUNT(*) FROM `cards` WHERE   `power` = '*'",
            "res": 1
        },
        {
            "sql_idx": 355,
            "predicted_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
            "ground_truth_sql": "SELECT DISTINCT   `borderColor` FROM `cards` WHERE   `name` = 'Ancestor''s Chosen'",
            "res": 1
        },
        {
            "sql_idx": 356,
            "predicted_sql": "SELECT l.format FROM cards c JOIN legalities l ON c.id = l.uuid WHERE c.name = 'Benalish Knight';",
            "ground_truth_sql": "SELECT   `T2`.`format` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`name` = 'Benalish Knight'",
            "res": 0
        },
        {
            "sql_idx": 357,
            "predicted_sql": "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_borderless_cards FROM cards;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `borderColor` = 'borderless' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`id`) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 358,
            "predicted_sql": "SELECT (COUNT(CASE WHEN f.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE c.isStorySpotlight = 1;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`isStorySpotlight` = 1",
            "res": 1
        },
        {
            "sql_idx": 359,
            "predicted_sql": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';",
            "ground_truth_sql": "SELECT   COUNT(`id`) FROM `cards` WHERE   `originalType` = 'Summon - Angel' AND `subtypes` <> 'Angel'",
            "res": 0
        },
        {
            "sql_idx": 360,
            "predicted_sql": "SELECT id FROM cards WHERE duelDeck = 'a';",
            "ground_truth_sql": "SELECT   `id` FROM `cards` WHERE   `duelDeck` = 'a'",
            "res": 1
        },
        {
            "sql_idx": 361,
            "predicted_sql": "SELECT COUNT(*) AS white_border_banned_cards FROM cards WHERE borderColor = 'white' AND status = 'Banned';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`status` = 'Banned' AND `T1`.`borderColor` = 'white'",
            "res": 0
        },
        {
            "sql_idx": 362,
            "predicted_sql": "SELECT c.name FROM cards c JOIN foreign_data fd ON c.scryfallId = fd.scryfallId WHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language IS NOT NULL;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`name` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`originalType` = 'Artifact' AND `T1`.`colors` = 'B'",
            "res": 0
        },
        {
            "sql_idx": 363,
            "predicted_sql": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper';",
            "ground_truth_sql": "SELECT   `manaCost` FROM `cards` WHERE   `availability` = 'mtgo,paper'   AND `borderColor` = 'black'   AND `frameVersion` = 2003   AND `layout` = 'normal'",
            "res": 1
        },
        {
            "sql_idx": 364,
            "predicted_sql": "SELECT (COUNT(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN id END) * 100.0 / COUNT(id)) AS percentage FROM cards;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `isTextless` = 0  AND `isStorySpotlight` = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`id`) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 365,
            "predicted_sql": "SELECT COUNT(DISTINCT st.setCode) AS brazilian_portuguese_translated_sets FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Portuguese (Brasil)' AND s.block = 'Commander';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T2`.`language` = 'Portuguese (Brazil)' AND `T1`.`block` = 'Commander'",
            "res": 0
        },
        {
            "sql_idx": 366,
            "predicted_sql": "SELECT DISTINCT t1.subtypes, t1.supertypes FROM cards t1 INNER JOIN set_translations t2 ON t1.setCode = t2.setCode WHERE t2.language = 'German' AND t1.subtypes IS NOT NULL AND t1.supertypes IS NOT NULL;",
            "ground_truth_sql": "SELECT   `T1`.`subtypes`,   `T1`.`supertypes` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`language` = 'German'   AND NOT `T1`.`subtypes` IS NULL   AND NOT `T1`.`supertypes` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 367,
            "predicted_sql": "SELECT COUNT(*) FROM cards WHERE power IS NULL OR power = '*' AND text LIKE '%triggered ability%'",
            "ground_truth_sql": "SELECT   Count(DISTINCT `T1`.`id`)  FROM `cards` AS `T1` INNER JOIN `rulings` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   (     `T1`.`power` IS NULL OR `T1`.`power` = '*'   )   AND `T2`.`text` LIKE '%triggered ability%'",
            "res": 0
        },
        {
            "sql_idx": 368,
            "predicted_sql": "SELECT COUNT(DISTINCT c.id) AS card_count FROM cards c JOIN rulings r ON c.id = r.uuid JOIN legalities l ON c.id = l.id WHERE l.format = 'premodern' AND r.text = 'This is a triggered mana ability.' AND c.side IS NULL;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` INNER JOIN `rulings` AS `T3`   ON `T1`.`uuid` = `T3`.`uuid` WHERE   `T2`.`format` = 'premodern'   AND `T3`.`text` = 'This is a triggered mana ability.'   AND `T1`.`Side` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 369,
            "predicted_sql": "SELECT fd.name FROM cards c JOIN foreign_data fd ON c.id = fd.id WHERE c.artist = 'Matthew D. Wilson' AND c.borderColor = 'black' AND c.layout = 'normal' AND c.types = 'Creature' AND fd.language = 'French';",
            "ground_truth_sql": "SELECT   `name` FROM `foreign_data` WHERE   `uuid` IN (     SELECT       `uuid`     FROM `cards`     WHERE       `types` = 'Creature'       AND `layout` = 'normal'       AND `borderColor` = 'black'       AND `artist` = 'Matthew D. Wilson'   )   AND `language` = 'French'",
            "res": 0
        },
        {
            "sql_idx": 370,
            "predicted_sql": "SELECT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.block = 'Ravnica' AND s.baseSetSize = 180;",
            "ground_truth_sql": "SELECT   `T2`.`language` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T1`.`block` = 'Ravnica' AND `T1`.`baseSetSize` = 180",
            "res": 1
        },
        {
            "sql_idx": 371,
            "predicted_sql": "SELECT (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'legal';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`hasContentWarning` = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T2`.`format` = 'commander' AND `T2`.`status` = 'Legal'",
            "res": 1
        },
        {
            "sql_idx": 372,
            "predicted_sql": "SELECT (COUNT(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 END) * 100.0 / COUNT(CASE WHEN power IS NULL OR power = '*' THEN 1 END)) AS percentage FROM foreign_data;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T2`.`language` = 'French' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`power` IS NULL OR `T1`.`power` = '*'",
            "res": 0
        },
        {
            "sql_idx": 373,
            "predicted_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934;",
            "ground_truth_sql": "SELECT   `language` FROM `foreign_data` WHERE   `multiverseid` = 149934",
            "res": 1
        },
        {
            "sql_idx": 374,
            "predicted_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS DECIMAL(10, 2)) / COUNT(*) * 100 AS proportion FROM cards;",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `isTextless` = 1 AND `layout` = 'normal' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(*) FROM `cards`",
            "res": 0
        },
        {
            "sql_idx": 375,
            "predicted_sql": "SELECT DISTINCT t.language FROM set_translations t JOIN sets s ON t.setCode = s.code WHERE s.mcmName = 'Archenemy' AND t.setCode = 'ARC';",
            "ground_truth_sql": "SELECT   `T2`.`language` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T1`.`code` = `T2`.`setCode` WHERE   `T1`.`mcmName` = 'Archenemy' AND `T2`.`setCode` = 'ARC'",
            "res": 1
        },
        {
            "sql_idx": 376,
            "predicted_sql": "SELECT f.language FROM foreign_data f JOIN cards c ON f.name = c.asciiName WHERE c.name = 'A Pedra Fellwar';",
            "ground_truth_sql": "SELECT DISTINCT   `language` FROM `foreign_data` WHERE   `name` = 'A Pedra Fellwar'",
            "res": 0
        },
        {
            "sql_idx": 377,
            "predicted_sql": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `name` FROM `cards` WHERE   `name` IN ('Serra Angel', 'Shrine Keeper') ORDER BY   `convertedManaCost` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 378,
            "predicted_sql": "SELECT t.translation FROM set_translations t JOIN cards c ON t.setCode = c.setCode WHERE t.language = 'Italian' AND c.name = 'Ancestor''s Chosen';",
            "ground_truth_sql": "SELECT   `translation` FROM `set_translations` WHERE   `setCode` IN (     SELECT       `setCode`     FROM `cards`     WHERE       `name` = 'Ancestor''s Chosen'   )   AND `language` = 'Italian'",
            "res": 1
        },
        {
            "sql_idx": 379,
            "predicted_sql": "SELECT f.language, f.name, f.text FROM foreign_data f JOIN cards c ON f.name = c.asciiName WHERE c.name = 'Ancestor''s Chosen' AND f.language = 'Korean';",
            "ground_truth_sql": "SELECT   CASE     WHEN SUM(       CASE         WHEN `T2`.`language` = 'Korean' AND NOT `T2`.`translation` IS NULL         THEN 1         ELSE 0       END     ) > 0     THEN 'YES'     ELSE 'NO'   END FROM `cards` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`setCode` WHERE   `T1`.`name` = 'Ancestor''s Chosen'",
            "res": 0
        },
        {
            "sql_idx": 380,
            "predicted_sql": "SELECT COUNT(*) AS card_count FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition' AND c.artist = 'Adam Rex';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`setCode` WHERE   `T2`.`translation` = 'Hauptset Zehnte Edition' AND `T1`.`artist` = 'Adam Rex'",
            "res": 1
        },
        {
            "sql_idx": 381,
            "predicted_sql": "SELECT t2.translation FROM sets AS t1 INNER JOIN set_translations AS t2 ON t1.code = t2.setCode WHERE t1.name = 'Eighth Edition' AND t2.language = 'Chinese Simplified';",
            "ground_truth_sql": "SELECT   `T2`.`translation` FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   `T1`.`name` = 'Eighth Edition' AND `T2`.`language` = 'Chinese Simplified'",
            "res": 1
        },
        {
            "sql_idx": 382,
            "predicted_sql": "SELECT s.name AS setName FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Angel of Mercy' AND (s.mtgoCode IS NOT NULL OR s.isOnlineOnly = 1);",
            "ground_truth_sql": "SELECT   CASE WHEN NOT `T2`.`mtgoCode` IS NULL THEN 'YES' ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T1`.`name` = 'Angel of Mercy'",
            "res": 0
        },
        {
            "sql_idx": 383,
            "predicted_sql": "SELECT COUNT(DISTINCT st.id) AS italian_translated_sets FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Ice Age' AND st.language = 'Italian' AND st.translation IS NOT NULL;",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   `T1`.`block` = 'Ice Age'   AND `T2`.`language` = 'Italian'   AND NOT `T2`.`translation` IS NULL",
            "res": 1
        },
        {
            "sql_idx": 384,
            "predicted_sql": "SELECT s.isForeignOnly FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Adarkar Valkyrie';",
            "ground_truth_sql": "SELECT   CASE WHEN `isForeignOnly` = 1 THEN 'YES' ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T1`.`name` = 'Adarkar Valkyrie'",
            "res": 0
        },
        {
            "sql_idx": 385,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`id`) FROM `sets` AS `T1` INNER JOIN `set_translations` AS `T2`   ON `T2`.`setCode` = `T1`.`code` WHERE   NOT `T2`.`translation` IS NULL   AND `T1`.`baseSetSize` < 100   AND `T2`.`language` = 'Italian'",
            "res": 1
        },
        {
            "sql_idx": 386,
            "predicted_sql": "SELECT DISTINCT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' );",
            "ground_truth_sql": "SELECT   `T1`.`artist` FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Chippy'   )   OR (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Aaron Miller'   )   OR (     `T2`.`name` = 'Coldsnap' AND `T1`.`artist` = 'Jeremy Jarvis'   ) GROUP BY   `T1`.`artist`",
            "res": 1
        },
        {
            "sql_idx": 387,
            "predicted_sql": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)",
            "ground_truth_sql": "SELECT   SUM(CASE WHEN `T1`.`power` = '*' OR `T1`.`power` IS NULL THEN 1 ELSE 0 END) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap' AND `T1`.`convertedManaCost` > 5",
            "res": 1
        },
        {
            "sql_idx": 388,
            "predicted_sql": "SELECT f.flavorText FROM foreign_data f JOIN cards c ON f.name = c.name WHERE f.language = 'Italian' AND c.name = 'Ancestor''s Chosen';",
            "ground_truth_sql": "SELECT   `T2`.`flavorText` FROM `cards` AS `T1` INNER JOIN `foreign_data` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T1`.`name` = 'Ancestor''s Chosen' AND `T2`.`language` = 'Italian'",
            "res": 0
        },
        {
            "sql_idx": 389,
            "predicted_sql": "SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Italian' AND c.name = 'Coldsnap';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`text` FROM `foreign_data` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` INNER JOIN `sets` AS `T3`   ON `T3`.`code` = `T2`.`setCode` WHERE   `T3`.`name` = 'Coldsnap' AND `T1`.`language` = 'Italian'",
            "res": 0
        },
        {
            "sql_idx": 390,
            "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian' AND T1.setCode = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`name` FROM `foreign_data` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` INNER JOIN `sets` AS `T3`   ON `T3`.`code` = `T2`.`setCode` WHERE   `T3`.`name` = 'Coldsnap' AND `T1`.`language` = 'Italian' ORDER BY   `T2`.`convertedManaCost` DESC",
            "res": 0
        },
        {
            "sql_idx": 391,
            "predicted_sql": "SELECT (COUNT(CASE WHEN c.convertedManaCost = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `T1`.`convertedManaCost` = 7 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 392,
            "predicted_sql": "SELECT (COUNT(CASE WHEN cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE setCode = 'Coldsnap';",
            "ground_truth_sql": "SELECT   CAST(SUM(     CASE       WHEN NOT `T1`.`cardKingdomFoilId` IS NULL AND NOT `T1`.`cardKingdomId` IS NULL       THEN 1       ELSE 0     END   ) AS DOUBLE) * 100 / COUNT(`T1`.`id`) FROM `cards` AS `T1` INNER JOIN `sets` AS `T2`   ON `T2`.`code` = `T1`.`setCode` WHERE   `T2`.`name` = 'Coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 393,
            "predicted_sql": "SELECT format, COUNT(*) AS banned_count FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY banned_count DESC LIMIT 1;",
            "ground_truth_sql": "SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN ( SELECT format FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1 ) AS MaxBanned ON MaxBanned.format = T2.format WHERE T2.status = 'Banned'",
            "res": 0
        },
        {
            "sql_idx": 394,
            "predicted_sql": "SELECT c.name AS card_name, l.format AS banned_play_format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'Banned';",
            "ground_truth_sql": "SELECT   `T1`.`name`,   `T2`.`format` FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T1`.`edhrecRank` = 1 AND `T2`.`status` = 'Banned' GROUP BY   `T1`.`name`,   `T2`.`format`",
            "res": 1
        },
        {
            "sql_idx": 395,
            "predicted_sql": "SELECT c.name AS card_name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`name`,   CASE WHEN `T1`.`status` = 'Legal' THEN `T1`.`format` ELSE NULL END FROM `legalities` AS `T1` INNER JOIN `cards` AS `T2`   ON `T2`.`uuid` = `T1`.`uuid` WHERE   `T2`.`setCode` IN (     SELECT       `code`     FROM `sets`     WHERE       `name` = 'Hour of Devastation'   )",
            "res": 1
        },
        {
            "sql_idx": 396,
            "predicted_sql": "SELECT DISTINCT st.setCode FROM set_translations st WHERE st.language = 'Korean' AND st.setCode NOT IN ( SELECT DISTINCT st2.setCode FROM set_translations st2 WHERE st2.language = 'Japanese' );",
            "ground_truth_sql": "SELECT   `name` FROM `sets` WHERE   `code` IN (     SELECT       `setCode`     FROM `set_translations`     WHERE       `language` = 'Korean' AND NOT `language` LIKE '%Japanese%'   )",
            "res": 0
        },
        {
            "sql_idx": 397,
            "predicted_sql": "SELECT DISTINCT c.frameVersion, c.name AS card_name FROM cards c WHERE c.artist = 'Allen Williams' UNION SELECT DISTINCT l.format, l.status FROM legalities l WHERE l.status = 'Banned';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`frameVersion`,   `T1`.`name`,   CASE WHEN `T2`.`status` = 'Banned' THEN `T1`.`name` ELSE 'NO' END FROM `cards` AS `T1` INNER JOIN `legalities` AS `T2`   ON `T1`.`uuid` = `T2`.`uuid` WHERE   `T1`.`artist` = 'Allen Williams'",
            "res": 0
        }
    ],
    "toxicology": [
        {
            "sql_idx": 398,
            "predicted_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T`.`bond_type` FROM (   SELECT     `bond_type`,     COUNT(`bond_id`)   FROM `bond`   GROUP BY     `bond_type`   ORDER BY     COUNT(`bond_id`) DESC   LIMIT 1 ) AS `T`",
            "res": 1
        },
        {
            "sql_idx": 399,
            "predicted_sql": "SELECT AVG(CASE WHEN a.element = 'o' THEN 1 ELSE 0 END) AS average_oxygen_atoms FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';",
            "ground_truth_sql": "SELECT   AVG(`oxygen_count`) FROM (   SELECT     `T1`.`molecule_id`,     COUNT(`T1`.`element`) AS `oxygen_count`   FROM `atom` AS `T1`   INNER JOIN `bond` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T2`.`bond_type` = '-' AND `T1`.`element` = 'o'   GROUP BY     `T1`.`molecule_id` ) AS `oxygen_counts`",
            "res": 0
        },
        {
            "sql_idx": 400,
            "predicted_sql": "SELECT AVG(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) AS avg_single_bonded FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
            "ground_truth_sql": "SELECT   AVG(`single_bond_count`) FROM (   SELECT     `T3`.`molecule_id`,     COUNT(`T1`.`bond_type`) AS `single_bond_count`   FROM `bond` AS `T1`   INNER JOIN `atom` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   INNER JOIN `molecule` AS `T3`     ON `T3`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`bond_type` = '-' AND `T3`.`label` = '+'   GROUP BY     `T3`.`molecule_id` ) AS `subquery`",
            "res": 0
        },
        {
            "sql_idx": 401,
            "predicted_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '+';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '#' AND `T2`.`label` = '+'",
            "res": 1
        },
        {
            "sql_idx": 402,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T3.element = 'c' THEN 1 ELSE NULL END) * 100.0 / COUNT(T2.atom_id)) AS percentage FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '='",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T1`.`element` = 'c' THEN `T1`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `bond` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`bond_type` = '='",
            "res": 0
        },
        {
            "sql_idx": 403,
            "predicted_sql": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T2`.`bond_id` = 'TR004_8_9'",
            "res": 1
        },
        {
            "sql_idx": 404,
            "predicted_sql": "SELECT DISTINCT a1.element, a2.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '=';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `bond` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `connected` AS `T3`   ON `T1`.`atom_id` = `T3`.`atom_id` WHERE   `T2`.`bond_type` = '='",
            "res": 0
        },
        {
            "sql_idx": 405,
            "predicted_sql": "SELECT m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' GROUP BY m.label ORDER BY COUNT(m.label) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T`.`label` FROM (   SELECT     `T2`.`label`,     COUNT(`T2`.`molecule_id`)   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`element` = 'h'   GROUP BY     `T2`.`label`   ORDER BY     COUNT(`T2`.`molecule_id`) DESC   LIMIT 1 ) AS `t`",
            "res": 0
        },
        {
            "sql_idx": 406,
            "predicted_sql": "SELECT T3.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN ( SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.label = '-' GROUP BY T1.molecule_id ) AS T3 ON T1.molecule_id = T3.molecule_id GROUP BY T3.element ORDER BY COUNT(T3.element) ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T`.`element` FROM (   SELECT     `T1`.`element`,     COUNT(DISTINCT `T1`.`molecule_id`)   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T2`.`label` = '-'   GROUP BY     `T1`.`element`   ORDER BY     COUNT(DISTINCT `T1`.`molecule_id`) ASC   LIMIT 1 ) AS `t`",
            "res": 0
        },
        {
            "sql_idx": 407,
            "predicted_sql": "SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
            "ground_truth_sql": "SELECT   `T1`.`bond_type` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T2`.`atom_id` = 'TR004_8'   AND `T2`.`atom_id2` = 'TR004_20'   OR `T2`.`atom_id2` = 'TR004_8'   AND `T2`.`atom_id` = 'TR004_20'",
            "res": 1
        },
        {
            "sql_idx": 408,
            "predicted_sql": "SELECT COUNT(DISTINCT a.atom_id) AS distinct_atoms FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element IN ('i', 's') AND b.bond_type = '-';",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT CASE WHEN `T1`.`element` = 'i' THEN `T1`.`atom_id` ELSE NULL END) AS `iodine_nums`,   COUNT(DISTINCT CASE WHEN `T1`.`element` = 's' THEN `T1`.`atom_id` ELSE NULL END) AS `sulfur_nums` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` INNER JOIN `bond` AS `T3`   ON `T2`.`bond_id` = `T3`.`bond_id` WHERE   `T3`.`bond_type` = '-'",
            "res": 0
        },
        {
            "sql_idx": 409,
            "predicted_sql": "SELECT (COUNT(DISTINCT T1.molecule_id) - SUM(CASE WHEN T2.element = 'f' THEN 1 ELSE 0 END)) * 100.0 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T1`.`element` <> 'f' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 410,
            "predicted_sql": "SELECT SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.molecule_id) AS percent FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
            "ground_truth_sql": "SELECT   CAST(COUNT(DISTINCT CASE WHEN `T2`.`label` = '+' THEN `T2`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(DISTINCT `T2`.`molecule_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `bond` AS `T3`   ON `T2`.`molecule_id` = `T3`.`molecule_id` WHERE   `T3`.`bond_type` = '#'",
            "res": 0
        },
        {
            "sql_idx": 411,
            "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR000' ORDER BY   `T`.`element` LIMIT 3",
            "res": 0
        },
        {
            "sql_idx": 412,
            "predicted_sql": "SELECT ROUND(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id), 5) AS double_bond_percentage FROM bond WHERE molecule_id = 'TR008';",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`bond_type` = '=' THEN `T`.`bond_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`bond_id`),     5   ) FROM `bond` AS `T` WHERE   `T`.`molecule_id` = 'TR008'",
            "res": 0
        },
        {
            "sql_idx": 413,
            "predicted_sql": "SELECT ROUND(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(molecule_id), 3) AS carcinogenic_percentage FROM molecule;",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`label` = '+' THEN `T`.`molecule_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`molecule_id`),     3   ) FROM `molecule` AS `t`",
            "res": 0
        },
        {
            "sql_idx": 414,
            "predicted_sql": "SELECT ROUND(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id), 4) AS hydrogen_percentage FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR206';",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T`.`element` = 'h' THEN `T`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`atom_id`),     4   ) FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR206'",
            "res": 0
        },
        {
            "sql_idx": 415,
            "predicted_sql": "SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element`,   `T2`.`label` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`molecule_id` = 'TR060'",
            "res": 1
        },
        {
            "sql_idx": 416,
            "predicted_sql": "SELECT bond_type, carcinogenic FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE m.molecule_id = 'TR010' GROUP BY bond_type, carcinogenic ORDER BY COUNT(bond_id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T`.`bond_type` FROM (   SELECT     `T1`.`bond_type`,     COUNT(`T1`.`molecule_id`)   FROM `bond` AS `T1`   WHERE     `T1`.`molecule_id` = 'TR010'   GROUP BY     `T1`.`bond_type`   ORDER BY     COUNT(`T1`.`molecule_id`) DESC   LIMIT 1 ) AS `T`",
            "res": 0
        },
        {
            "sql_idx": 417,
            "predicted_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-' GROUP BY m.molecule_id ORDER BY m.molecule_id ASC LIMIT 3;",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '-' AND `T2`.`label` = '-' ORDER BY   `T2`.`molecule_id` LIMIT 3",
            "res": 1
        },
        {
            "sql_idx": 418,
            "predicted_sql": "SELECT COUNT(DISTINCT bond_id) AS bond_count FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`bond_id`) FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T1`.`molecule_id` = 'TR009'   AND `T2`.`atom_id` = CONCAT(`T1`.`molecule_id`, '_1')   OR `T2`.`atom_id2` = CONCAT(`T1`.`molecule_id`, '_2')",
            "res": 0
        },
        {
            "sql_idx": 419,
            "predicted_sql": "SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR001_6_9';",
            "ground_truth_sql": "SELECT   `T1`.`bond_type`,   `T2`.`atom_id`,   `T2`.`atom_id2` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` WHERE   `T2`.`bond_id` = 'TR001_6_9'",
            "res": 0
        },
        {
            "sql_idx": 420,
            "predicted_sql": "SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id LIKE 'TR%_19';",
            "ground_truth_sql": "SELECT   COUNT(`T`.`bond_id`) FROM `connected` AS `T` WHERE   SUBSTR(`T`.`atom_id`, -2) = '19'",
            "res": 1
        },
        {
            "sql_idx": 421,
            "predicted_sql": "SELECT a.element FROM atom a WHERE a.molecule_id = 'TR004';",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   `T`.`molecule_id` = 'TR004'",
            "res": 1
        },
        {
            "sql_idx": 422,
            "predicted_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.atom_id LIKE '21%' AND a.atom_id LIKE '%25' AND m.label = '+';",
            "ground_truth_sql": "SELECT DISTINCT   `T2`.`molecule_id` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   SUBSTR(`T1`.`atom_id`, -2) BETWEEN '21' AND '25' AND `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 423,
            "predicted_sql": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'p' INTERSECT SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'n';",
            "ground_truth_sql": "SELECT   `T2`.`bond_id` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T2`.`bond_id` IN (     SELECT       `T3`.`bond_id`     FROM `connected` AS `T3`     INNER JOIN `atom` AS `T4`       ON `T3`.`atom_id` = `T4`.`atom_id`     WHERE       `T4`.`element` = 'p'   )   AND `T1`.`element` = 'n'",
            "res": 1
        },
        {
            "sql_idx": 424,
            "predicted_sql": "SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id, m.label ORDER BY COUNT(b.bond_id) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`label` FROM `molecule` AS `T1` INNER JOIN (   SELECT     `T`.`molecule_id`,     COUNT(`T`.`bond_type`)   FROM `bond` AS `T`   WHERE     `T`.`bond_type` = '='   GROUP BY     `T`.`molecule_id`   ORDER BY     COUNT(`T`.`bond_type`) DESC   LIMIT 1 ) AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id`",
            "res": 0
        },
        {
            "sql_idx": 425,
            "predicted_sql": "SELECT AVG(bond_count) AS average_bond_count FROM ( SELECT COUNT(DISTINCT bond_id) AS bond_count FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'i' ) GROUP BY atom_id ) AS subquery;",
            "ground_truth_sql": "SELECT   CAST(COUNT(`T2`.`bond_id`) AS DOUBLE) / COUNT(`T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`element` = 'i'",
            "res": 1
        },
        {
            "sql_idx": 426,
            "predicted_sql": "SELECT DISTINCT a.element FROM atom a WHERE a.atom_id NOT IN ( SELECT c.atom_id FROM connected c );",
            "ground_truth_sql": "SELECT DISTINCT   `T`.`element` FROM `atom` AS `T` WHERE   NOT `T`.`element` IN (     SELECT DISTINCT       `T1`.`element`     FROM `atom` AS `T1`     INNER JOIN `connected` AS `T2`       ON `T1`.`atom_id` = `T2`.`atom_id`   )",
            "res": 0
        },
        {
            "sql_idx": 427,
            "predicted_sql": "SELECT a1.atom_id, a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#' AND a1.molecule_id = 'TR041';",
            "ground_truth_sql": "SELECT   `T2`.`atom_id`,   `T2`.`atom_id2` FROM `atom` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` INNER JOIN `bond` AS `T3`   ON `T2`.`bond_id` = `T3`.`bond_id` WHERE   `T3`.`bond_type` = '#' AND `T3`.`molecule_id` = 'TR041'",
            "res": 0
        },
        {
            "sql_idx": 428,
            "predicted_sql": "SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19';",
            "ground_truth_sql": "SELECT   `T2`.`element` FROM `connected` AS `T1` INNER JOIN `atom` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`bond_id` = 'TR144_8_19'",
            "res": 1
        },
        {
            "sql_idx": 429,
            "predicted_sql": "SELECT DISTINCT a1.element, a2.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#';",
            "ground_truth_sql": "SELECT DISTINCT   `T3`.`element` FROM `bond` AS `T1` INNER JOIN `connected` AS `T2`   ON `T1`.`bond_id` = `T2`.`bond_id` INNER JOIN `atom` AS `T3`   ON `T2`.`atom_id` = `T3`.`atom_id` WHERE   `T1`.`bond_type` = '#'",
            "res": 0
        },
        {
            "sql_idx": 430,
            "predicted_sql": "SELECT ROUND(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.bond_id), 5) AS proportion FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-';",
            "ground_truth_sql": "SELECT   ROUND(     CAST(COUNT(CASE WHEN `T2`.`label` = '+' THEN `T1`.`bond_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`bond_id`),     5   ) FROM `bond` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T1`.`bond_type` = '-'",
            "res": 0
        },
        {
            "sql_idx": 431,
            "predicted_sql": "SELECT COUNT(DISTINCT c.atom_id) AS total_atoms FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`atom_id`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` INNER JOIN `bond` AS `T3`   ON `T2`.`molecule_id` = `T3`.`molecule_id` WHERE   `T3`.`bond_type` = '#' AND `T1`.`element` IN ('p', 'br')",
            "res": 1
        },
        {
            "sql_idx": 432,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T3.element = 'cl' THEN 1 ELSE NULL END) * 100.0 / COUNT(T3.atom_id)) AS percent FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '-'",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T`.`element` = 'cl' THEN `T`.`atom_id` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T`.`atom_id`) FROM (   SELECT     `T1`.`atom_id`,     `T1`.`element`   FROM `atom` AS `T1`   INNER JOIN `molecule` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   INNER JOIN `bond` AS `T3`     ON `T2`.`molecule_id` = `T3`.`molecule_id`   WHERE     `T3`.`bond_type` = '-' ) AS `T`",
            "res": 0
        },
        {
            "sql_idx": 433,
            "predicted_sql": "SELECT a1.element, a2.element FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';",
            "ground_truth_sql": "SELECT   `T2`.`element` FROM `connected` AS `T1` INNER JOIN `atom` AS `T2`   ON `T1`.`atom_id` = `T2`.`atom_id` WHERE   `T1`.`bond_id` = 'TR001_10_11'",
            "res": 0
        },
        {
            "sql_idx": 434,
            "predicted_sql": "SELECT (COUNT(CASE WHEN a.element = 'cl' THEN 1 ELSE NULL END) * 100.0 / COUNT(m.molecule_id)) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';",
            "ground_truth_sql": "SELECT   CAST(COUNT(CASE WHEN `T1`.`element` = 'cl' THEN `T1`.`element` ELSE NULL END) AS DOUBLE) * 100 / COUNT(`T1`.`element`) FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'",
            "res": 0
        },
        {
            "sql_idx": 435,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.element) AS toxicology_element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4'",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`element` FROM `atom` AS `T1` INNER JOIN `molecule` AS `T2`   ON `T1`.`molecule_id` = `T2`.`molecule_id` WHERE   `T2`.`label` = '+'   AND SUBSTR(`T1`.`atom_id`, -1) = '4'   AND LENGTH(`T1`.`atom_id`) = 7",
            "res": 0
        },
        {
            "sql_idx": 436,
            "predicted_sql": "SELECT SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(a.atom_id) AS hydrogen_ratio, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006' GROUP BY m.label;",
            "ground_truth_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS DECIMAL(10,2)) / NULLIF(COUNT(atom_id), 0) AS ratio, label FROM SubQuery GROUP BY label",
            "res": 0
        },
        {
            "sql_idx": 437,
            "predicted_sql": "SELECT m.molecule_id FROM molecule m WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(m.molecule_id) > 5;",
            "ground_truth_sql": "SELECT   `T`.`molecule_id` FROM (   SELECT     `T1`.`molecule_id`,     COUNT(`T2`.`atom_id`)   FROM `molecule` AS `T1`   INNER JOIN `atom` AS `T2`     ON `T1`.`molecule_id` = `T2`.`molecule_id`   WHERE     `T1`.`label` = '-'   GROUP BY     `T1`.`molecule_id`   HAVING     COUNT(`T2`.`atom_id`) > 5 ) AS `t`",
            "res": 0
        }
    ],
    "california_schools": [
        {
            "sql_idx": 438,
            "predicted_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS NumberOfSchools FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.AvgScrMath > 400 AND sc.Virtual = 'F';",
            "ground_truth_sql": "SELECT  COUNT(DISTINCT `T2`.`School`) FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`  ON `T1`.`cds` = `T2`.`CDSCode` WHERE  `T2`.`Virtual` = 'F' AND `T1`.`AvgScrMath` > 400",
            "res": 0
        },
        {
            "sql_idx": 439,
            "predicted_sql": "SELECT CDSCode FROM frpm WHERE (Enrollment__K_12__ = 0 OR Enrollment__K_12__ IS NULL) AND (Enrollment__Ages_5_17__ = 0 OR Enrollment__Ages_5_17__ IS NULL) AND (Enrollment__K_12__ + Enrollment__Ages_5_17__ > 500);",
            "ground_truth_sql": "SELECT   `T2`.`CDSCode` FROM `schools` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Enrollment (K-12)` + `T2`.`Enrollment (Ages 5-17)` > 500",
            "res": 0
        },
        {
            "sql_idx": 440,
            "predicted_sql": "SELECT MAX(T2.`Percent (%) Eligible Free (Ages 5-17)`) AS highest_eligible_free_rate FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead > 500 AND T1.AvgScrMath > 500 AND T1.AvgScrWrite > 500 AND T1.NumGE1500 / T1.NumTstTakr > 0.3;",
            "ground_truth_sql": "SELECT   MAX(     CAST(`T1`.`Free Meal Count (Ages 5-17)` AS DOUBLE) / `T1`.`Enrollment (Ages 5-17)`   ) FROM `frpm` AS `T1` INNER JOIN `satscores` AS `T2`   ON `T1`.`CDSCode` = `T2`.`cds` WHERE   CAST(`T2`.`NumGE1500` AS DOUBLE) / `T2`.`NumTstTakr` > 0.3",
            "res": 0
        },
        {
            "sql_idx": 441,
            "predicted_sql": "SELECT s.CDSCode, s.CharterNum, AVG(s.AvgScrWrite) AS avg_score FROM satscores s WHERE s.AvgScrWrite > 499 GROUP BY s.CDSCode, s.CharterNum ORDER BY avg_score DESC;",
            "ground_truth_sql": "SELECT   `CharterNum`,   `AvgScrWrite`,   RANK() OVER (ORDER BY `AvgScrWrite` DESC) AS `WritingScoreRank` FROM `schools` AS `T1` INNER JOIN `satscores` AS `T2`   ON `T1`.`CDSCode` = `T2`.`cds` WHERE   `T2`.`AvgScrWrite` > 499 AND NOT `CharterNum` IS NULL",
            "res": 0
        },
        {
            "sql_idx": 442,
            "predicted_sql": "SELECT s.School, CONCAT(s.Street, ', ', s.City, ', ', s.State, ' ', s.Zip) AS FullStreetAddress FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` > 30;",
            "ground_truth_sql": "SELECT   `T1`.`School`,   `T1`.`Street` FROM `schools` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Enrollment (K-12)` - `T2`.`Enrollment (Ages 5-17)` > 30",
            "res": 0
        },
        {
            "sql_idx": 443,
            "predicted_sql": "SELECT DISTINCT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND s.`NumGE1500` >= 1500;",
            "ground_truth_sql": "SELECT   `T2`.`School Name` FROM `satscores` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   CAST(`T2`.`Free Meal Count (K-12)` AS DOUBLE) / `T2`.`Enrollment (K-12)` > 0.1   AND `T1`.`NumGE1500` > 0",
            "res": 0
        },
        {
            "sql_idx": 444,
            "predicted_sql": "SELECT DISTINCT s.School, s.FundingType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Riverside' AND f.AvgScrMath > 400;",
            "ground_truth_sql": "SELECT   `T1`.`sname`,   `T2`.`Charter Funding Type` FROM `satscores` AS `T1` INNER JOIN `frpm` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`District Name` LIKE 'Riverside%' GROUP BY   `T1`.`sname`,   `T2`.`Charter Funding Type` HAVING   CAST(SUM(`T1`.`AvgScrMath`) AS DOUBLE) / COUNT(`T1`.`cds`) > 400",
            "res": 0
        },
        {
            "sql_idx": 445,
            "predicted_sql": "SELECT s.School, CONCAT(s.Street, ', ', s.City, ', ', s.State, ' ', s.Zip) AS FullCommunicationAddress FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey' AND f.`Free Meal Count (Ages 5-17)` > 800;",
            "ground_truth_sql": "SELECT   `T1`.`School Name`,   `T2`.`Street`,   `T2`.`City`,   `T2`.`State`,   `T2`.`Zip` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Monterey'   AND `T1`.`Free Meal Count (Ages 5-17)` > 800   AND `T1`.`School Type` = 'High Schools (Public)'",
            "res": 0
        },
        {
            "sql_idx": 446,
            "predicted_sql": "SELECT s.School, s.OpenDate, s.ClosedDate, AVG(sats.AvgScrWrite) AS AverageScoreInWriting FROM schools s JOIN satscores sats ON s.CDSCode = sats.cds WHERE (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01') GROUP BY s.School, s.OpenDate, s.ClosedDate;",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`AvgScrWrite`,   `T2`.`Phone` FROM `schools` AS `T2` LEFT JOIN `satscores` AS `T1`   ON `T2`.`CDSCode` = `T1`.`cds` WHERE   DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') > '1991'   OR DATE_FORMAT(CAST(`T2`.`ClosedDate` AS DATETIME), '%Y') < '2000'",
            "res": 0
        },
        {
            "sql_idx": 447,
            "predicted_sql": "SELECT s.School, s.DOCType FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.FundingType = 'Locally Funded' AND (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > ( SELECT AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.FundingType = 'Locally Funded' )",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T2`.`DOC` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`FundingType` = 'Locally funded'   AND (     `T1`.`Enrollment (K-12)` - `T1`.`Enrollment (Ages 5-17)`   ) > (     SELECT       AVG(`T3`.`Enrollment (K-12)` - `T3`.`Enrollment (Ages 5-17)`)     FROM `frpm` AS `T3`     INNER JOIN `schools` AS `T4`       ON `T3`.`CDSCode` = `T4`.`CDSCode`     WHERE       `T4`.`FundingType` = 'Locally funded'   )",
            "res": 0
        },
        {
            "sql_idx": 448,
            "predicted_sql": "SELECT s.School, f.`Percent (%) Eligible Free (K-12)` AS EligibleFreeRate FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode ORDER BY f.`Percent (%) Eligible Free (K-12)` DESC LIMIT 10, 2;",
            "ground_truth_sql": "SELECT   CAST(`Free Meal Count (K-12)` AS DOUBLE) / `Enrollment (K-12)` FROM `frpm` ORDER BY   `Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
            "res": 0
        },
        {
            "sql_idx": 449,
            "predicted_sql": "SELECT s.School, f.`FRPM Count (K-12)`, f.`Enrollment (K-12)`, (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) AS EligibleFreeReducedMealRate FROM frpm f JOIN schools s ON f.`School Code` = s.CDSCode WHERE f.`NSLP Provision Status` = '66' ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 5;",
            "ground_truth_sql": "SELECT   CAST(`T1`.`FRPM Count (K-12)` AS DOUBLE) / `T1`.`Enrollment (K-12)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`SOC` = 66 ORDER BY   `T1`.`FRPM Count (K-12)` DESC LIMIT 5",
            "res": 0
        },
        {
            "sql_idx": 450,
            "predicted_sql": "SELECT s.Street, s.City, s.Zip, s.State FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.Percent_('% Eligible FRPM (K-12)') ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`Street`,   `T2`.`City`,   `T2`.`State`,   `T2`.`Zip` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   CAST(`T1`.`NumGE1500` AS DOUBLE) / `T1`.`NumTstTakr` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 451,
            "predicted_sql": "SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.NumGE1500 = ( SELECT MAX(NumGE1500) FROM frpm ) LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`AdmFName1`,   `T2`.`AdmLName1`,   `T2`.`AdmFName2`,   `T2`.`AdmLName2`,   `T2`.`AdmFName3`,   `T2`.`AdmLName3` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   `T1`.`NumGE1500` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 452,
            "predicted_sql": "SELECT AVG(s.NumTstTakr) AS average_test_takers FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.County = 'Fresno' AND sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
            "ground_truth_sql": "SELECT   AVG(`T1`.`NumTstTakr`) FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') = '1980'   AND `T2`.`County` = 'Fresno'",
            "res": 1
        },
        {
            "sql_idx": 453,
            "predicted_sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`Phone` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`District` = 'Fresno Unified' AND NOT `T1`.`AvgScrRead` IS NULL ORDER BY   `T1`.`AvgScrRead` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 454,
            "predicted_sql": "SELECT s.cds, s.cname, s.dname, s.sname, AVG(s.AvgScrRead) AS avg_reading_score FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE sc.Virtual = 'F' GROUP BY s.cds, s.cname, s.dname, s.sname ORDER BY s.cname, avg_reading_score DESC LIMIT 5;",
            "ground_truth_sql": "SELECT  School FROM ( SELECT T2.School, T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F') ranked_schools WHERE rnk <= 5",
            "res": 0
        },
        {
            "sql_idx": 455,
            "predicted_sql": "SELECT s.School, AVG(s.AvgScrWrite) AS AverageWritingScore FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.School Name = 'Ricci Ulrich' GROUP BY s.School;",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`AvgScrWrite` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` WHERE   `T2`.`AdmFName1` = 'Ricci' AND `T2`.`AdmLName1` = 'Ulrich'",
            "res": 0
        },
        {
            "sql_idx": 456,
            "predicted_sql": "SELECT s.State, SUM(f.Enrollment (K-12)) AS TotalEnrollees FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.DOC = 31 GROUP BY s.State ORDER BY TotalEnrollees DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`School` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`DOC` = 31 ORDER BY   `T1`.`Enrollment (K-12)` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 457,
            "predicted_sql": "SELECT COUNT(CDSCode) / 12 AS monthly_average_schools FROM schools WHERE County = 'Alameda' AND DOC = '52' AND YEAR(OpenDate) = 1980;",
            "ground_truth_sql": "SELECT   CAST(COUNT(`School`) AS DOUBLE) / 12 FROM `schools` WHERE   `DOC` = 52   AND `County` = 'Alameda'   AND DATE_FORMAT(CAST(`OpenDate` AS DATETIME), '%Y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 458,
            "predicted_sql": "SELECT (COUNT(CASE WHEN DOC = 54 THEN 1 END) / COUNT(CASE WHEN DOC = 52 THEN 1 END)) AS ratio FROM schools WHERE County = 'Orange';",
            "ground_truth_sql": "SELECT   CAST(SUM(CASE WHEN `DOC` = 54 THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN `DOC` = 52 THEN 1 ELSE 0 END) FROM `schools` WHERE   `StatusType` = 'Merged' AND `County` = 'Orange'",
            "res": 0
        },
        {
            "sql_idx": 459,
            "predicted_sql": "SELECT s.Street, s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode ORDER BY f.AvgScrMath DESC LIMIT 6, 1;",
            "ground_truth_sql": "SELECT   `T2`.`MailStreet`,   `T2`.`School` FROM `satscores` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`cds` = `T2`.`CDSCode` ORDER BY   `T1`.`AvgScrMath` DESC LIMIT 1 OFFSET 6",
            "res": 0
        },
        {
            "sql_idx": 460,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.CDSCode) AS total_schools FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND T2.`Percent (%) Eligible Free (K-12)` < 0.18;",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`School`) FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Los Angeles'   AND `T2`.`Charter` = 0   AND CAST(`T1`.`Free Meal Count (K-12)` AS DOUBLE) * 100 / `T1`.`Enrollment (K-12)` < 0.18",
            "res": 0
        },
        {
            "sql_idx": 461,
            "predicted_sql": "SELECT SUM(Enrollment_5_17) AS Total_Students FROM frpm WHERE School = 'State Special School' AND `County Name` = 'Fremont' AND `Academic Year` = '2014-2015';",
            "ground_truth_sql": "SELECT   `T1`.`Enrollment (Ages 5-17)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`EdOpsCode` = 'SSS'   AND `T2`.`City` = 'Fremont'   AND `T1`.`Academic Year` BETWEEN 2014 AND 2015",
            "res": 0
        },
        {
            "sql_idx": 462,
            "predicted_sql": "SELECT s.School, f.`Percent (%) Eligible FRPM (Ages 5-17)` FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND s.GSserved = 'K-9' GROUP BY s.School, f.`Percent (%) Eligible FRPM (Ages 5-17)` ORDER BY s.School;",
            "ground_truth_sql": "SELECT   `T2`.`School`,   `T1`.`FRPM Count (Ages 5-17)` * 100 / `T1`.`Enrollment (Ages 5-17)` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'Los Angeles' AND `T2`.`GSserved` = 'K-9'",
            "res": 0
        },
        {
            "sql_idx": 463,
            "predicted_sql": "SELECT County, COUNT(*) AS NumberOfSchools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `County`,   COUNT(`Virtual`) FROM `schools` WHERE   (     `County` = 'San Diego' OR `County` = 'Santa Barbara'   ) AND `Virtual` = 'F' GROUP BY   `County` ORDER BY   COUNT(`Virtual`) DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 464,
            "predicted_sql": "SELECT GSoffered FROM schools ORDER BY ABS(Longitude) DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `GSoffered` FROM `schools` ORDER BY   ABS(`longitude`) DESC LIMIT 1",
            "res": 1
        },
        {
            "sql_idx": 465,
            "predicted_sql": "SELECT COUNT(DISTINCT City) AS NumberOfCities, COUNT(DISTINCT `School`) AS NumberOfSchools FROM frpm WHERE `NSLP Provision Status` = 'Multiple Provision Types' AND Low Grade = 'K' AND High Grade = '8';",
            "ground_truth_sql": "SELECT   `T2`.`City`,   COUNT(`T2`.`CDSCode`) FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`Magnet` = 1   AND `T2`.`GSoffered` = 'K-8'   AND `T1`.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY   `T2`.`City`",
            "res": 0
        },
        {
            "sql_idx": 466,
            "predicted_sql": "SELECT DISTINCT CAST(free_meal_count_k12 AS DECIMAL(10, 2)) / enrollment_k12 * 100 AS percent_eligible_free_k12, district_code FROM frpm JOIN schools ON frpm.school_code = schools.CDSCode WHERE AdmFName1 = 'Alusine'",
            "ground_truth_sql": "SELECT   `T1`.`Free Meal Count (K-12)` * 100 / `T1`.`Enrollment (K-12)`,   `T1`.`District Code` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`AdmFName1` = 'Alusine'",
            "res": 0
        },
        {
            "sql_idx": 467,
            "predicted_sql": "SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND City = 'City of San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND ( (SOC = '62' AND DOC = '54') OR (SOC = '62' AND DOC = '54') );",
            "ground_truth_sql": "SELECT   `T2`.`AdmEmail1`,   `T2`.`AdmEmail2` FROM `frpm` AS `T1` INNER JOIN `schools` AS `T2`   ON `T1`.`CDSCode` = `T2`.`CDSCode` WHERE   `T2`.`County` = 'San Bernardino'   AND `T2`.`City` = 'San Bernardino'   AND `T2`.`DOC` = 54   AND DATE_FORMAT(CAST(`T2`.`OpenDate` AS DATETIME), '%Y') BETWEEN '2009' AND '2010'   AND `T2`.`SOC` = 62",
            "res": 0
        }
    ],
    "financial": [
        {
            "sql_idx": 468,
            "predicted_sql": "SELECT COUNT(DISTINCT t.account_id) AS number_of_accounts FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE t.type = 'POPLATEK PO OBRATU' AND d.A3 = 'East Bohemia';",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`account_id`) FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`A3` = 'east Bohemia' AND `T2`.`frequency` = 'POPLATEK PO OBRATU'",
            "res": 0
        },
        {
            "sql_idx": 469,
            "predicted_sql": "SELECT COUNT(DISTINCT district_id) AS no_of_districts FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A11 BETWEEN 6000 AND 10000;",
            "ground_truth_sql": "SELECT   COUNT(DISTINCT `T2`.`district_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'F' AND `T2`.`A11` BETWEEN 6000 AND 10000",
            "res": 0
        },
        {
            "sql_idx": 470,
            "predicted_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_customers FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M' AND `T2`.`A3` = 'north Bohemia' AND `T2`.`A11` > 8000",
            "res": 1
        },
        {
            "sql_idx": 471,
            "predicted_sql": "SELECT T1.account_id, T2.A11 - MIN(T2.A11) AS salary_gap FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T1.birth_date DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`account_id`,   (     SELECT       MAX(`A11`) - MIN(`A11`)     FROM `district`   ) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `disp` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` INNER JOIN `client` AS `T4`   ON `T3`.`client_id` = `T4`.`client_id` WHERE   `T2`.`district_id` = (     SELECT       `district_id`     FROM `client`     WHERE       `gender` = 'F'     ORDER BY       `birth_date` ASC     LIMIT 1   ) ORDER BY   `T2`.`A11` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 472,
            "predicted_sql": "SELECT T1.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id ORDER BY T1.birth_date DESC, T3.amount DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `account` AS `T1` INNER JOIN `disp` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `client` AS `T3`   ON `T2`.`client_id` = `T3`.`client_id` INNER JOIN `district` AS `T4`   ON `T4`.`district_id` = `T1`.`district_id` WHERE   `T2`.`client_id` = (     SELECT       `client_id`     FROM `client`     ORDER BY       `birth_date` DESC     LIMIT 1   ) GROUP BY   `T4`.`A11`,   `T1`.`account_id`",
            "res": 0
        },
        {
            "sql_idx": 473,
            "predicted_sql": "SELECT a.account_id, MIN(l.amount) AS lowest_approved_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE YEAR(l.date) = 1997 GROUP BY a.account_id ORDER BY lowest_approved_amount LIMIT 1;",
            "ground_truth_sql": "SELECT   `T2`.`account_id` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1997'   AND `T2`.`frequency` = 'POPLATEK TYDNE' ORDER BY   `T1`.`amount` LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 474,
            "predicted_sql": "SELECT a.account_id, MAX(l.amount) AS highest_approved_amount FROM account a JOIN loan l ON a.account_id = l.account_id WHERE YEAR(l.date) = 1993 AND l.duration > 12 GROUP BY a.account_id ORDER BY highest_approved_amount DESC;",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%Y') = '1993'   AND `T1`.`duration` > 12 ORDER BY   `T1`.`amount` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 475,
            "predicted_sql": "SELECT COUNT(DISTINCT c.client_id) AS female_customers FROM client c JOIN account a ON c.client_id = a.account_id JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND d.A2 = 'Sokolov';",
            "ground_truth_sql": "SELECT   COUNT(`T2`.`client_id`) FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`gender` = 'F'   AND DATE_FORMAT(CAST(`T2`.`birth_date` AS DATETIME), '%Y') < '1950'   AND `T1`.`A2` = 'Sokolov'",
            "res": 0
        },
        {
            "sql_idx": 476,
            "predicted_sql": "SELECT d.A2 FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';",
            "ground_truth_sql": "SELECT   `T1`.`A2` FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`birth_date` = '1976-01-29' AND `T2`.`gender` = 'F'",
            "res": 1
        },
        {
            "sql_idx": 477,
            "predicted_sql": "SELECT (COUNT(CASE WHEN T2.gender = 'M' THEN 1 END) * 100.0 / COUNT(T2.gender)) AS male_percentage FROM district AS T1 INNER JOIN client AS T2 ON T2.district_id = T1.district_id WHERE T1.A3 = 'south Bohemia' ORDER BY T1.A4 DESC LIMIT 1;",
            "ground_truth_sql": "SELECT   CAST(SUM(`T1`.`gender` = 'M') AS DOUBLE) * 100 / COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T2`.`A3` = 'south Bohemia' GROUP BY   `T2`.`A4` ORDER BY   `T2`.`A4` DESC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 478,
            "predicted_sql": "SELECT (SUM(CASE WHEN t1.date = '1998-12-27' THEN t1.balance ELSE 0 END) - SUM(CASE WHEN t1.date = '1993-03-22' THEN t1.balance ELSE 0 END)) * 100.0 / SUM(CASE WHEN t1.date = '1993-03-22' THEN t1.balance ELSE 0 END) AS increase_rate FROM trans t1 JOIN loan l ON t1.account_id = l.account_id WHERE l.date = '1993-07-05' ORDER BY t1.date LIMIT 1;",
            "ground_truth_sql": "SELECT   CAST((     SUM(CASE WHEN `T3`.`date` = '1998-12-27' THEN `T3`.`balance` ELSE 0 END) - SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END)   ) AS DOUBLE) * 100 / SUM(CASE WHEN `T3`.`date` = '1993-03-22' THEN `T3`.`balance` ELSE 0 END) FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `trans` AS `T3`   ON `T3`.`account_id` = `T2`.`account_id` WHERE   `T1`.`date` = '1993-07-05'",
            "res": 0
        },
        {
            "sql_idx": 479,
            "predicted_sql": "SELECT (SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100 AS percentage FROM loan l;",
            "ground_truth_sql": "SELECT   (     CAST(SUM(CASE WHEN `status` = 'A' THEN `amount` ELSE 0 END) AS DOUBLE) * 100   ) / SUM(`amount`) FROM `loan`",
            "res": 0
        },
        {
            "sql_idx": 480,
            "predicted_sql": "SELECT (COUNT(CASE WHEN l.status = 'C' THEN 1 END) * 100.0 / COUNT(l.loan_id)) AS percentage_running_no_issue FROM loan l WHERE l.amount < 100000;",
            "ground_truth_sql": "SELECT   CAST(SUM(`status` = 'C') AS DOUBLE) * 100 / COUNT(`account_id`) FROM `loan` WHERE   `amount` < 100000",
            "res": 0
        },
        {
            "sql_idx": 481,
            "predicted_sql": "SELECT d.A2 AS district, d.A3 AS state, ( (d.A13 - d.A12) / d.A12 ) * 100 AS unemployment_rate_increment FROM district d JOIN client c ON d.district_id = c.district_id JOIN loan l ON c.client_id = l.account_id WHERE l.status = 'D';",
            "ground_truth_sql": "SELECT   CAST((     `T3`.`A13` - `T3`.`A12`   ) AS DOUBLE) * 100 / `T3`.`A12` FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `district` AS `T3`   ON `T2`.`district_id` = `T3`.`district_id` WHERE   `T1`.`status` = 'D'",
            "res": 0
        },
        {
            "sql_idx": 482,
            "predicted_sql": "SELECT T3.A2 AS district_name, COUNT(T1.client_id) AS female_count FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' GROUP BY T3.A2 ORDER BY female_count DESC LIMIT 9;",
            "ground_truth_sql": "SELECT   `T2`.`A2`,   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'F' GROUP BY   `T2`.`district_id`,   `T2`.`A2` ORDER BY   COUNT(`T1`.`client_id`) DESC LIMIT 9",
            "res": 0
        },
        {
            "sql_idx": 483,
            "predicted_sql": "SELECT COUNT(*) AS approved_loans_count FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK MESICNE' AND l.amount >= 250000 AND l.status = 'APPROVED' AND l.date BETWEEN '1995-01-01' AND '1997-12-31';",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `loan` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T2`.`date` BETWEEN '1995-01-01' AND '1997-12-31'   AND `T1`.`frequency` = 'POPLATEK MESICNE'   AND `T2`.`amount` >= 250000",
            "res": 0
        },
        {
            "sql_idx": 484,
            "predicted_sql": "SELECT COUNT(DISTINCT account_id) AS running_contracts FROM loan WHERE status = 'C' AND account_id IN ( SELECT account_id FROM account WHERE district_id = 1 );",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `loan` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` WHERE   `T1`.`district_id` = 1 AND (     `T3`.`status` = 'C' OR `T3`.`status` = 'D'   )",
            "res": 0
        },
        {
            "sql_idx": 485,
            "predicted_sql": "SELECT COUNT(DISTINCT T2.client_id) AS male_clients FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'M' AND YEAR(T1.A15) = 1995 ORDER BY T1.A15 DESC LIMIT 1, 1;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M'   AND `T2`.`A15` = (     SELECT       `T3`.`A15`     FROM `district` AS `T3`     ORDER BY       `T3`.`A15` DESC     LIMIT 1     OFFSET 1   )",
            "res": 0
        },
        {
            "sql_idx": 486,
            "predicted_sql": "SELECT d.A2 AS district_name, COUNT(t.trans_id) AS withdrawal_count FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.client_id = c.client_id JOIN district d ON c.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY withdrawal_count DESC LIMIT 10;",
            "ground_truth_sql": "SELECT DISTINCT   `T1`.`A2` FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `trans` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` WHERE   `T3`.`type` = 'VYDAJ' AND `T3`.`date` LIKE '1996-01%' ORDER BY   `A2` ASC LIMIT 10",
            "res": 0
        },
        {
            "sql_idx": 487,
            "predicted_sql": "SELECT COUNT(DISTINCT account_id) AS running_contracts FROM loan WHERE status = 'C' AND district_id = 1;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`account_id`) FROM `account` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `loan` AS `T3`   ON `T1`.`account_id` = `T3`.`account_id` WHERE   `T1`.`district_id` = 1 AND (     `T3`.`status` = 'C' OR `T3`.`status` = 'D'   )",
            "res": 0
        },
        {
            "sql_idx": 488,
            "predicted_sql": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND YEAR(T2.date) = 1995 ORDER BY T1.A15 DESC LIMIT 1, 1;",
            "ground_truth_sql": "SELECT   COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`gender` = 'M'   AND `T2`.`A15` = (     SELECT       `T3`.`A15`     FROM `district` AS `T3`     ORDER BY       `T3`.`A15` DESC     LIMIT 1     OFFSET 1   )",
            "res": 0
        },
        {
            "sql_idx": 489,
            "predicted_sql": "SELECT t.account_id FROM trans t JOIN card c ON t.account = c.card_id WHERE t.type = 'VYBER KARTOU' AND t.amount < ( SELECT AVG(amount) FROM trans WHERE YEAR(t.date) = 1998 ) AND YEAR(t.date) = 1998;",
            "ground_truth_sql": "SELECT   `T1`.`account_id` FROM `trans` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1998'   AND `T1`.`operation` = 'VYBER KARTOU'   AND `T1`.`amount` < (     SELECT       AVG(`amount`)     FROM `trans`     WHERE       DATE_FORMAT(CAST(`date` AS DATETIME), '%Y') = '1998'   )",
            "res": 0
        },
        {
            "sql_idx": 490,
            "predicted_sql": "SELECT t1.type FROM account AS t1 JOIN client AS t2 ON t1.account_id = t2.client_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.type != 'OWNER' AND t3.A11 > 8000 AND t3.A11 < 9000 GROUP BY t1.type;",
            "ground_truth_sql": "SELECT   `T3`.`type` FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `disp` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` WHERE   `T3`.`type` <> 'OWNER' AND `T1`.`A11` BETWEEN 8000 AND 9000",
            "res": 0
        },
        {
            "sql_idx": 491,
            "predicted_sql": "SELECT AVG(A15) AS average_crimes FROM district WHERE A15 > 4000 AND EXISTS ( SELECT 1 FROM account WHERE account_id = district.district_id AND YEAR(date) >= 1997 )",
            "ground_truth_sql": "SELECT   AVG(`T1`.`A15`) FROM `district` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   DATE_FORMAT(CAST(`T2`.`date` AS DATETIME), '%Y') >= '1997' AND `T1`.`A15` > 4000",
            "res": 0
        },
        {
            "sql_idx": 492,
            "predicted_sql": "SELECT t.amount FROM trans t JOIN client c ON t.account_id = c.client_id WHERE c.client_id = 3356 AND t.operation = 'VYBER';",
            "ground_truth_sql": "SELECT   `T4`.`trans_id` FROM `client` AS `T1` INNER JOIN `disp` AS `T2`   ON `T1`.`client_id` = `T2`.`client_id` INNER JOIN `account` AS `T3`   ON `T2`.`account_id` = `T3`.`account_id` INNER JOIN `trans` AS `T4`   ON `T3`.`account_id` = `T4`.`account_id` WHERE   `T1`.`client_id` = 3356 AND `T4`.`operation` = 'VYBER'",
            "res": 0
        },
        {
            "sql_idx": 493,
            "predicted_sql": "SELECT (COUNT(CASE WHEN c.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_women FROM client c JOIN account a ON c.client_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE d.A11 > 10000;",
            "ground_truth_sql": "SELECT   CAST(SUM(`T2`.`gender` = 'F') AS DOUBLE) * 100 / COUNT(`T2`.`client_id`) FROM `district` AS `T1` INNER JOIN `client` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` WHERE   `T1`.`A11` > 10000",
            "res": 0
        },
        {
            "sql_idx": 494,
            "predicted_sql": "SELECT (SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1997 THEN l.amount ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1996 THEN l.amount ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM l.date) = 1996 THEN l.amount ELSE 0 END) * 100 AS growth_rate FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id WHERE c.gender = 'M';",
            "ground_truth_sql": "SELECT   CAST((     SUM(       CASE         WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1997'         THEN `T1`.`amount`         ELSE 0       END     ) - SUM(       CASE         WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'         THEN `T1`.`amount`         ELSE 0       END     )   ) AS DOUBLE) * 100 / SUM(     CASE       WHEN DATE_FORMAT(CAST(`T1`.`date` AS DATETIME), '%Y') = '1996'       THEN `T1`.`amount`       ELSE 0     END   ) FROM `loan` AS `T1` INNER JOIN `account` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` INNER JOIN `disp` AS `T3`   ON `T3`.`account_id` = `T2`.`account_id` INNER JOIN `client` AS `T4`   ON `T4`.`client_id` = `T3`.`client_id` WHERE   `T4`.`gender` = 'M' AND `T3`.`type` = 'OWNER'",
            "res": 0
        },
        {
            "sql_idx": 495,
            "predicted_sql": "SELECT COUNT(DISTINCT account_id) AS request_count, SUM(CASE WHEN k_symbol = '3539' THEN 1 ELSE 0 END) AS total_debit_aim FROM trans WHERE account_id = 3;",
            "ground_truth_sql": "SELECT   `T1`.`frequency`,   `T2`.`k_symbol` FROM `account` AS `T1` INNER JOIN (   SELECT     `account_id`,     `k_symbol`,     SUM(`amount`) AS `total_amount`   FROM `order`   GROUP BY     `account_id`,     `k_symbol` ) AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T1`.`account_id` = 3 AND `T2`.`total_amount` = 3539",
            "res": 0
        },
        {
            "sql_idx": 496,
            "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN c.gender = 'M' THEN d.client_id END) * 100.0 / COUNT(DISTINCT d.client_id)) AS male_percentage FROM disp d JOIN client c ON d.client_id = c.client_id WHERE d.type = 'POPLATEK TYDNE';",
            "ground_truth_sql": "SELECT   CAST(SUM(`T1`.`gender` = 'M') AS DOUBLE) * 100 / COUNT(`T1`.`client_id`) FROM `client` AS `T1` INNER JOIN `district` AS `T3`   ON `T1`.`district_id` = `T3`.`district_id` INNER JOIN `account` AS `T2`   ON `T2`.`district_id` = `T3`.`district_id` INNER JOIN `disp` AS `T4`   ON `T1`.`client_id` = `T4`.`client_id` AND `T2`.`account_id` = `T4`.`account_id` WHERE   `T2`.`frequency` = 'POPLATEK TYDNE'",
            "res": 0
        },
        {
            "sql_idx": 497,
            "predicted_sql": "SELECT T1.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T3.amount ASC LIMIT 1;",
            "ground_truth_sql": "SELECT   `T3`.`account_id` FROM `client` AS `T1` INNER JOIN `district` AS `T2`   ON `T1`.`district_id` = `T2`.`district_id` INNER JOIN `account` AS `T3`   ON `T2`.`district_id` = `T3`.`district_id` INNER JOIN `disp` AS `T4`   ON `T1`.`client_id` = `T4`.`client_id` AND `T4`.`account_id` = `T3`.`account_id` WHERE   `T1`.`gender` = 'F' ORDER BY   `T1`.`birth_date` ASC,   `T2`.`A11` ASC LIMIT 1",
            "res": 0
        },
        {
            "sql_idx": 498,
            "predicted_sql": "SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN trans t ON l.account_id = t.account_id WHERE l.status = 'C' AND t.operation = 'POPLATEK PO OBRATU';",
            "ground_truth_sql": "SELECT   AVG(`T2`.`amount`) FROM `account` AS `T1` INNER JOIN `loan` AS `T2`   ON `T1`.`account_id` = `T2`.`account_id` WHERE   `T2`.`status` IN ('C', 'D') AND `T1`.`frequency` = 'POPLATEK PO OBRATU'",
            "res": 0
        },
        {
            "sql_idx": 499,
            "predicted_sql": "SELECT c.client_id, TIMESTAMPDIFF(YEAR, c.birth_date, CURDATE()) AS age FROM client c JOIN card ON c.client_id = card.disp_id JOIN disp d ON card.disp_id = d.disp_id WHERE card.type = 'gold' AND d.type = 'OWNER';",
            "ground_truth_sql": "SELECT   `T1`.`client_id`,   DATE_FORMAT(CAST(CURRENT_TIMESTAMP() AS DATETIME), '%Y') - DATE_FORMAT(CAST(`T3`.`birth_date` AS DATETIME), '%Y') FROM `disp` AS `T1` INNER JOIN `card` AS `T2`   ON `T2`.`disp_id` = `T1`.`disp_id` INNER JOIN `client` AS `T3`   ON `T1`.`client_id` = `T3`.`client_id` WHERE   `T2`.`type` = 'gold' AND `T1`.`type` = 'OWNER'",
            "res": 0
        }
    ]
}