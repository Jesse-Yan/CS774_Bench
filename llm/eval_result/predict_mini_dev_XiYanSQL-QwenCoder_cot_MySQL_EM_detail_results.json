{
    "debit_card_specializing": [
        {
            "sql_idx": 0,
            "predicted_sql": "select sum(case when currency = 'eur' then 1 else 0 end) as eur_count, sum(case when currency = 'czk' then 1 else 0 end) as czk_count, sum(case when currency = 'eur' then 1 else 0 end) * 1.0 / sum(case when currency = 'czk' then 1 else 0 end) as ratio from customers",
            "ground_truth_sql": "select cast(sum(case when currency = 'eur' then 1 else 0 end) as double) / sum(case when currency = 'czk' then 1 else 0 end) from customers",
            "res": 0
        },
        {
            "sql_idx": 1,
            "predicted_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t2.date like '2012%' order by t2.consumption asc limit 1",
            "ground_truth_sql": "select t1.customerid from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam' and substr(t2.date, 1, 4) = '2012' group by t1.customerid order by sum(t2.consumption) asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 2,
            "predicted_sql": "select avg(consumption) / 12 as averagemonthlyconsumption from yearmonth where date like '2013%' and segment = 'sme'",
            "ground_truth_sql": "select avg(t2.consumption) / 12 from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme'",
            "res": 0
        },
        {
            "sql_idx": 3,
            "predicted_sql": "select sum(case when c.currency = 'czk' then y.consumption else 0 end) - sum(case when c.currency = 'eur' then y.consumption else 0 end) as consumption_difference from customers c join yearmonth y on c.customerid = y.customerid where y.date between '201201' and '201212'",
            "ground_truth_sql": "select sum(case when t1.currency = 'czk' then t2.consumption else 0 end) - sum(case when t1.currency = 'eur' then t2.consumption else 0 end) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2012'",
            "res": 0
        },
        {
            "sql_idx": 4,
            "predicted_sql": "select substring(date, 1, 4) as year, sum(consumption) as totalconsumption from yearmonth group by year order by totalconsumption desc limit 1",
            "ground_truth_sql": "select substr(t2.date, 1, 4) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' group by substr(t2.date, 1, 4) order by sum(t2.consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 5,
            "predicted_sql": "select date_format(date, '%y-%m') as peakmonth, sum(consumption) as peakmonthconsumption from yearmonth where date_format(date, '%y') = '2013' group by date_format(date, '%y-%m') order by peakmonthconsumption desc limit 1",
            "ground_truth_sql": "select substr(t2.date, 5, 2) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where substr(t2.date, 1, 4) = '2013' and t1.segment = 'sme' group by substr(t2.date, 5, 2) order by sum(t2.consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 6,
            "predicted_sql": "select ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'sme' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'lam' ) as sme_lam_difference, ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'lam' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'kam' ) as lam_kam_difference, ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'kam' ) - ( select avg(consumption) from yearmonth where date like '2013%' and segment = 'sme' ) as kam_sme_difference",
            "ground_truth_sql": "select cast(sum(case when t1.segment = 'sme' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'lam' then t2.consumption else 0 end) as double) / count(t1.customerid), cast(sum(case when t1.segment = 'lam' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'kam' then t2.consumption else 0 end) as double) / count(t1.customerid), cast(sum(case when t1.segment = 'kam' then t2.consumption else 0 end) as double) / count(t1.customerid) - cast(sum(case when t1.segment = 'sme' then t2.consumption else 0 end) as double) / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.currency = 'czk' and t2.consumption = ( select min(consumption) from yearmonth ) and t2.date between 201301 and 201312",
            "res": 0
        },
        {
            "sql_idx": 7,
            "predicted_sql": "select segment, max(percentageincrease) as highestpercentageincrease, min(percentageincrease) as lowestpercentageincrease from ( select t1.segment, ( (sum(t2.consumption) - sum(t3.consumption)) / sum(t2.consumption) ) * 100 as percentageincrease from customers t1 inner join yearmonth t2 on t1.customerid = t2.customerid where t1.currency = 'eur' and t1.segment in ('sme', 'lam', 'kam') and t2.date like '2013%' group by t1.segment ) as subquery group by segment",
            "ground_truth_sql": "select cast(( sum( case when t1.segment = 'sme' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'sme' and t2.date like '2012%' then t2.consumption else 0 end ) ) as double) * 100 / sum( case when t1.segment = 'sme' and t2.date like '2012%' then t2.consumption else 0 end ), cast(sum( case when t1.segment = 'lam' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'lam' and t2.date like '2012%' then t2.consumption else 0 end ) as double) * 100 / sum( case when t1.segment = 'lam' and t2.date like '2012%' then t2.consumption else 0 end ), cast(sum( case when t1.segment = 'kam' and t2.date like '2013%' then t2.consumption else 0 end ) - sum( case when t1.segment = 'kam' and t2.date like '2012%' then t2.consumption else 0 end ) as double) * 100 / sum( case when t1.segment = 'kam' and t2.date like '2012%' then t2.consumption else 0 end ) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid",
            "res": 0
        },
        {
            "sql_idx": 8,
            "predicted_sql": "select sum(consumption) as totalconsumption from yearmonth where customerid = 6 and date between '201308' and '201311'",
            "ground_truth_sql": "select sum(consumption) from yearmonth where customerid = 6 and date between '201308' and '201311'",
            "res": 0
        },
        {
            "sql_idx": 9,
            "predicted_sql": "select ( select count(*) from gasstations where country = 'cze' and segment = 'discount' ) - ( select count(*) from gasstations where country = 'svk' and segment = 'discount' ) as difference",
            "ground_truth_sql": "select sum(case when country = 'cze' then 1 else 0 end) - sum(case when country = 'svk' then 1 else 0 end) from gasstations where segment = 'discount'",
            "res": 0
        },
        {
            "sql_idx": 10,
            "predicted_sql": "select ( select count(*) from customers where segment = 'sme' and currency = 'czk' ) - ( select count(*) from customers where segment = 'sme' and currency = 'eur' ) as difference",
            "ground_truth_sql": "select sum(currency = 'czk') - sum(currency = 'eur') from customers where segment = 'sme'",
            "res": 0
        },
        {
            "sql_idx": 11,
            "predicted_sql": "select (count(case when consumption > 46.73 then 1 end) * 100.0 / count(*)) as percentage from yearmonth where customerid in ( select customerid from customers where segment = 'lam' )",
            "ground_truth_sql": "select cast(sum(case when t2.consumption > 46.73 then 1 else 0 end) as double) * 100 / count(t1.customerid) from customers as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.segment = 'lam'",
            "res": 0
        },
        {
            "sql_idx": 12,
            "predicted_sql": "select (count(case when consumption > 528.3 then 1 end) * 100.0 / count(*)) as percentage from yearmonth where date like '201202%'",
            "ground_truth_sql": "select cast(sum(case when consumption > 528.3 then 1 else 0 end) as double) * 100 / count(customerid) from yearmonth where date = '201202'",
            "res": 0
        },
        {
            "sql_idx": 13,
            "predicted_sql": "select max(consumption) as highestmonthlyconsumption from yearmonth where date like '2012-%'",
            "ground_truth_sql": "select sum(consumption) from yearmonth where substr(date, 1, 4) = '2012' group by substr(date, 5, 2) order by sum(consumption) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 14,
            "predicted_sql": "select p.description from products p join transactions_1k t on p.productid = t.productid join yearmonth ym on t.transactionid = ym.customerid where ym.date like '201309%'",
            "ground_truth_sql": "select t3.description from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid inner join products as t3 on t1.productid = t3.productid where t2.date = '201309'",
            "res": 0
        },
        {
            "sql_idx": 15,
            "predicted_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '201306'",
            "ground_truth_sql": "select distinct t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t3.date = '201306'",
            "res": 0
        },
        {
            "sql_idx": 16,
            "predicted_sql": "select count(distinct t.customerid) as numberofcustomers from transactions_1k t join customers c on t.customerid = c.customerid where c.currency = 'eur' and t.amount > 1000",
            "ground_truth_sql": "select count(*) from yearmonth as t1 inner join customers as t2 on t1.customerid = t2.customerid where t2.currency = 'eur' and t1.consumption > 1000.00",
            "res": 0
        },
        {
            "sql_idx": 17,
            "predicted_sql": "select distinct p.description from products p join transactions_1k t on p.productid = t.productid join gasstations g on t.gasstationid = g.gasstationid where g.country = 'cze'",
            "ground_truth_sql": "select distinct t3.description from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join products as t3 on t1.productid = t3.productid where t2.country = 'cze'",
            "res": 0
        },
        {
            "sql_idx": 18,
            "predicted_sql": "select distinct time from transactions_1k where gasstationid in ( select gasstationid from gasstations where chainid = 11 )",
            "ground_truth_sql": "select distinct t1.time from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.chainid = 11",
            "res": 0
        },
        {
            "sql_idx": 19,
            "predicted_sql": "select count(*) as transactions_after_2012_1_1 from transactions_1k t join gasstations g on t.gasstationid = g.gasstationid where g.country = 'cze' and t.date > '2012-01-01'",
            "ground_truth_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t2.country = 'cze' and date_format(cast(t1.date as datetime), '%y') >= '2012'",
            "res": 0
        },
        {
            "sql_idx": 20,
            "predicted_sql": "select t.currency from customers t join transactions_1k tt on t.customerid = tt.customerid where tt.date = '2012-08-24' and tt.time = '16:25:00'",
            "ground_truth_sql": "select distinct t3.currency from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join customers as t3 on t1.customerid = t3.customerid where t1.date = '2012-08-24' and t1.time = '16:25:00'",
            "res": 0
        },
        {
            "sql_idx": 21,
            "predicted_sql": "select t.segment from transactions_1k t join customers c on t.customerid = c.customerid where t.date = '2012-08-23' and t.time = '21:20:00'",
            "ground_truth_sql": "select t2.segment from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-23' and t1.time = '21:20:00'",
            "res": 0
        },
        {
            "sql_idx": 22,
            "predicted_sql": "select count(t1.transactionid) as cnt from transactions_1k as t1 inner join gasstations as t2 on t2.gasstationid = t1.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
            "ground_truth_sql": "select count(t1.transactionid) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-26' and t1.time between '08:00:00' and '09:00:00' and t2.country = 'cze'",
            "res": 0
        },
        {
            "sql_idx": 23,
            "predicted_sql": "select c.segment from customers c join transactions_1k t on c.customerid = t.customerid where t.date = '2012-08-24' and t.amount = 548.4",
            "ground_truth_sql": "select t2.country from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-24' and t1.price = 548.4",
            "res": 0
        },
        {
            "sql_idx": 24,
            "predicted_sql": "select (count(case when currency = 'eur' then 1 end) * 100.0 / count(*)) as percentage from customers where date = '2012-08-25'",
            "ground_truth_sql": "select cast(sum(case when t2.currency = 'eur' then 1 else 0 end) as double) * 100 / count(t1.customerid) from transactions_1k as t1 inner join customers as t2 on t1.customerid = t2.customerid where t1.date = '2012-08-25'",
            "res": 0
        },
        {
            "sql_idx": 25,
            "predicted_sql": "select (sum(case when year(date) = 2012 then consumption else 0 end) - sum(case when year(date) = 2013 then consumption else 0 end)) / sum(case when year(date) = 2012 then consumption else 0 end) as consumption_decrease_rate from yearmonth where date = '2012-08-25'",
            "ground_truth_sql": "select cast(sum(case when substr(date, 1, 4) = '2012' then consumption else 0 end) - sum(case when substr(date, 1, 4) = '2013' then consumption else 0 end) as double) / sum(case when substr(date, 1, 4) = '2012' then consumption else 0 end) from yearmonth where customerid = ( select t1.customerid from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid where t1.date = '2012-08-25' and t1.price = 1513.12 )",
            "res": 0
        },
        {
            "sql_idx": 26,
            "predicted_sql": "select (count(case when segment = 'premium' then 1 end) * 100.0 / count(*)) as percentage from gasstations where country = 'svk'",
            "ground_truth_sql": "select cast(sum(case when country = 'svk' and segment = 'premium' then 1 else 0 end) as double) * 100 / sum(case when country = 'svk' then 1 else 0 end) from gasstations",
            "res": 0
        },
        {
            "sql_idx": 27,
            "predicted_sql": "select sum(t.amount) as totalamountspent, sum(case when t.date = '201201' then t.amount else 0 end) as january2012amount from transactions_1k t where t.customerid = 38508",
            "ground_truth_sql": "select sum(t1.price ), sum(case when t3.date = '201201' then t1.price else 0 end) from transactions_1k as t1 inner join gasstations as t2 on t1.gasstationid = t2.gasstationid inner join yearmonth as t3 on t1.customerid = t3.customerid where t1.customerid = '38508'",
            "res": 0
        },
        {
            "sql_idx": 28,
            "predicted_sql": "select c.customerid, avg(t.price) as averagepriceperitem, c.currency from customers c join transactions_1k t on c.customerid = t.customerid group by c.customerid, c.currency order by sum(t.amount) desc limit 1",
            "ground_truth_sql": "select t2.customerid, sum(t2.price / t2.amount), t1.currency from customers as t1 inner join transactions_1k as t2 on t1.customerid = t2.customerid where t2.customerid = ( select customerid from yearmonth order by consumption desc limit 1 ) group by t2.customerid, t1.currency",
            "res": 0
        },
        {
            "sql_idx": 29,
            "predicted_sql": "select t1.customerid, t2.consumption from transactions_1k t1 inner join yearmonth t2 on t1.customerid = t2.customerid where t1.productid = 5 and t1.price / t1.amount > 29.00 and t2.date = '201208'",
            "ground_truth_sql": "select t2.consumption from transactions_1k as t1 inner join yearmonth as t2 on t1.customerid = t2.customerid where t1.price / t1.amount > 29.00 and t1.productid = 5 and t2.date = '201208'",
            "res": 0
        }
    ],
    "student_club": [
        {
            "sql_idx": 30,
            "predicted_sql": "select m.link_to_major from member m where m.first_name = 'angela' and m.last_name = 'sanders'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'angela' and t1.last_name = 'sanders'",
            "res": 0
        },
        {
            "sql_idx": 31,
            "predicted_sql": "select count(distinct m.member_id) as medium_size_students from member m join attendance a on m.member_id = a.link_to_member join event e on a.link_to_event = e.event_id where e.event_name = 'women''s soccer' and m.t_shirt_size = 'medium'",
            "ground_truth_sql": "select count(t1.event_id) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t2.link_to_member = t3.member_id where t1.event_name = 'women''s soccer' and t3.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 32,
            "predicted_sql": "select count(distinct t1.event_id) as meetings from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.type = 'meeting' group by t1.event_id having count(t1.event_id) > 10",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 10 except select t1.event_name from event as t1 where t1.type = 'meeting'",
            "res": 0
        },
        {
            "sql_idx": 33,
            "predicted_sql": "select e.event_name from event e join ( select link_to_event from attendance group by link_to_event having count(link_to_member) > 20 ) a on e.event_id = a.link_to_event where e.type != 'fundraiser'",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event group by t1.event_id having count(t2.link_to_event) > 20 and not exists (select 1 from event as e where e.event_id = t1.event_id and e.type = 'fundraiser')",
            "res": 0
        },
        {
            "sql_idx": 34,
            "predicted_sql": "select sum(i.amount) as total_funds_received from income i join member m on i.link_to_member = m.member_id where m.position = 'vice president'",
            "ground_truth_sql": "select t2.amount from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'vice president'",
            "res": 0
        },
        {
            "sql_idx": 35,
            "predicted_sql": "select m.first_name, m.last_name from member m join zip_code z on m.zip = z.zip_code where z.state = 'illinois'",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join zip_code as t2 on t1.zip = t2.zip_code where t2.state = 'illinois'",
            "res": 0
        },
        {
            "sql_idx": 36,
            "predicted_sql": "select e.expense_id, e.approved from expense e join event ev on e.link_to_budget = ev.event_id where ev.event_name = 'october meeting' and ev.event_date = '2019-10-08'",
            "ground_truth_sql": "select t3.approved from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' and t1.event_date like '2019-10-08%'",
            "res": 0
        },
        {
            "sql_idx": 37,
            "predicted_sql": "select avg(e.cost) as total_average_cost from expense e join member m on e.link_to_member = m.member_id where m.first_name = 'elijah' and m.last_name = 'allen' and month(str_to_date(e.expense_date, '%y-%m-%d')) in (9, 10)",
            "ground_truth_sql": "select avg(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.last_name = 'allen' and t1.first_name = 'elijah' and ( substr(t2.expense_date, 6, 2) = '09' or substr(t2.expense_date, 6, 2) = '10' )",
            "res": 0
        },
        {
            "sql_idx": 38,
            "predicted_sql": "select (sum(case when year(event_date) = 2019 then spent else 0 end) - sum(case when year(event_date) = 2020 then spent else 0 end)) as difference from budget where event_status = 'student_club'",
            "ground_truth_sql": "select sum(case when substr(t1.event_date, 1, 4) = '2019' then t2.spent else 0 end) - sum(case when substr(t1.event_date, 1, 4) = '2020' then t2.spent else 0 end) as num from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event",
            "res": 0
        },
        {
            "sql_idx": 39,
            "predicted_sql": "select notes from income where date_received = '2019-09-14' and source = 'fundraising'",
            "ground_truth_sql": "select notes from income where source = 'fundraising' and date_received = '2019-09-14'",
            "res": 0
        },
        {
            "sql_idx": 40,
            "predicted_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
            "ground_truth_sql": "select phone from member where first_name = 'carlo' and last_name = 'jacobs'",
            "res": 1
        },
        {
            "sql_idx": 41,
            "predicted_sql": "select e.status from event e join expense exp on e.event_id = exp.link_to_event where exp.expense_description = 'post cards, posters' and exp.expense_date = '2019-08-20'",
            "ground_truth_sql": "select t1.event_status from budget as t1 inner join expense as t2 on t1.budget_id = t2.link_to_budget where t2.expense_description = 'post cards, posters' and t2.expense_date = '2019-08-20'",
            "res": 0
        },
        {
            "sql_idx": 42,
            "predicted_sql": "select m.major_name from major m join member mem on m.major_id = mem.link_to_major where mem.first_name = 'brent' and mem.last_name = 'thomason'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.first_name = 'brent' and t1.last_name = 'thomason'",
            "res": 0
        },
        {
            "sql_idx": 43,
            "predicted_sql": "select count(*) as medium_size_t_shirt_business_members from member join major on member.link_to_major = major.major_id where major.major_name = 'business' and member.t_shirt_size = 'medium'",
            "ground_truth_sql": "select count(t1.member_id) from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.major_name = 'business' and t1.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 44,
            "predicted_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
            "ground_truth_sql": "select t2.department from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.position = 'president'",
            "res": 1
        },
        {
            "sql_idx": 45,
            "predicted_sql": "select date_received from income where link_to_member in ( select member_id from member where first_name = 'connor' and last_name = 'hilton' ) and source = 'dues'",
            "ground_truth_sql": "select t2.date_received from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'connor' and t1.last_name = 'hilton' and t2.source = 'dues'",
            "res": 0
        },
        {
            "sql_idx": 46,
            "predicted_sql": "select sum(case when e.event_name = 'yearly kickoff' then b.amount else 0 end) as yearly_kickoff_budget, sum(case when e.event_name = 'october meeting' then b.amount else 0 end) as october_meeting_budget, sum(case when e.event_name = 'yearly kickoff' then b.amount else 0 end) / sum(case when e.event_name = 'october meeting' then b.amount else 0 end) as yearly_kickoff_to_october_meeting_ratio from budget b join event e on b.link_to_event = e.event_id where b.category = 'advertisement'",
            "ground_truth_sql": "select cast(sum(case when t2.event_name = 'yearly kickoff' then t1.amount else 0 end) as double) / sum(case when t2.event_name = 'october meeting' then t1.amount else 0 end) from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' and t2.type = 'meeting'",
            "res": 0
        },
        {
            "sql_idx": 47,
            "predicted_sql": "select sum(cost) as total_cost_of_pizzas from expense where expense_description = 'pizza'",
            "ground_truth_sql": "select sum(cost) from expense where expense_description = 'pizza'",
            "res": 0
        },
        {
            "sql_idx": 48,
            "predicted_sql": "select count(distinct city) as number_of_cities from zip_code where county = 'orange county' and state = 'virginia'",
            "ground_truth_sql": "select count(city) from zip_code where county = 'orange county' and state = 'virginia'",
            "res": 0
        },
        {
            "sql_idx": 49,
            "predicted_sql": "select m.link_to_major from member m where m.phone = '809-555-3360'",
            "ground_truth_sql": "select t2.major_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t1.phone = '809-555-3360'",
            "res": 0
        },
        {
            "sql_idx": 50,
            "predicted_sql": "select count(distinct am.link_to_member) as total_members_attended from attendance am join event e on am.link_to_event = e.event_id where e.event_name = 'women''s soccer'",
            "ground_truth_sql": "select count(t2.link_to_member) from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'women''s soccer'",
            "res": 0
        },
        {
            "sql_idx": 51,
            "predicted_sql": "select m.first_name, m.last_name from member m join major j on m.link_to_major = j.major_id where j.department = 'school of applied sciences, technology and education'",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join major as t2 on t1.link_to_major = t2.major_id where t2.department = 'school of applied sciences, technology and education'",
            "res": 0
        },
        {
            "sql_idx": 52,
            "predicted_sql": "select e.event_name from event e join budget b on e.event_id = b.link_to_event where e.status = 'closed' order by (b.spent / b.amount) desc limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t2.status = 'closed' order by t1.spent / t1.amount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 53,
            "predicted_sql": "select max(spent) as highest_budget_spend from budget",
            "ground_truth_sql": "select max(spent) from budget",
            "res": 0
        },
        {
            "sql_idx": 54,
            "predicted_sql": "select sum(remaining) as total_amount_spent_for_food from budget where category = 'food'",
            "ground_truth_sql": "select sum(spent) from budget where category = 'food'",
            "res": 0
        },
        {
            "sql_idx": 55,
            "predicted_sql": "select m.first_name, m.last_name from member m join ( select link_to_member from attendance group by link_to_member having count(link_to_event) > 7 ) a on m.member_id = a.link_to_member",
            "ground_truth_sql": "select t1.first_name, t1.last_name from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member group by t2.link_to_member having count(t2.link_to_event) > 7",
            "res": 0
        },
        {
            "sql_idx": 56,
            "predicted_sql": "select m.first_name, m.last_name from member m join expense e on m.member_id = e.link_to_member join budget b on e.link_to_budget = b.budget_id join event ev on b.link_to_event = ev.event_id where ev.event_name = 'yearly kickoff' and m.position = 'budget manager'",
            "ground_truth_sql": "select t4.first_name, t4.last_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget inner join member as t4 on t3.link_to_member = t4.member_id where t1.event_name = 'yearly kickoff'",
            "res": 0
        },
        {
            "sql_idx": 57,
            "predicted_sql": "select e.event_name from event e join expense exp on e.event_id = exp.link_to_event order by exp.cost asc limit 1",
            "ground_truth_sql": "select t1.event_name from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget order by t3.cost limit 1",
            "res": 0
        },
        {
            "sql_idx": 58,
            "predicted_sql": "select (sum(case when e.event_name = 'yearly kickoff' then e.cost else 0 end) / sum(e.cost)) * 100 as yearly_kickoff_percentage from expense e",
            "ground_truth_sql": "select cast(sum(case when t1.event_name = 'yearly kickoff' then t3.cost else 0 end) as double) * 100 / sum(t3.cost) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget",
            "res": 0
        },
        {
            "sql_idx": 59,
            "predicted_sql": "select source, sum(amount) as total_amount from income where date_received between '2019-09-01' and '2019-09-30' group by source order by total_amount desc limit 1",
            "ground_truth_sql": "select source from income where date_received between '2019-09-01' and '2019-09-30' order by source desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 60,
            "predicted_sql": "select count(*) as number_of_members from member join major on member.link_to_major = major.major_id where major.major_name = 'physics teaching'",
            "ground_truth_sql": "select count(t2.member_id) from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t1.major_name = 'physics teaching'",
            "res": 0
        },
        {
            "sql_idx": 61,
            "predicted_sql": "select e.event_name from event e join budget b on e.event_id = b.link_to_event where b.category = 'advertisement' order by b.spent desc limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t1.link_to_event = t2.event_id where t1.category = 'advertisement' order by t1.spent desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 62,
            "predicted_sql": "select a.link_to_member from attendance a join event e on a.link_to_event = e.event_id join member m on a.link_to_member = m.member_id where m.first_name = 'maya' and m.last_name = 'mclean' and e.event_name = 'women''s soccer'",
            "ground_truth_sql": "select case when t3.event_name = 'women''s soccer' then 'yes' end as result from member as t1 inner join attendance as t2 on t1.member_id = t2.link_to_member inner join event as t3 on t2.link_to_event = t3.event_id where t1.first_name = 'maya' and t1.last_name = 'mclean'",
            "res": 0
        },
        {
            "sql_idx": 63,
            "predicted_sql": "select sum(cost) as total_cost from expense where expense_description = 'posters' and event_name = 'september speaker'",
            "ground_truth_sql": "select t3.cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'september speaker' and t3.expense_description = 'posters'",
            "res": 0
        },
        {
            "sql_idx": 64,
            "predicted_sql": "select e.event_name from event e join budget b on e.event_id = b.link_to_event where e.status = 'closed' and b.remaining < 0 order by b.remaining limit 1",
            "ground_truth_sql": "select t2.event_name from budget as t1 inner join event as t2 on t2.event_id = t1.link_to_event where t1.event_status = 'closed' and t1.remaining < 0 order by t1.remaining limit 1",
            "res": 0
        },
        {
            "sql_idx": 65,
            "predicted_sql": "select e.type, sum(e.cost) as total_value from expense e join budget b on e.link_to_budget = b.budget_id join event ev on b.link_to_event = ev.event_id where ev.event_name = 'october meeting' and e.approved = 'yes' group by e.type",
            "ground_truth_sql": "select t1.type, sum(t3.cost) as total_cost from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event inner join expense as t3 on t2.budget_id = t3.link_to_budget where t1.event_name = 'october meeting' group by t1.type",
            "res": 0
        },
        {
            "sql_idx": 66,
            "predicted_sql": "select b.category, sum(b.amount) as total_amount from budget b join event e on b.link_to_event = e.event_id where e.event_name = 'april speaker' group by b.category order by total_amount asc",
            "ground_truth_sql": "select t2.category, sum(t2.amount) from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.event_name = 'april speaker' group by t2.category order by sum(t2.amount) asc",
            "res": 0
        },
        {
            "sql_idx": 67,
            "predicted_sql": "select sum(cost) as total_expense from expense where expense_date = '2019-08-20'",
            "ground_truth_sql": "select sum(cost) from expense where expense_date = '2019-08-20'",
            "res": 0
        },
        {
            "sql_idx": 68,
            "predicted_sql": "select m.first_name, m.last_name, sum(e.cost) as total_cost from member m join expense e on m.member_id = e.link_to_member where m.member_id = 'rec4bldzhs2blfp4v' group by m.first_name, m.last_name",
            "ground_truth_sql": "select t1.first_name, t1.last_name, sum(t2.cost) from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.member_id = 'rec4bldzhs2blfp4v'",
            "res": 0
        },
        {
            "sql_idx": 69,
            "predicted_sql": "select e.expense_description from expense e join member m on e.link_to_member = m.member_id where m.first_name = 'sacha' and m.last_name = 'harrison'",
            "ground_truth_sql": "select t2.expense_description from member as t1 inner join expense as t2 on t1.member_id = t2.link_to_member where t1.first_name = 'sacha' and t1.last_name = 'harrison'",
            "res": 0
        },
        {
            "sql_idx": 70,
            "predicted_sql": "select distinct b.category from budget b join event e on b.link_to_event = e.event_id where e.location = 'mu 215'",
            "ground_truth_sql": "select distinct t2.category from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215'",
            "res": 0
        },
        {
            "sql_idx": 71,
            "predicted_sql": "select m.last_name, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major, d.department, d.college from member m join major d on m.link_to_major = d.major_id where d.major_name = 'environmental engineering'",
            "ground_truth_sql": "select t2.last_name, t1.department, t1.college from major as t1 inner join member as t2 on t1.major_id = t2.link_to_major where t2.position = 'member' and t1.major_name = 'environmental engineering'",
            "res": 0
        },
        {
            "sql_idx": 72,
            "predicted_sql": "select b.category from budget b join event e on b.link_to_event = e.event_id where e.location = 'mu 215' and e.type = 'guest speaker' and b.spent = 0",
            "ground_truth_sql": "select distinct t2.category, t1.type from event as t1 inner join budget as t2 on t1.event_id = t2.link_to_event where t1.location = 'mu 215' and t2.spent = 0 and t1.type = 'guest speaker'",
            "res": 0
        },
        {
            "sql_idx": 73,
            "predicted_sql": "select (count(case when i.amount = 50 then 1 end) * 100.0 / count(i.link_to_member)) as percentage from income i join member m on i.link_to_member = m.member_id where m.t_shirt_size = 'medium' and m.position = 'member'",
            "ground_truth_sql": "select cast(sum(case when t2.amount = 50 then 1.0 else 0 end) as double) * 100 / count(t2.income_id) from member as t1 inner join income as t2 on t1.member_id = t2.link_to_member where t1.position = 'member' and t1.t_shirt_size = 'medium'",
            "res": 0
        },
        {
            "sql_idx": 74,
            "predicted_sql": "select event_name from event where type = 'game' and status = 'closed' and event_date between '2019-03-15' and '2020-03-20'",
            "ground_truth_sql": "select distinct event_name from event where type = 'game' and date(substr(event_date, 1, 10)) between '2019-03-15' and '2020-03-20' and status = 'closed'",
            "res": 0
        },
        {
            "sql_idx": 75,
            "predicted_sql": "select m.first_name, m.last_name, m.phone from member m join expense e on m.member_id = e.link_to_member where e.cost > ( select avg(cost) from expense )",
            "ground_truth_sql": "select distinct t3.first_name, t3.last_name, t3.phone from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member where t1.cost > ( select avg(t1.cost) from expense as t1 inner join budget as t2 on t1.link_to_budget = t2.budget_id inner join member as t3 on t3.member_id = t1.link_to_member )",
            "res": 0
        },
        {
            "sql_idx": 76,
            "predicted_sql": "select m.first_name, m.last_name, e.cost from member m join expense e on m.member_id = e.link_to_member where e.expense_description = 'water, veggie tray, supplies'",
            "ground_truth_sql": "select t2.first_name, t2.last_name, t1.cost from expense as t1 inner join member as t2 on t1.link_to_member = t2.member_id where t1.expense_description = 'water, veggie tray, supplies'",
            "res": 0
        },
        {
            "sql_idx": 77,
            "predicted_sql": "select m.first_name, m.last_name, i.amount from income i join member m on i.link_to_member = m.member_id where i.date_received = '9/9/2019'",
            "ground_truth_sql": "select distinct t3.first_name, t3.last_name, t4.amount from event as t1 inner join attendance as t2 on t1.event_id = t2.link_to_event inner join member as t3 on t3.member_id = t2.link_to_member inner join income as t4 on t4.link_to_member = t3.member_id where t4.date_received = '2019-09-09'",
            "res": 0
        }
    ],
    "thrombosis_prediction": [
        {
            "sql_idx": 78,
            "predicted_sql": "select admission, count(id) as numberofmalepatients, (count(id) * 100.0 / (select count(id) from patient where sex = 'm')) as percentage from patient where sex = 'm' group by admission",
            "ground_truth_sql": "select cast(sum(case when admission = '+' then 1 else 0 end) as double) * 100 / sum(case when admission = '-' then 1 else 0 end) from patient where sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 79,
            "predicted_sql": "select (count(case when year(birthday) > 1930 and sex = 'f' then 1 end) * 100.0 / count(case when sex = 'f' then 1 end)) as percentage from patient",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(birthday as datetime), '%y') > '1930' then 1 else 0 end ) as double) * 100 / count(*) from patient where sex = 'f'",
            "res": 0
        },
        {
            "sql_idx": 80,
            "predicted_sql": "select sum(case when admission = '+' then 1 else 0 end) as outpatientcount, sum(case when admission = '-' then 1 else 0 end) as inpatientcount, sum(case when admission = '+' then 1 else 0 end) * 1.0 / sum(case when admission = '-' then 1 else 0 end) as ratio from patient where diagnosis = 'sle'",
            "ground_truth_sql": "select sum(case when admission = '+' then 1 else 0 end) / sum(case when admission = '-' then 1 else 0 end) from patient where diagnosis = 'sle'",
            "res": 0
        },
        {
            "sql_idx": 81,
            "predicted_sql": "select diagnosis, date from laboratory as l join patient as p on l.id = p.id where p.id = '30609'",
            "ground_truth_sql": "select t1.diagnosis, t2.date from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 30609",
            "res": 0
        },
        {
            "sql_idx": 82,
            "predicted_sql": "select p.id, p.sex, p.birthday from patient p join laboratory l on p.id = l.id where l.ldh > 500",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ldh > 500",
            "res": 0
        },
        {
            "sql_idx": 83,
            "predicted_sql": "select id, timestampdiff(year, birthday, curdate()) as age from patient where id in ( select id from examination where rvvt = '+' )",
            "ground_truth_sql": "select distinct t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rvvt = '+'",
            "res": 0
        },
        {
            "sql_idx": 84,
            "predicted_sql": "select p.id, p.sex, p.diagnosis from patient p join examination e on p.id = e.id where e.thrombosis = 2",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 2",
            "res": 0
        },
        {
            "sql_idx": 85,
            "predicted_sql": "select count(distinct id) as numberoffemalepatients from patient where year(description) = 1997 and sex = 'f' and admission = '-'",
            "ground_truth_sql": "select count(*) from patient where date_format(cast(description as datetime), '%y') = '1997' and sex = 'f' and admission = '-'",
            "res": 0
        },
        {
            "sql_idx": 86,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.thrombosis = 1 and t1.sex = 'f' and year(t2.examination date) = 1997",
            "ground_truth_sql": "select count(*) from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and date_format(cast(t2.examination date as datetime), '%y') = '1997' and t2.thrombosis = 1",
            "res": 0
        },
        {
            "sql_idx": 87,
            "predicted_sql": "select symptoms, diagnosis from examination where symptoms is not null order by examination date desc limit 1",
            "ground_truth_sql": "select t2.symptoms, t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where not t2.symptoms is null order by t1.birthday desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 88,
            "predicted_sql": "select t1.date, year(t1.first date) - year(t1.birthday) as age from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' order by t1.date desc limit 1",
            "ground_truth_sql": "select t1.date, date_format(cast(t2.first date as datetime), '%y') - date_format(cast(t2.birthday as datetime), '%y'), t2.birthday from laboratory as t1 inner join patient as t2 on t1.id = t2.id where t2.diagnosis = 'sjs' and not t2.birthday is null order by t2.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 89,
            "predicted_sql": "select sum(case when t1.sex = 'm' then 1 else 0 end) as male_count, sum(case when t1.sex = 'f' then 1 else 0 end) as female_count from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ua <= 8.0 and t1.sex = 'm' union all select sum(case when t1.sex = 'm' then 1 else 0 end) as male_count, sum(case when t1.sex = 'f' then 1 else 0 end) as female_count from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.ua <= 6.5 and t1.sex = 'f'",
            "ground_truth_sql": "select cast(sum(case when t2.ua <= 8.0 and t1.sex = 'm' then 1 else 0 end) as double) / sum(case when t2.ua <= 6.5 and t1.sex = 'f' then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 90,
            "predicted_sql": "select count(distinct t1.id) as underage_patients from patient as t1 inner join examination as t2 on t1.id = t2.id where year(t2.examination date) between 1990 and 1993 and year(t1.birthday) < 1990",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where date_format(cast(t2.examination date as datetime), '%y') between '1990' and '1993' and date_format(cast(t2.examination date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') < '18'",
            "res": 0
        },
        {
            "sql_idx": 91,
            "predicted_sql": "select timestampdiff(year, t1.birthday, t2.examination date) as age, t2.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
            "ground_truth_sql": "select date_format(cast(t2.date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y'), t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id order by t2.hgb desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 92,
            "predicted_sql": "select acl_igm from examination where examination date = '1993-11-12' and id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' )",
            "ground_truth_sql": "select acl iga, acl igg, acl igm from examination where id in ( select id from patient where diagnosis = 'sle' and description = '1994-02-19' ) and examination date = '1993-11-12'",
            "res": 0
        },
        {
            "sql_idx": 93,
            "predicted_sql": "select (sum(case when date like '1981-11-%' then t-cho else 0 end) - sum(case when date like '1981-12-%' then t-cho else 0 end)) / sum(case when date like '1981-12-%' then t-cho else 0 end) as decrease_rate from laboratory where id in ( select id from patient where birthday = '1959-02-18' )",
            "ground_truth_sql": "select cast(( sum(case when t2.date like '1981-11-%' then t2.t-cho else 0 end) - sum(case when t2.date like '1981-12-%' then t2.t-cho else 0 end) ) as double) / sum(case when t2.date like '1981-12-%' then t2.t-cho else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.birthday = '1959-02-18'",
            "res": 0
        },
        {
            "sql_idx": 94,
            "predicted_sql": "select t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.date between '1987-07-06' and '1996-01-31' and t2.gpt > 30 and t2.alb < 4",
            "ground_truth_sql": "select distinct id from laboratory where date between '1987-07-06' and '1996-01-31' and gpt > 30 and alb < 4",
            "res": 0
        },
        {
            "sql_idx": 95,
            "predicted_sql": "select count(*) as numberofpatients from examination e join laboratory l on e.id = l.id where e.thrombosis = 2 and e.ana = 's' and l.acl_igm > ( select avg(acl_igm) from laboratory ) * 1.2",
            "ground_truth_sql": "select count(*) from examination where thrombosis = 2 and ana pattern = 's' and acl igm > ( select avg(acl igm) * 1.2 from examination where thrombosis = 2 and ana pattern = 's' )",
            "res": 0
        },
        {
            "sql_idx": 96,
            "predicted_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.date like '1991-10%' and t2.t-bil < 2.0",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.admission = '-' and t2.t-bil < 2.0 and t2.date like '1991-10-%'",
            "res": 0
        },
        {
            "sql_idx": 97,
            "predicted_sql": "select avg(t2.alb) as average_blood_albumin_level from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'f' and t2.plt > 400 and t1.diagnosis = 'sle'",
            "ground_truth_sql": "select avg(t2.alb) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt > 400 and t1.diagnosis = 'sle' and t1.sex = 'f'",
            "res": 0
        },
        {
            "sql_idx": 98,
            "predicted_sql": "select count(*) as female_aps_diagnosed from patient where sex = 'f' and diagnosis = 'aps'",
            "ground_truth_sql": "select count(id) from patient where sex = 'f' and diagnosis = 'aps'",
            "res": 0
        },
        {
            "sql_idx": 99,
            "predicted_sql": "select (count(case when t1.sex = 'f' then 1 end) * 100.0 / count(t1.sex)) as percentage from patient as t1 inner join examination as t2 on t1.id = t2.id where year(t1.birthday) = 1980 and t2.diagnosis = 'ra'",
            "ground_truth_sql": "select cast(sum(case when sex = 'f' then 1 else 0 end) as double) * 100 / count(id) from patient where diagnosis = 'ra' and date_format(cast(birthday as datetime), '%y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 100,
            "predicted_sql": "select case when (select ua from laboratory where id = 57266) > 8 and sex = 'm' then 'within normal range' when (select ua from laboratory where id = 57266) > 6.5 and sex = 'f' then 'within normal range' else 'not within normal range' end as normalrangestatus",
            "ground_truth_sql": "select case when ( t1.sex = 'f' and t2.ua > 6.5 ) or ( t1.sex = 'm' and t2.ua > 8.0 ) then true else false end from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id = 57266",
            "res": 0
        },
        {
            "sql_idx": 101,
            "predicted_sql": "select distinct p.id from patient p join examination e on p.id = e.id where p.sex = 'm' and e.gpt >= 60",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.gpt >= 60",
            "res": 0
        },
        {
            "sql_idx": 102,
            "predicted_sql": "select t1.diagnosis from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
            "ground_truth_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.gpt > 60 order by t1.birthday asc",
            "res": 0
        },
        {
            "sql_idx": 103,
            "predicted_sql": "select t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
            "ground_truth_sql": "select distinct t1.id, t1.sex, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.un = 29",
            "res": 0
        },
        {
            "sql_idx": 104,
            "predicted_sql": "select p.sex, count(l.id) as patient_count from patient p join laboratory l on p.id = l.id where l.t-bil >= 2.0 group by p.sex",
            "ground_truth_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.t-bil >= 2.0 group by t1.sex, t1.id",
            "res": 0
        },
        {
            "sql_idx": 105,
            "predicted_sql": "select avg(year(curdate()) - year(birthday)) as average_age from patient where sex = 'm' and id in ( select id from examination where t-cho >= 250 )",
            "ground_truth_sql": "select avg(year(current_date) - year(t1.birthday)) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.t-cho >= 250 and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 106,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and year(curdate()) - year(t1.birthday) > 50",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.tg >= 200 and date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') > 50",
            "res": 0
        },
        {
            "sql_idx": 107,
            "predicted_sql": "select count(distinct t1.id) as male_patients from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'm' and t1.birthday between '1936-01-01' and '1956-12-31' and t2.cpk >= 250",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where date_format(cast(t1.birthday as datetime), '%y') between '1936' and '1956' and t1.sex = 'm' and t2.cpk >= 250",
            "res": 0
        },
        {
            "sql_idx": 108,
            "predicted_sql": "select id, sex, timestampdiff(year, birthday, curdate()) as age from patient where id in ( select id from laboratory where glu >= 180 ) and id in ( select id from laboratory where t-cho < 250 )",
            "ground_truth_sql": "select distinct t1.id, t1.sex, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.glu >= 180 and t2.t-cho < 250",
            "res": 0
        },
        {
            "sql_idx": 109,
            "predicted_sql": "select p.id, p.diagnosis, timestampdiff(year, p.birthday, curdate()) as age from patient p join laboratory l on p.id = l.id where l.rbc < 3.5",
            "ground_truth_sql": "select distinct t1.diagnosis, t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rbc < 3.5",
            "res": 0
        },
        {
            "sql_idx": 110,
            "predicted_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb between 10 and 17 order by t1.birthday desc limit 1",
            "ground_truth_sql": "select t1.id, t1.sex from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.diagnosis = 'sle' and t2.hgb > 10 and t2.hgb < 17 order by t1.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 111,
            "predicted_sql": "select id, timestampdiff(year, birthday, curdate()) as age from patient where id in ( select id from laboratory where hct >= 52 group by id having count(*) > 2 )",
            "ground_truth_sql": "select distinct t1.id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.id in ( select id from laboratory where hct >= 52 group by id having count(id) >= 2 )",
            "res": 0
        },
        {
            "sql_idx": 112,
            "predicted_sql": "select sum(case when plt < 100 then 1 else 0 end) as lower_than_normal, sum(case when plt > 400 then 1 else 0 end) as higher_than_normal from laboratory where plt < 100 or plt > 400",
            "ground_truth_sql": "select sum(case when t2.plt <= 100 then 1 else 0 end) - sum(case when t2.plt >= 400 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 113,
            "predicted_sql": "select t1.id, t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where year(t2.date) = 1984 and timestampdiff(year, t1.birthday, curdate()) < 50 and t2.plt between 100 and 400",
            "ground_truth_sql": "select distinct t1.id from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.plt between 100 and 400 and date_format(cast(t2.date as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') < 50 and date_format(cast(t2.date as datetime), '%y') = '1984'",
            "res": 0
        },
        {
            "sql_idx": 114,
            "predicted_sql": "select (count(case when t1.sex = 'f' and t2.pt >= 14 then 1 end) * 100.0 / count(t1.sex)) as percentage from patient as t1 inner join laboratory as t2 on t1.id = t2.id where year(curdate()) - year(t1.birthday) > 55",
            "ground_truth_sql": "select cast(sum(case when t2.pt >= 14 and t1.sex = 'f' then 1 else 0 end) as double) * 100 / count(case when t2.pt >= 14 then 1 else 0 end) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t1.birthday as datetime), '%y') > 55",
            "res": 0
        },
        {
            "sql_idx": 115,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t1.sex = 'm' and t2.wbc between 3.5 and 9.0 and (t2.fg <= 150 or t2.fg >= 450)",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.fg <= 150 or t2.fg >= 450 and t2.wbc > 3.5 and t2.wbc < 9.0 and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 116,
            "predicted_sql": "select count(distinct id) as numberofpatients from laboratory where igg >= 2000",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg >= 2000",
            "res": 0
        },
        {
            "sql_idx": 117,
            "predicted_sql": "select count(distinct t1.id) as num_patients from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.igg > 900 and t2.igg < 2000 and t2.symptoms is not null",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where t2.igg between 900 and 2000 and not t3.symptoms is null",
            "res": 0
        },
        {
            "sql_idx": 118,
            "predicted_sql": "select count(distinct id) as normal_iga_patients from patient as p join examination as e on p.id = e.id where p.first date > '1990-01-01' and e.iga > 80 and e.iga < 500",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.iga between 80 and 500 and date_format(cast(t1.first date as datetime), '%y') > '1990'",
            "res": 0
        },
        {
            "sql_idx": 119,
            "predicted_sql": "select diagnosis, count(*) as diagnosiscount from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.igm <= 40 or t2.igm >= 400 group by diagnosis order by diagnosiscount desc limit 1",
            "ground_truth_sql": "select t1.diagnosis from patient as t1 inner join laboratory as t2 on t1.id = t2.id where not t2.igm between 40 and 400 group by t1.diagnosis order by count(t1.diagnosis) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 120,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.crp = '+' and t1.description is null",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where (t2.crp = '+' ) and t1.description is null",
            "res": 0
        },
        {
            "sql_idx": 121,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and (year(curdate()) - year(t1.birthday)) < 70",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.cre >= 1.5 and year(curdate()) - year(t1.birthday) < 70",
            "res": 0
        },
        {
            "sql_idx": 122,
            "predicted_sql": "select count(distinct t1.id) as num_patients from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.rnp = '-' and t1.admission = '+'",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.rnp = 'negative' or t2.rnp = '0' and t1.admission = '+'",
            "res": 0
        },
        {
            "sql_idx": 123,
            "predicted_sql": "select count(distinct t1.id) from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.sm = 'negative' and t2.thrombosis = 0",
            "ground_truth_sql": "select count(t1.id) from examination as t1 inner join laboratory as t2 on t1.id = t2.id where t2.sm in ('negative', '0') and t1.thrombosis = 0",
            "res": 0
        },
        {
            "sql_idx": 124,
            "predicted_sql": "select count(distinct t1.id) as numberofpatients from patient as t1 inner join examination as t2 on t1.id = t2.id where t1.sex = 'f' and t2.symptoms is null and t2.sc170 in ('negative', '0')",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t3.id = t2.id where ( t2.sc170 = 'negative' or t2.sc170 = '0' ) and t1.sex = 'f' and t3.symptoms is null",
            "res": 0
        },
        {
            "sql_idx": 125,
            "predicted_sql": "select count(distinct t1.id) as male_count from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('-', '+-') and t2.ssb in ('-', '+-') and t1.sex = 'm'",
            "ground_truth_sql": "select count(distinct t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.centromea in ('negative', '0') and t2.ssb in ('negative', '0') and t1.sex = 'm'",
            "res": 0
        },
        {
            "sql_idx": 126,
            "predicted_sql": "select min(t1.birthday) as youngest_birthday from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.got >= 60",
            "ground_truth_sql": "select t1.birthday from patient as t1 inner join laboratory as t2 on t1.id = t2.id where t2.got >= 60 order by t1.birthday desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 127,
            "predicted_sql": "select count(distinct t1.id) as num_patients from patient as t1 inner join examination as t2 on t1.id = t2.id where t2.cpk < 250 and (t2.kct = '+' or t2.rvvt = '+' or t2.lac = '+')",
            "ground_truth_sql": "select count(t1.id) from patient as t1 inner join laboratory as t2 on t1.id = t2.id inner join examination as t3 on t1.id = t3.id where t2.cpk < 250 and ( t3.kct = '+' or t3.rvvt = '+' or t3.lac = '+' )",
            "res": 0
        }
    ],
    "european_football_2": [
        {
            "sql_idx": 128,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
            "ground_truth_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by sum(t1.home_team_goal + t1.away_team_goal) desc limit 1",
            "res": 1
        },
        {
            "sql_idx": 129,
            "predicted_sql": "select t1.team_long_name from team as t1 join match as t2 on t1.team_api_id = t2.away_team_api_id join league as t3 on t2.league_id = t3.id where t3.name = 'scotland premier league' and t2.season = '2009/2010' and t2.away_team_goal > t2.home_team_goal group by t1.team_long_name order by count(t2.away_team_goal) desc limit 1",
            "ground_truth_sql": "select teaminfo.team_long_name from league as leaguedata inner join match as matchdata on leaguedata.id = matchdata.league_id inner join team as teaminfo on matchdata.away_team_api_id = teaminfo.team_api_id where leaguedata.name = 'scotland premier league' and matchdata.season = '2009/2010' and matchdata.away_team_goal - matchdata.home_team_goal > 0 group by matchdata.away_team_api_id order by count(*) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 130,
            "predicted_sql": "select t.team_long_name, t.team_short_name, ta.buildupplayspeed from team t join team_attributes ta on t.team_api_id = ta.team_api_id order by ta.buildupplayspeed desc limit 4",
            "ground_truth_sql": "select t1.buildupplayspeed from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id order by t1.buildupplayspeed asc limit 4",
            "res": 0
        },
        {
            "sql_idx": 131,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
            "ground_truth_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' and t1.home_team_goal = t1.away_team_goal group by t2.name order by count(t1.id) desc limit 1",
            "res": 1
        },
        {
            "sql_idx": 132,
            "predicted_sql": "select date_format(curdate(), '%y') - date_format(birthday, '%y') - (date_format(curdate(), '%m%d') < date_format(birthday, '%m%d')) as age from player_attributes where sprint_speed >= 97 and year(date) between 2013 and 2015",
            "ground_truth_sql": "select distinct year(curdate()) - year(t2.birthday) as age from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.player_api_id where year(t1.date) between 2013 and 2015 and t1.sprint_speed >= 97",
            "res": 0
        },
        {
            "sql_idx": 133,
            "predicted_sql": "select t1.name, count(t2.league_id) as match_count from league as t1 join match as t2 on t1.id = t2.league_id group by t1.name order by match_count desc limit 1",
            "ground_truth_sql": "select t2.name, count(t1.id) from match as t1 inner join league as t2 on t1.league_id = t2.id group by t2.name order by count(t1.id) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 134,
            "predicted_sql": "select team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
            "ground_truth_sql": "select distinct team_fifa_api_id from team_attributes where buildupplayspeed > 50 and buildupplayspeed < 60",
            "res": 0
        },
        {
            "sql_idx": 135,
            "predicted_sql": "select t1.team_long_name from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t2.buildupplaypassing > ( select avg(buildupplaypassing) from team_attributes where str_to_date(date, '%y-%m-%d') >= str_to_date('2012-01-01', '%y-%m-%d') and str_to_date(date, '%y-%m-%d') <= str_to_date('2012-12-31', '%y-%m-%d') )",
            "ground_truth_sql": "select distinct t4.team_long_name from team_attributes as t3 inner join team as t4 on t3.team_api_id = t4.team_api_id where substr(t3.date, 1, 4) = '2012' and t3.buildupplaypassing > ( select cast(sum(t2.buildupplaypassing) as double) / count(t1.id) from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where date_format(cast(t2.date as datetime), '%y') = '2012' )",
            "res": 0
        },
        {
            "sql_idx": 136,
            "predicted_sql": "select cast(sum(case when t1.preferred_foot = 'left' then 1 else 0 end) as decimal(10, 2)) * 100 / count(t1.player_api_id) as percentage from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where year(str_to_date(t2.birthday, '%d/%m/%y')) between 1987 and 1992",
            "ground_truth_sql": "select cast(count(case when t2.preferred_foot = 'left' then t1.id else null end) as double) * 100 / count(t1.id) as percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t1.birthday, 1, 4) between '1987' and '1992'",
            "res": 0
        },
        {
            "sql_idx": 137,
            "predicted_sql": "select avg(t2.long_shots) as average_long_shots from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.player_name = 'ahmed samir farag'",
            "ground_truth_sql": "select cast(sum(t2.long_shots) as double) / count(t2.date) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'ahmed samir farag'",
            "res": 0
        },
        {
            "sql_idx": 138,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.height > 180 group by t1.player_name order by avg(t2.heading_accuracy) desc limit 10",
            "ground_truth_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 180 group by t1.id order by cast(sum(t2.heading_accuracy) as double) / count(t2.player_fifa_api_id) desc limit 10",
            "res": 0
        },
        {
            "sql_idx": 139,
            "predicted_sql": "select avg(t1.home_team_goal) as avg_home_goals, avg(t1.away_team_goal) as avg_away_goals, t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2009/2010' group by t2.name having avg_home_goals > avg_away_goals",
            "ground_truth_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2009/2010' group by t1.name having ( cast(sum(t2.home_team_goal) as double) / count(distinct t2.id) ) - ( cast(sum(t2.away_team_goal) as double) / count(distinct t2.id) ) > 0",
            "res": 0
        },
        {
            "sql_idx": 140,
            "predicted_sql": "select player_name from player where birthday like '1970-10-%'",
            "ground_truth_sql": "select player_name from player where substr(birthday, 1, 7) = '1970-10'",
            "res": 0
        },
        {
            "sql_idx": 141,
            "predicted_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t1.player_name = 'gabriel tamas' and t2.date like '%2011%' group by t2.overall_rating",
            "ground_truth_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'gabriel tamas' and date_format(cast(t2.date as datetime), '%y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 142,
            "predicted_sql": "select avg(home_team_goal) as average_home_team_goal from match join league on match.country_id = league.id where league.name = 'poland' and match.season = '2010/2011'",
            "ground_truth_sql": "select cast(sum(t2.home_team_goal) as double) / count(t2.id) from country as t1 inner join match as t2 on t1.id = t2.country_id where t1.name = 'poland' and t2.season = '2010/2011'",
            "res": 0
        },
        {
            "sql_idx": 143,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.finishing = ( select avg(finishing) from player_attributes where height = ( select max(height) from player ) or height = ( select min(height) from player ) )",
            "ground_truth_sql": "select a from (select avg(finishing) as result, 'max' as a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = (select max(height) from player) union select avg(finishing) as result, 'min' as a from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height = (select min(height) from player)) as derived order by result desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 144,
            "predicted_sql": "select avg(t2.overall_rating) as average_overall_rating from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t2.date between '2010-01-01' and '2015-12-31' and t1.height > 170",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.height > 170 and date_format(cast(t2.date as datetime), '%y') >= '2010' and date_format(cast(t2.date as datetime), '%y') <= '2015'",
            "res": 0
        },
        {
            "sql_idx": 145,
            "predicted_sql": "select (sum(case when t2.player_name = 'abdou diallo' then t1.ball_control else 0 end) / count(case when t2.player_name = 'abdou diallo' then t1.id else null end)) - (sum(case when t2.player_name = 'aaron appindangoye' then t1.ball_control else 0 end) / count(case when t2.player_name = 'aaron appindangoye' then t1.id else null end)) as difference from player_attributes t1 inner join player t2 on t1.player_api_id = t2.id",
            "ground_truth_sql": "select cast(sum( case when t1.player_name = 'abdou diallo' then t2.ball_control else 0 end ) as double) / count(case when t1.player_name = 'abdou diallo' then t2.id else null end) - cast(sum( case when t1.player_name = 'aaron appindangoye' then t2.ball_control else 0 end ) as double) / count(case when t1.player_name = 'aaron appindangoye' then t2.id else null end) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        },
        {
            "sql_idx": 146,
            "predicted_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday desc limit 1",
            "ground_truth_sql": "select player_name from player where player_name in ('aaron lennon', 'abdelaziz barrada') order by birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 147,
            "predicted_sql": "select player_name from player order by height desc limit 1",
            "ground_truth_sql": "select player_name from player order by height desc limit 1",
            "res": 1
        },
        {
            "sql_idx": 148,
            "predicted_sql": "select count(distinct player_api_id) as player_count from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
            "ground_truth_sql": "select count(player_api_id) from player_attributes where preferred_foot = 'left' and attacking_work_rate = 'low'",
            "res": 0
        },
        {
            "sql_idx": 149,
            "predicted_sql": "select count(distinct t1.player_api_id) from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.defensive_work_rate = 'high' and str_to_date(t1.birthday, '%d/%m/%y') < '1986-01-01'",
            "ground_truth_sql": "select count(distinct t1.player_name) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where date_format(cast(t1.birthday as datetime), '%y') < '1986' and t2.defensive_work_rate = 'high'",
            "res": 0
        },
        {
            "sql_idx": 150,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.volleys > 70 and t2.dribbling > 70",
            "res": 0
        },
        {
            "sql_idx": 151,
            "predicted_sql": "select count(*) as match_count from match m join league l on m.league_id = l.id where l.name = 'belgium jupiler league' and substr(m.date, 1, 7) = '2009-04'",
            "ground_truth_sql": "select count(t2.id) from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and substr(t2.date, 1, 7) = '2009-04'",
            "res": 0
        },
        {
            "sql_idx": 152,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2008/2009' group by t2.name order by count(t1.id) desc limit 1",
            "ground_truth_sql": "select t1.name from league as t1join match as t2 on t1.id = t2.league_id where t2.season = '2008/2009' group by t1.name having count(t2.id) = (select max(match_count) from (select count(t2.id) as match_count from match as t2 where t2.season = '2008/2009' group by t2.league_id) as subquery)",
            "res": 0
        },
        {
            "sql_idx": 153,
            "predicted_sql": "select ( (select overall_rating from player_attributes where player_name = 'ariel borysiuk') - (select overall_rating from player_attributes where player_name = 'paulin puel') ) * 100.0 / (select overall_rating from player_attributes where player_name = 'paulin puel') as percentage_difference",
            "ground_truth_sql": "select ( sum( case when t1.player_name = 'ariel borysiuk' then t2.overall_rating else 0 end ) * 1.0 - sum( case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end ) ) * 100 / sum( case when t1.player_name = 'paulin puel' then t2.overall_rating else 0 end ) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        },
        {
            "sql_idx": 154,
            "predicted_sql": "select avg(t1.overall_rating) as average_overall_rating from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.id where t2.player_name = 'pietro marino'",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t1.player_name = 'pietro marino'",
            "res": 0
        },
        {
            "sql_idx": 155,
            "predicted_sql": "select max(t2.chancecreationpassing), t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t1.team_long_name = 'ajax'",
            "ground_truth_sql": "select t2.chancecreationpassing, t2.chancecreationpassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'ajax' order by t2.chancecreationpassing desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 156,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.overall_rating = 77 and t2.date = '2016-06-23%' order by t1.birthday desc limit 1",
            "ground_truth_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.date, 1, 10) = '2016-06-23' and t2.overall_rating = 77 order by t1.birthday asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 157,
            "predicted_sql": "select overall_rating from player_attributes where player_name = 'aaron mooy' and date = '2016-02-04'",
            "ground_truth_sql": "select t2.overall_rating from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where substr(t2.date, 1, 10) = '2016-02-04' and t1.player_name = 'aaron mooy'",
            "res": 0
        },
        {
            "sql_idx": 158,
            "predicted_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t1.player_name = 'francesco migliore' and t2.date like '2015-05-01%'",
            "ground_truth_sql": "select t2.attacking_work_rate from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.date like '2015-05-01%' and t1.player_name = 'francesco migliore'",
            "res": 0
        },
        {
            "sql_idx": 159,
            "predicted_sql": "select t2.date from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc limit 1",
            "ground_truth_sql": "select date from (select t2.crossing, t2.date from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'kevin constant' order by t2.crossing desc) as subquery order by date desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 160,
            "predicted_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.date like '2010-02-22%'",
            "ground_truth_sql": "select t2.buildupplaypassingclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'fc lorient' and t2.date like '2010-02-22%'",
            "res": 0
        },
        {
            "sql_idx": 161,
            "predicted_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.date like '2015-09-10%'",
            "ground_truth_sql": "select t2.defenceaggressionclass from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t1.team_long_name = 'hannover 96' and t2.date like '2015-09-10%'",
            "res": 0
        },
        {
            "sql_idx": 162,
            "predicted_sql": "select avg(t2.overall_rating) as average_overall_rating from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and t2.date like '2007%' and t2.date like '%2016%'",
            "ground_truth_sql": "select cast(sum(t2.overall_rating) as double) / count(t2.id) from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.player_name = 'marko arnautovic' and substr(t2.date, 1, 10) between '2007-02-22' and '2016-04-21'",
            "res": 0
        },
        {
            "sql_idx": 163,
            "predicted_sql": "select (sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) - sum(case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end)) * 100.0 / sum(case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end) as percentage from player as t1 inner join player_attributes as t2 on t1.id = t2.player_fifa_api_id where t2.date = '2013-07-12'",
            "ground_truth_sql": "select ( sum( case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end ) * 1.0 - sum( case when t1.player_name = 'jordan bowery' then t2.overall_rating else 0 end ) ) * 100 / sum( case when t1.player_name = 'landon donovan' then t2.overall_rating else 0 end ) as lvsj_percent from player as t1 inner join player_attributes as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where substr(t2.date, 1, 10) = '2013-07-12'",
            "res": 0
        },
        {
            "sql_idx": 164,
            "predicted_sql": "select player_name from player order by height desc limit 1",
            "ground_truth_sql": "select player_name from (select player_name, height, dense_rank() over (order by height desc) as rankfrom player) as ranked_players where rank = 1",
            "res": 0
        },
        {
            "sql_idx": 165,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id order by t2.overall_rating desc limit 1",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = (select max(overall_rating) from player_attributes)",
            "res": 0
        },
        {
            "sql_idx": 166,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id where t2.attacking_work_rate = 'high' group by t1.player_name",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.attacking_work_rate = 'high'",
            "res": 0
        },
        {
            "sql_idx": 167,
            "predicted_sql": "select t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
            "ground_truth_sql": "select distinct t1.team_short_name from team as t1 inner join team_attributes as t2 on t1.team_api_id = t2.team_api_id where t2.chancecreationpassingclass = 'safe'",
            "res": 0
        },
        {
            "sql_idx": 168,
            "predicted_sql": "select count(*) as number_of_players from player where player_name like 'aaron%' and birthday > '1990'",
            "ground_truth_sql": "select count(id) from player where birthday > '1990' and player_name like 'aaron%'",
            "res": 0
        },
        {
            "sql_idx": 169,
            "predicted_sql": "select ( select jumping from player_attributes where player_api_id = 6 ) - ( select jumping from player_attributes where player_api_id = 23 ) as difference",
            "ground_truth_sql": "select sum(case when t1.id = 6 then t1.jumping else 0 end) - sum(case when t1.id = 23 then t1.jumping else 0 end) from player_attributes as t1",
            "res": 0
        },
        {
            "sql_idx": 170,
            "predicted_sql": "select t1.player_api_id from player_attributes as t1 inner join player as t2 on t1.player_fifa_api_id = t2.player_fifa_api_id where t1.preferred_foot = 'right' order by t1.potential asc limit 4",
            "ground_truth_sql": "select id from player_attributes where preferred_foot = 'right' order by potential asc limit 4",
            "res": 0
        },
        {
            "sql_idx": 171,
            "predicted_sql": "select count(distinct player_api_id) as player_count from player_attributes where preferred_foot = 'left' and crossing = ( select max(crossing) from player_attributes where preferred_foot = 'left' )",
            "ground_truth_sql": "select count(t1.id) from player_attributes as t1 where t1.preferred_foot = 'left' and t1.crossing = ( select max(crossing) from player_attributes )",
            "res": 0
        },
        {
            "sql_idx": 172,
            "predicted_sql": "select m.home_team_goal as home_team_score, m.away_team_goal as away_team_score from match m join league l on m.league_id = l.id where m.date like '2008-09-24%' and l.name = 'belgium jupiler league'",
            "ground_truth_sql": "select t2.home_team_goal, t2.away_team_goal from league as t1 inner join match as t2 on t1.id = t2.league_id where t1.name = 'belgium jupiler league' and t2.date like '2008-09-24%'",
            "res": 0
        },
        {
            "sql_idx": 173,
            "predicted_sql": "select t.team_long_name, taa.buildupplayspeedclass from team t join team_attributes taa on t.team_api_id = taa.team_api_id where t.team_long_name = 'ksv cercle brugge'",
            "ground_truth_sql": "select distinct t1.buildupplayspeedclass from team_attributes as t1 inner join team as t2 on t1.team_api_id = t2.team_api_id where t2.team_long_name = 'ksv cercle brugge'",
            "res": 0
        },
        {
            "sql_idx": 174,
            "predicted_sql": "select t1.finishing, t1.curve from player_attributes as t1 inner join player as t2 on t1.player_api_id = t2.id where t2.weight = ( select max(weight) from player )",
            "ground_truth_sql": "select id, finishing, curve from player_attributes where player_api_id = ( select player_api_id from player order by weight desc limit 1 ) limit 1",
            "res": 0
        },
        {
            "sql_idx": 175,
            "predicted_sql": "select t2.name from match as t1 inner join league as t2 on t1.league_id = t2.id where t1.season = '2015/2016' group by t2.name order by count(t1.id) desc limit 4",
            "ground_truth_sql": "select t1.name from league as t1 inner join match as t2 on t1.id = t2.league_id where t2.season = '2015/2016' group by t1.name order by count(t2.id) desc limit 4",
            "res": 0
        },
        {
            "sql_idx": 176,
            "predicted_sql": "select t1.team_long_name from team as t1 join match as t2 on t1.team_api_id = t2.away_team_api_id order by t2.away_team_goal desc limit 1",
            "ground_truth_sql": "select t2.team_long_name from match as t1 inner join team as t2 on t1.away_team_api_id = t2.team_api_id order by t1.away_team_goal desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 177,
            "predicted_sql": "select t1.player_name from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id order by t2.overall_rating desc limit 1",
            "ground_truth_sql": "select distinct t1.player_name from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating = ( select max(overall_rating) from player_attributes )",
            "res": 0
        },
        {
            "sql_idx": 178,
            "predicted_sql": "select (count(case when t1.height < 180 and t2.overall_rating > 70 then 1 else null end) * 100.0 / count(t1.id)) as percentage from player as t1 inner join player_attributes as t2 on t1.id = t2.player_api_id",
            "ground_truth_sql": "select cast(count(case when t2.overall_rating > 70 and t1.height < 180 then t1.id else null end) as double) * 100 / count(t1.id) as percent from player as t1 inner join player_attributes as t2 on t1.player_api_id = t2.player_api_id",
            "res": 0
        }
    ],
    "formula_1": [
        {
            "sql_idx": 179,
            "predicted_sql": "select t.driverref from ( select t1.driverref, t2.q1 from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid where t2.raceid = 20 order by t2.q1 desc limit 5 ) as t order by t.q1 desc",
            "ground_truth_sql": "select t2.driverref from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 20 order by t1.q1 desc limit 5",
            "res": 0
        },
        {
            "sql_idx": 180,
            "predicted_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t1.raceid = 19 and t1.q2 is not null order by t1.q2 asc limit 1",
            "ground_truth_sql": "select t2.surname from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 19 order by t1.q2 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 181,
            "predicted_sql": "select r.name from races r join circuits c on r.circuitid = c.circuitid where c.country = 'germany'",
            "ground_truth_sql": "select distinct t2.name from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t1.country = 'germany'",
            "res": 0
        },
        {
            "sql_idx": 182,
            "predicted_sql": "select c.lat, c.lng from circuits c join races r on c.circuitid = r.circuitid where r.name = 'australian grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'australian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 183,
            "predicted_sql": "select c.lat, c.lng from circuits c join races r on c.circuitid = r.circuitid where r.name = 'abu dhabi grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'abu dhabi grand prix'",
            "res": 0
        },
        {
            "sql_idx": 184,
            "predicted_sql": "select q1 from qualifying where raceid = 354 and driverid = ( select driverid from drivers where forename = 'bruno' and surname = 'senna' )",
            "ground_truth_sql": "select t1.q1 from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 354 and t2.forename = 'bruno' and t2.surname = 'senna'",
            "res": 0
        },
        {
            "sql_idx": 185,
            "predicted_sql": "select q.number from qualifying q where q.raceid = 903 and q.q3 = '1:54'",
            "ground_truth_sql": "select t2.number from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 903 and t1.q3 like '1:54%'",
            "res": 0
        },
        {
            "sql_idx": 186,
            "predicted_sql": "select count(distinct driverid) as drivers_not_finished from results where raceid = ( select raceid from races where name = 'bahrain grand prix' and year = 2007 ) and time is null",
            "ground_truth_sql": "select count(t3.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.year = 2007 and t1.name = 'bahrain grand prix' and t2.time is null",
            "res": 0
        },
        {
            "sql_idx": 187,
            "predicted_sql": "select d.driverref, d.surname, d.dob from drivers d join results r on d.driverid = r.driverid where r.raceid = 592 and r.time is not null order by d.dob asc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 592 and not t2.time is null and not t1.dob is null order by t1.dob asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 188,
            "predicted_sql": "select d.forename, d.surname, d.url from drivers d join laptimes lt on d.driverid = lt.driverid where lt.raceid = 161 and lt.time = '1:27'",
            "ground_truth_sql": "select distinct t2.forename, t2.surname, t2.url from laptimes as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 161 and t1.time like '1:27%'",
            "res": 0
        },
        {
            "sql_idx": 189,
            "predicted_sql": "select c.lat, c.lng from circuits c join races r on c.circuitid = r.circuitid where r.name = 'malaysian grand prix'",
            "ground_truth_sql": "select distinct t1.lat, t1.lng from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'malaysian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 190,
            "predicted_sql": "select t1.url from constructors as t1 inner join constructorresults as t2 on t1.constructorid = t2.constructorid where t2.raceid = 9 order by t2.points desc limit 1",
            "ground_truth_sql": "select t2.url from constructorresults as t1 inner join constructors as t2 on t2.constructorid = t1.constructorid where t1.raceid = 9 order by t1.points desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 191,
            "predicted_sql": "select t1.code from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid where t2.q3 = '1:33' and t2.raceid = 45",
            "ground_truth_sql": "select t2.code from qualifying as t1 inner join drivers as t2 on t2.driverid = t1.driverid where t1.raceid = 45 and t1.q3 like '1:33%'",
            "res": 0
        },
        {
            "sql_idx": 192,
            "predicted_sql": "select s.url from seasons s join races r on s.year = r.year where r.raceid = 901",
            "ground_truth_sql": "select t2.url from races as t1 inner join seasons as t2 on t2.year = t1.year where t1.raceid = 901",
            "res": 0
        },
        {
            "sql_idx": 193,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t2.raceid = 872 and t2.time is not null order by t1.dob desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t2.raceid = 872 and not t2.time is null order by t1.dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 194,
            "predicted_sql": "select d.nationality from drivers d join results r on d.driverid = r.driverid order by r.fastestlapspeed desc limit 1",
            "ground_truth_sql": "select t1.nationality from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid order by t2.fastestlapspeed desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 195,
            "predicted_sql": "select ( (select fastestlapspeed from results where raceid = 853) - (select fastestlapspeed from results where raceid = 854) ) * 100.0 / (select fastestlapspeed from results where raceid = 853) as percentage_faster",
            "ground_truth_sql": "select ( sum(case when t2.raceid = 853 then t2.fastestlapspeed else 0 end) - sum(case when t2.raceid = 854 then t2.fastestlapspeed else 0 end) ) * 100 / sum(case when t2.raceid = 853 then t2.fastestlapspeed else 0 end) from drivers as t1 inner join results as t2 on t2.driverid = t1.driverid where t1.forename = 'paul' and t1.surname = 'di resta'",
            "res": 0
        },
        {
            "sql_idx": 196,
            "predicted_sql": "select (count(distinct case when t2.time is not null then t1.driverid end) * 100.0 / count(distinct t1.driverid)) as completion_rate from results as t1 inner join pitstops as t2 on t1.driverid = t2.driverid and t1.raceid = t2.raceid where t1.raceid = ( select raceid from races where date = '1983-07-16' )",
            "ground_truth_sql": "select cast(count(case when not t2.time is null then t2.driverid end) as double) * 100 / count(t2.driverid) from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.date = '1983-07-16'",
            "res": 0
        },
        {
            "sql_idx": 197,
            "predicted_sql": "select name from races order by date asc limit 1",
            "ground_truth_sql": "select name from races where date_format(cast(date as datetime), '%y') = ( select date_format(cast(date as datetime), '%y') from races order by date asc limit 1 ) and date_format(cast(date as datetime), '%m') = ( select date_format(cast(date as datetime), '%m') from races order by date asc limit 1 )",
            "res": 0
        },
        {
            "sql_idx": 198,
            "predicted_sql": "select d.forename, d.surname, max(dr.points) as max_points from drivers d join driverstandings dr on d.driverid = dr.driverid group by d.forename, d.surname order by max_points desc limit 1",
            "ground_truth_sql": "select t3.forename, t3.surname, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid order by t2.points desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 199,
            "predicted_sql": "select d.forename, d.surname, r.name as race_name, lt.time as best_lap_time from drivers d join results r on d.driverid = r.driverid join laptimes lt on r.resultid = lt.driverid order by lt.milliseconds asc limit 1",
            "ground_truth_sql": "select t2.milliseconds, t1.forename, t1.surname, t3.name from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t2.milliseconds asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 200,
            "predicted_sql": "select avg(lt.milliseconds) as average_lap_time from drivers d join results r on d.driverid = r.driverid join races rc on r.raceid = rc.raceid join laptimes lt on r.resultid = lt.driverid where d.forename = 'lewis' and d.surname = 'hamilton' and rc.name = 'malaysian grand prix' and rc.year = 2009",
            "ground_truth_sql": "select avg(t2.milliseconds) from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.year = 2009 and t1.name = 'malaysian grand prix'",
            "res": 0
        },
        {
            "sql_idx": 201,
            "predicted_sql": "select (count(distinct case when position > 1 then raceid end) * 100.0 / count(distinct raceid)) as percentage from results join drivers on results.driverid = drivers.driverid where drivers.surname = 'hamilton' and results.raceid in ( select raceid from races where year >= 2010 )",
            "ground_truth_sql": "select cast(count(case when t2.position <> 1 then t2.position end) as double) * 100 / count(t2.driverstandingsid) from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.surname = 'hamilton' and t1.year >= 2010",
            "res": 0
        },
        {
            "sql_idx": 202,
            "predicted_sql": "select d.forename, d.surname, d.nationality, max(cs.wins) as max_wins, max(cs.points) as max_points from drivers d join driverstandings cs on d.driverid = cs.driverid group by d.forename, d.surname, d.nationality order by max_wins desc, max_points desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname, t1.nationality, max(t2.points) from drivers as t1 inner join driverstandings as t2 on t2.driverid = t1.driverid where t2.wins >= 1 group by t1.forename, t1.surname, t1.nationality order by count(t2.wins) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 203,
            "predicted_sql": "select year(curdate()) - year(dob) as age, concat(forename, ' ', surname) as name from drivers where nationality = 'japanese' order by dob desc limit 1",
            "ground_truth_sql": "select date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(dob as datetime), '%y'), forename, surname from drivers where nationality = 'japanese' order by dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 204,
            "predicted_sql": "select r.name as race_name, c.name as circuit_name, c.location as circuit_location from races r join circuits c on r.circuitid = c.circuitid where year(r.date) = 2005 and month(r.date) = 9",
            "ground_truth_sql": "select distinct t2.name, t1.name, t1.location from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.year = 2005 and date_format(cast(t2.date as datetime), '%m') = '09'",
            "res": 0
        },
        {
            "sql_idx": 205,
            "predicted_sql": "select r.name as race_name from races r join results res on r.raceid = res.raceid join drivers d on res.driverid = d.driverid where d.forename = 'alex' and d.surname = 'yoong' and res.position < 20",
            "ground_truth_sql": "select t1.name from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'alex' and t3.surname = 'yoong' and t2.position < 20",
            "res": 0
        },
        {
            "sql_idx": 206,
            "predicted_sql": "select r.name as race_name, r.year from races r join results rs on r.raceid = rs.raceid join drivers d on rs.driverid = d.driverid where d.forename = 'michael' and d.surname = 'schumacher' order by rs.milliseconds asc limit 1",
            "ground_truth_sql": "select t1.name, t1.year from races as t1 inner join laptimes as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'michael' and t3.surname = 'schumacher' order by t2.milliseconds asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 207,
            "predicted_sql": "select r.name as first_race, r.points as points_recorded from results r join drivers d on r.driverid = d.driverid where d.forename = 'lewis' and d.surname = 'hamilton' order by r.year asc, r.round asc limit 1",
            "ground_truth_sql": "select t1.name, t2.points from races as t1 inner join driverstandings as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' order by t1.year asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 208,
            "predicted_sql": "select (count(case when t2.country = 'germany' then 1 else null end) * 100.0 / count(*)) as percentage from races as t1 inner join circuits as t2 on t1.circuitid = t2.circuitid where t1.name = 'european grand prix'",
            "ground_truth_sql": "select cast(count(case when t1.country = 'germany' then t2.circuitid end) as double) * 100 / count(t2.circuitid) from circuits as t1 inner join races as t2 on t2.circuitid = t1.circuitid where t2.name = 'european grand prix'",
            "res": 0
        },
        {
            "sql_idx": 209,
            "predicted_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
            "ground_truth_sql": "select lat, lng from circuits where name = 'silverstone circuit'",
            "res": 1
        },
        {
            "sql_idx": 210,
            "predicted_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
            "ground_truth_sql": "select circuitref from circuits where name = 'marina bay street circuit'",
            "res": 1
        },
        {
            "sql_idx": 211,
            "predicted_sql": "select nationality from drivers order by dob asc limit 1",
            "ground_truth_sql": "select nationality from drivers where not dob is null order by dob asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 212,
            "predicted_sql": "select t2.driverref from races as t1 inner join results as t2 on t1.raceid = t2.raceid where t1.name = 'canadian grand prix' and t1.year = 2007 and t2.position = 1",
            "ground_truth_sql": "select t3.forename, t3.surname, t3.driverref from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t1.name = 'canadian grand prix' and t2.rank = 1 and t1.year = 2007",
            "res": 0
        },
        {
            "sql_idx": 213,
            "predicted_sql": "select r.name as race_name from results r join drivers d on r.driverid = d.driverid where d.forename = 'lewis' and d.surname = 'hamilton' order by r.rank asc limit 1",
            "ground_truth_sql": "select name from races where raceid in ( select raceid from results where rank = 1 and driverid = ( select driverid from drivers where forename = 'lewis' and surname = 'hamilton' ) )",
            "res": 0
        },
        {
            "sql_idx": 214,
            "predicted_sql": "select max(t2.fastestlapspeed) as fastest_lap_speed from races as t1 inner join results as t2 on t1.raceid = t2.raceid where t1.name = 'spanish grand prix' and t1.year = 2009",
            "ground_truth_sql": "select t2.fastestlapspeed from races as t1 inner join results as t2 on t2.raceid = t1.raceid where t1.name = 'spanish grand prix' and t1.year = 2009 and not t2.fastestlapspeed is null order by t2.fastestlapspeed desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 215,
            "predicted_sql": "select r.positionorder from results r join drivers d on r.driverid = d.driverid join races rc on r.raceid = rc.raceid where d.forename = 'lewis' and d.surname = 'hamilton' and rc.name = 'chinese grand prix' and rc.year = 2008 order by rc.year desc, rc.round desc limit 1",
            "ground_truth_sql": "select t2.positionorder from races as t1 inner join results as t2 on t2.raceid = t1.raceid inner join drivers as t3 on t3.driverid = t2.driverid where t3.forename = 'lewis' and t3.surname = 'hamilton' and t1.name = 'chinese grand prix' and t1.year = 2008",
            "res": 0
        },
        {
            "sql_idx": 216,
            "predicted_sql": "select r.time from results r join races rc on r.raceid = rc.raceid where rc.name = 'chinese grand prix' and r.rank = 2 and r.positiontext = '2nd'",
            "ground_truth_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t1.rank = 2 and t2.name = 'chinese grand prix' and t2.year = 2008",
            "res": 0
        },
        {
            "sql_idx": 217,
            "predicted_sql": "select count(distinct driverid) as drivers_participated from results where raceid in ( select raceid from races where year = 2008 and name = '2008 chinese grand prix' ) and time is not null",
            "ground_truth_sql": "select count(*) from (select t1.driverid from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'chinese grand prix' and t2.year = 2008 and t1.time is not null group by t1.driverid having count(t2.raceid) > 0) as derived_table",
            "res": 0
        },
        {
            "sql_idx": 218,
            "predicted_sql": "select (sum(t1.milliseconds) - min(t1.milliseconds)) * 100.0 / sum(t1.milliseconds) as percentage_faster from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2008 and t2.name = 'australian grand prix' and t1.position = 1",
            "ground_truth_sql": "with time_in_seconds as ( select t1.positionorder, case when t1.positionorder = 1 then ( cast(substr(t1.time, 1, 1) as double) * 3600 ) + ( cast(substr(t1.time, 3, 2) as double) * 60 ) + cast(substr(t1.time, 6) as double) else cast(substr(t1.time, 2) as double) end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'australian grand prix' and not t1.time is null and t2.year = 2008 ), champion_time as ( select time_seconds from time_in_seconds where positionorder = 1 ), last_driver_incremental as ( select time_seconds from time_in_seconds where positionorder = ( select max(positionorder) from time_in_seconds ) ) select ( cast(( select time_seconds from last_driver_incremental ) as double) * 100 ) / ( select time_seconds + ( select time_seconds from last_driver_incremental ) from champion_time )",
            "res": 0
        },
        {
            "sql_idx": 219,
            "predicted_sql": "select count(*) as circuit_count from circuits where country = 'australia' and location = 'adelaide'",
            "ground_truth_sql": "select count(circuitid) from circuits where location = 'adelaide' and country = 'australia'",
            "res": 0
        },
        {
            "sql_idx": 220,
            "predicted_sql": "select max(points) as max_points from constructorstandings join constructors on constructorstandings.constructorid = constructors.constructorid where constructors.nationality = 'british'",
            "ground_truth_sql": "select max(t1.points) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t2.nationality = 'british'",
            "res": 0
        },
        {
            "sql_idx": 221,
            "predicted_sql": "select distinct c.name from constructors c join constructorstandings cs on c.constructorid = cs.constructorid where cs.raceid = 291 and cs.points = 0",
            "ground_truth_sql": "select t2.name from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t1.raceid = 291",
            "res": 0
        },
        {
            "sql_idx": 222,
            "predicted_sql": "select count(distinct constructorid) as japanese_constructors_with_0_points_in_2_races from constructorstandings where points = 0 and constructorid in ( select constructorid from constructors where nationality = 'japanese' ) and raceid in ( select raceid from races group by raceid having count(raceid) = 2 )",
            "ground_truth_sql": "select count(t1.raceid) from constructorstandings as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid where t1.points = 0 and t2.nationality = 'japanese' group by t1.constructorid having count(raceid) = 2",
            "res": 0
        },
        {
            "sql_idx": 223,
            "predicted_sql": "select (count(distinct case when t2.time is not null then t1.driverid end) * 100.0 / count(distinct t1.driverid)) as completion_percentage from drivers as t1 inner join results as t2 on t1.driverid = t2.driverid where t1.nationality = 'japanese' and t2.year between 2007 and 2009",
            "ground_truth_sql": "select cast(sum(case when not t1.time is null then 1 else 0 end) as double) * 100 / count(t1.raceid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t3.nationality = 'japanese' and t2.year between 2007 and 2009",
            "res": 0
        },
        {
            "sql_idx": 224,
            "predicted_sql": "select year, avg(time_to_sec(timestamp(time, '00:00:00'))) as average_time_seconds from results where time is not null and year < 1975 group by year",
            "ground_truth_sql": "with time_in_seconds as (select t2.year, t2.raceid, t1.positionorder, case when t1.positionorder = 1 then (cast(substr(t1.time, 1, 1) as float) * 3600) + (cast(substr(t1.time, 3, 2) as float) * 60) + cast(substr(t1.time, 6, 2) as float) + cast(substr(t1.time, 9) as float) / 1000 else 0 end as time_seconds from results as t1 inner join races as t2 on t1.raceid = t2.raceid where not t1.time is null), champion_time as (select year, raceid, time_seconds from time_in_seconds where positionorder = 1) select year, avg(time_seconds) from champion_time where year < 1975 group by year having not avg(time_seconds) is null",
            "res": 0
        },
        {
            "sql_idx": 225,
            "predicted_sql": "select fastestlap from results where raceid in ( select raceid from races where year = 2009 ) order by positiontext = '1' desc, fastestlap asc limit 1",
            "ground_truth_sql": "select t1.fastestlap from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 226,
            "predicted_sql": "select avg(t.fastestlapspeed) as average_fastest_lap_speed from results t join races r on t.raceid = r.raceid where r.name = 'spanish grand prix' and r.year = 2009",
            "ground_truth_sql": "select avg(t1.fastestlapspeed) from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.year = 2009 and t2.name = 'spanish grand prix'",
            "res": 0
        },
        {
            "sql_idx": 227,
            "predicted_sql": "select (count(distinct case when year(dob) < 1985 then driverid end) * 100.0 / count(distinct case when year(r.date) between 2000 and 2005 then driverid end)) as percentage from drivers d join results r on d.driverid = r.driverid where r.laps > 50",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(t3.dob as datetime), '%y') < '1985' and t1.laps > 50 then 1 else 0 end ) as double) * 100 / count(*) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join drivers as t3 on t1.driverid = t3.driverid where t2.year between 2000 and 2005",
            "res": 0
        },
        {
            "sql_idx": 228,
            "predicted_sql": "select count(distinct driverid) as french_drivers_with_laptime_less_than_2_minutes from drivers where nationality = 'french' and driverid in ( select driverid from laptimes where time < '02:00:00' )",
            "ground_truth_sql": "select count(t1.driverid) from drivers as t1 inner join laptimes as t2 on t1.driverid = t2.driverid where t1.nationality = 'french' and ( cast(substr(t2.time, 1, 2) as signed) * 60 + cast(substr(t2.time, 4, 2) as signed) + cast(substr(t2.time, 7, 2) as double) / 1000 ) < 120",
            "res": 0
        },
        {
            "sql_idx": 229,
            "predicted_sql": "select code from drivers where nationality = 'american'",
            "ground_truth_sql": "select code from drivers where nationality = 'american'",
            "res": 1
        },
        {
            "sql_idx": 230,
            "predicted_sql": "select code, count(*) as netherlandic_drivers from drivers where nationality in ('netherlands', 'dutch') order by year(dob) desc limit 3",
            "ground_truth_sql": "select count(*) from (select t1.nationality from drivers as t1 order by t1.dob desc limit 3) as t3 where t3.nationality = 'dutch'",
            "res": 0
        },
        {
            "sql_idx": 231,
            "predicted_sql": "select driverref from drivers where nationality = 'german' order by dob asc limit 1",
            "ground_truth_sql": "select driverref from drivers where nationality = 'german' order by dob asc limit 1",
            "res": 1
        },
        {
            "sql_idx": 232,
            "predicted_sql": "select distinct d.driverid, d.code from drivers d join results r on d.driverid = r.driverid where year(d.dob) = 1971 and r.fastestlaptime is not null",
            "ground_truth_sql": "select t2.driverid, t2.code from results as t1 inner join drivers as t2 on t1.driverid = t2.driverid where date_format(cast(t2.dob as datetime), '%y') = '1971' and not t1.fastestlaptime is null",
            "res": 0
        },
        {
            "sql_idx": 233,
            "predicted_sql": "select count(*) as disqualified_finishers from results where raceid between 50 and 100 and statusid = 2 and time is not null",
            "ground_truth_sql": "select sum(case when not time is null then 1 else 0 end) from results where statusid = 2 and raceid < 100 and raceid > 50",
            "res": 0
        },
        {
            "sql_idx": 234,
            "predicted_sql": "select count(*) as times_held, location, concat(lat, ', ', lng) as coordinates from circuits where country = 'austria'",
            "ground_truth_sql": "select distinct location, lat, lng from circuits where country = 'austria'",
            "res": 0
        },
        {
            "sql_idx": 235,
            "predicted_sql": "select min(t2.year) as youngest_driver_year, t2.name as race_name, t2.date as race_date, t2.time as race_time from drivers as t1 inner join qualifying as t3 on t1.driverid = t3.driverid inner join races as t2 on t3.raceid = t2.raceid order by t1.dob desc limit 1",
            "ground_truth_sql": "select t3.year, t3.name, t3.date, t3.time from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where t1.driverid = ( select driverid from drivers order by dob desc limit 1 ) order by t3.date asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 236,
            "predicted_sql": "select d.forename, d.surname, avg(p.duration) as avg_duration from drivers d join pitstops p on d.driverid = p.driverid where d.nationality = 'german' and year(d.dob) between 1980 and 1985 group by d.forename, d.surname order by avg_duration asc limit 3",
            "ground_truth_sql": "select t2.forename, t2.surname from pitstops as t1 inner join drivers as t2 on t1.driverid = t2.driverid where t2.nationality = 'german' and date_format(cast(t2.dob as datetime), '%y') between '1980' and '1985' group by t2.forename, t2.surname order by avg(t1.duration) limit 3",
            "res": 0
        },
        {
            "sql_idx": 237,
            "predicted_sql": "select d.forename, d.surname, r.time from drivers d join results r on d.driverid = r.driverid join races rc on r.raceid = rc.raceid where rc.name = 'canadian grand prix' and rc.year = 2008 and r.position = 1",
            "ground_truth_sql": "select t1.time from results as t1 inner join races as t2 on t1.raceid = t2.raceid where t2.name = 'canadian grand prix' and t2.year = 2008 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 238,
            "predicted_sql": "select c.constructorref, c.url from constructors c join constructorstandings cs on c.constructorid = cs.constructorid join races r on cs.raceid = r.raceid where r.year = 2009 and r.name = 'singapore grand prix' order by cs.position asc limit 1",
            "ground_truth_sql": "select t3.constructorref, t3.url from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join constructors as t3 on t1.constructorid = t3.constructorid where t2.name = 'singapore grand prix' and t2.year = 2009 and t1.time like '_:%:__.___'",
            "res": 0
        },
        {
            "sql_idx": 240,
            "predicted_sql": "select c.name as constructor_name, c.nationality as constructor_nationality, cr.points from constructorresults cr join constructors c on cr.constructorid = c.constructorid join races r on cr.raceid = r.raceid where r.name = 'monaco grand prix' and r.year between 1980 and 2010 order by cr.points desc limit 1",
            "ground_truth_sql": "select sum(t1.points), t2.name, t2.nationality from constructorresults as t1 inner join constructors as t2 on t1.constructorid = t2.constructorid inner join races as t3 on t3.raceid = t1.raceid where t3.name = 'monaco grand prix' and t3.year between 1980 and 2010 group by t2.name order by sum(t1.points) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 241,
            "predicted_sql": "select t1.forename, t1.surname from drivers as t1 inner join qualifying as t2 on t1.driverid = t2.driverid inner join races as t3 on t3.raceid = t2.raceid inner join circuits as t4 on t4.circuitid = t3.circuitid where t2.position = 1 and t3.year = 2008 and t4.name = 'marina bay street circuit' and t2.q3 = '0:00:00.000'",
            "ground_truth_sql": "select t2.forename, t2.surname from qualifying as t1 inner join drivers as t2 on t1.driverid = t2.driverid inner join races as t3 on t1.raceid = t3.raceid where not q3 is null and t3.year = 2008 and t3.circuitid in ( select circuitid from circuits where name = 'marina bay street circuit' ) order by cast(substr(q3, 1, instr(q3, ':') - 1) as signed) * 60 + cast(substr(q3, instr(q3, ':') + 1, instr(q3, '.') - instr(q3, ':') - 1) as double) + cast(substr(q3, instr(q3, '.') + 1) as double) / 1000 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 242,
            "predicted_sql": "select d.forename, d.surname, d.nationality, r.name as race_name from drivers d join results r on d.driverid = r.driverid order by d.dob desc limit 1",
            "ground_truth_sql": "select t1.forename, t1.surname, t1.nationality, t3.name from drivers as t1 inner join driverstandings as t2 on t1.driverid = t2.driverid inner join races as t3 on t2.raceid = t3.raceid order by t1.dob desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 243,
            "predicted_sql": "select count(*) as accident_count from results join status on results.statusid = status.statusid where results.raceid = ( select raceid from races where name = 'canadian grand prix' ) and status.status = 'accident'",
            "ground_truth_sql": "select count(t1.driverid) from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join status as t3 on t1.statusid = t3.statusid where t3.statusid = 3 and t2.name = 'canadian grand prix' group by t1.driverid order by count(t1.driverid) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 244,
            "predicted_sql": "select d.forename, d.surname from drivers d join ( select driverid from laptimes order by time(time) asc limit 20 ) as shortest_lap on d.driverid = shortest_lap.driverid",
            "ground_truth_sql": "with lap_times_in_seconds as (select driverid, (case when substr(time, 1, instr(time, ':') - 1) <> '' then cast(substr(time, 1, instr(time, ':') - 1) as float) * 60 else 0 end + case when substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) <> '' then cast(substr(time, instr(time, ':') + 1, instr(time, '.') - instr(time, ':') - 1) as float) else 0 end + case when substr(time, instr(time, '.') + 1) <> '' then cast(substr(time, instr(time, '.') + 1) as float) / 1000 else 0 end) as time_in_seconds from laptimes) select t2.forename, t2.surname, t1.driverid from (select driverid, min(time_in_seconds) as min_time_in_seconds from lap_times_in_seconds group by driverid) as t1 inner join drivers as t2 on t1.driverid = t2.driverid order by t1.min_time_in_seconds asc limit 20",
            "res": 0
        },
        {
            "sql_idx": 245,
            "predicted_sql": "select r.name as race_name, q.q1, q.q2, q.q3 from races r join qualifying q on r.raceid = q.raceid join circuits c on r.circuitid = c.circuitid where c.country = 'italy' order by q.q1, q.q2, q.q3",
            "ground_truth_sql": "with fastest_lap_times as ( select t1.raceid, t1.fastestlaptime, ( cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as double) * 60 ) + ( cast(substr( t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1 ) as double) ) + ( cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as double) / 1000 ) as time_in_seconds from results as t1 where not t1.fastestlaptime is null ) select t1.fastestlaptime as lap_record from results as t1 inner join races as t2 on t1.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid inner join ( select min(fastest_lap_times.time_in_seconds) as min_time_in_seconds from fastest_lap_times inner join races as t2 on fastest_lap_times.raceid = t2.raceid inner join circuits as t3 on t2.circuitid = t3.circuitid where t3.country = 'italy' ) as t4 on ( cast(substr(t1.fastestlaptime, 1, instr(t1.fastestlaptime, ':') - 1) as double) * 60 ) + ( cast(substr( t1.fastestlaptime, instr(t1.fastestlaptime, ':') + 1, instr(t1.fastestlaptime, '.') - instr(t1.fastestlaptime, ':') - 1 ) as double) ) + ( cast(substr(t1.fastestlaptime, instr(t1.fastestlaptime, '.') + 1) as double) / 1000 ) = t4.min_time_in_seconds limit 1",
            "res": 0
        }
    ],
    "superhero": [
        {
            "sql_idx": 239,
            "predicted_sql": "select s.power_name from superpower s join hero_power hp on s.id = hp.power_id join superhero h on hp.hero_id = h.id where h.superhero_name = '3-d man'",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = '3-d man'",
            "res": 0
        },
        {
            "sql_idx": 246,
            "predicted_sql": "select count(distinct h.id) as superhero_count from superhero h join hero_power hp on h.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'super strength' and h.height_cm > 200",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.height_cm > 200",
            "res": 0
        },
        {
            "sql_idx": 247,
            "predicted_sql": "select count(distinct h.id) as superhero_count from superhero s join hero_power hp on s.id = hp.hero_id join superpower p on hp.power_id = p.id join colour c on s.eye_colour_id = c.id where c.colour = 'blue' and p.power_name = 'agility'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join colour as t4 on t1.eye_colour_id = t4.id where t3.power_name = 'agility' and t4.colour = 'blue'",
            "res": 0
        },
        {
            "sql_idx": 248,
            "predicted_sql": "select s.superhero_name from superhero s join colour c on s.eye_colour_id = c.id and s.hair_colour_id = c.id where c.colour in ('blue', 'blond')",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'blond'",
            "res": 0
        },
        {
            "sql_idx": 249,
            "predicted_sql": "select s.superhero_name, s.height_cm from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'marvel comics' order by s.height_cm desc",
            "ground_truth_sql": "select superhero_name, height_cm, rank() over (order by height_cm desc) as heightrank from superhero inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics'",
            "res": 0
        },
        {
            "sql_idx": 250,
            "predicted_sql": "select c.colour, count(s.id) as popularity from superhero s join publisher p on s.publisher_id = p.id join colour c on s.eye_colour_id = c.id where p.publisher_name = 'marvel comics' group by c.colour order by popularity desc",
            "ground_truth_sql": "select colour.colour as eyecolor, count(superhero.id) as count, rank() over (order by count(superhero.id) desc) as popularityrank from superhero inner join colour on superhero.eye_colour_id = colour.id inner join publisher on superhero.publisher_id = publisher.id where publisher.publisher_name = 'marvel comics' group by colour.colour",
            "res": 0
        },
        {
            "sql_idx": 251,
            "predicted_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id join publisher p on s.publisher_id = p.id where p.publisher_name = 'marvel comics' and sp.power_name = 'super strength'",
            "ground_truth_sql": "select superhero_name from superhero as t1 where exists( select 1 from hero_power as t2 inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'super strength' and t1.id = t2.hero_id ) and exists( select 1 from publisher as t4 where t4.publisher_name = 'marvel comics' and t1.publisher_id = t4.id )",
            "res": 0
        },
        {
            "sql_idx": 252,
            "predicted_sql": "select p.publisher_name from superhero s join publisher p on s.publisher_id = p.id join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where a.attribute_name = 'speed' order by ha.attribute_value asc limit 1",
            "ground_truth_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join hero_attribute as t3 on t1.id = t3.hero_id inner join attribute as t4 on t3.attribute_id = t4.id where t4.attribute_name = 'speed' order by t3.attribute_value limit 1",
            "res": 0
        },
        {
            "sql_idx": 253,
            "predicted_sql": "select count(distinct s.id) as gold_eyed_superheroes from superhero s join publisher p on s.publisher_id = p.id join colour c on s.eye_colour_id = c.id where p.publisher_name = 'marvel comics' and c.colour = 'gold'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join colour as t3 on t1.eye_colour_id = t3.id where t2.publisher_name = 'marvel comics' and t3.colour = 'gold'",
            "res": 0
        },
        {
            "sql_idx": 254,
            "predicted_sql": "select s.superhero_name from superhero s join hero_attribute ha on s.id = ha.hero_id where ha.attribute_name = 'intelligence' order by ha.attribute_value asc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'intelligence' order by t2.attribute_value limit 1",
            "res": 0
        },
        {
            "sql_idx": 255,
            "predicted_sql": "select r.race from superhero s join race r on s.race_id = r.id where s.superhero_name = 'copycat'",
            "ground_truth_sql": "select t2.race from superhero as t1 inner join race as t2 on t1.race_id = t2.id where t1.superhero_name = 'copycat'",
            "res": 0
        },
        {
            "sql_idx": 256,
            "predicted_sql": "select s.superhero_name from superhero s join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where a.attribute_name = 'durability' and ha.attribute_value < 50",
            "ground_truth_sql": "select superhero_name from superhero as t1 where exists( select 1 from hero_attribute as t2 inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'durability' and t2.attribute_value < 50 and t1.id = t2.hero_id )",
            "res": 0
        },
        {
            "sql_idx": 257,
            "predicted_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'death touch'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'death touch'",
            "res": 0
        },
        {
            "sql_idx": 258,
            "predicted_sql": "select count(distinct s.id) as female_superheroes_with_strength_100 from superhero s join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where s.gender_id = ( select id from gender where gender = 'female' ) and a.attribute_name = 'strength' and ha.attribute_value = 100",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.attribute_name = 'strength' and t2.attribute_value = 100 and t4.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 259,
            "predicted_sql": "select (count(case when t1.publisher_name = 'marvel comics' then 1 end) * 100.0 / count(t1.id)) as percentage, count(case when t1.publisher_name = 'marvel comics' then 1 end) as count_marvel_comics from publisher as t1 inner join superhero as t2 on t1.id = t2.publisher_id inner join alignment as t3 on t2.alignment_id = t3.id where t3.alignment = 'bad'",
            "ground_truth_sql": "select ( cast(count(*) as double) * 100 / ( select count(*) from superhero ) ), cast(sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) as double) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join alignment as t3 on t3.id = t1.alignment_id where t3.alignment = 'bad'",
            "res": 0
        },
        {
            "sql_idx": 260,
            "predicted_sql": "select ( select count(*) from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'marvel comics' ) - ( select count(*) from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'dc comics' ) as difference_in_superheroes",
            "ground_truth_sql": "select sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 261,
            "predicted_sql": "select id from publisher where publisher_name = 'star trek'",
            "ground_truth_sql": "select id from publisher where publisher_name = 'star trek'",
            "res": 1
        },
        {
            "sql_idx": 262,
            "predicted_sql": "select count(*) as total_superheroes_without_full_name from superhero where full_name is null",
            "ground_truth_sql": "select count(id) from superhero where full_name is null",
            "res": 0
        },
        {
            "sql_idx": 263,
            "predicted_sql": "select avg(s.weight_kg) as average_weight from superhero s join gender g on s.gender_id = g.id where g.gender = 'female'",
            "ground_truth_sql": "select avg(t1.weight_kg) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 264,
            "predicted_sql": "select distinct s.power_name from superpower s join hero_power hp on s.id = hp.power_id join superhero h on hp.hero_id = h.id join gender g on h.gender_id = g.id where g.gender = 'male' limit 5",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t3.id = t2.power_id inner join gender as t4 on t4.id = t1.gender_id where t4.gender = 'male' limit 5",
            "res": 0
        },
        {
            "sql_idx": 265,
            "predicted_sql": "select s.superhero_name from superhero s join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where s.height_cm between 170 and 190 and a.attribute_name = 'eye color' and ha.attribute_value = 0",
            "ground_truth_sql": "select distinct t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.height_cm between 170 and 190 and t2.colour = 'no colour'",
            "res": 0
        },
        {
            "sql_idx": 266,
            "predicted_sql": "select c.colour from superhero s join race r on s.race_id = r.id join colour c on s.hair_colour_id = c.id where r.race = 'human' and s.height_cm = 185",
            "ground_truth_sql": "select distinct t3.colour from superhero as t1 inner join race as t2 on t1.race_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t1.height_cm = 185 and t2.race = 'human'",
            "res": 0
        },
        {
            "sql_idx": 267,
            "predicted_sql": "select (count(case when t2.publisher_name = 'marvel comics' then 1 else null end) * 100.0 / count(*)) as percentage from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
            "ground_truth_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' then 1 else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.height_cm between 150 and 180",
            "res": 0
        },
        {
            "sql_idx": 268,
            "predicted_sql": "select superhero_name from superhero where gender_id = ( select id from gender where gender = 'male' ) and weight_kg > ( select avg(weight_kg) * 0.79 from superhero )",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'male' and t1.weight_kg * 100 > ( select avg(weight_kg) from superhero ) * 79",
            "res": 0
        },
        {
            "sql_idx": 269,
            "predicted_sql": "select s.power_name from superpower s join hero_power hp on s.id = hp.power_id where hp.hero_id = 1",
            "ground_truth_sql": "select distinct t2.power_name from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t1.hero_id = 1",
            "res": 0
        },
        {
            "sql_idx": 270,
            "predicted_sql": "select count(distinct hp.hero_id) as hero_count from hero_power hp join superpower sp on hp.power_id = sp.id where sp.power_name = 'stealth'",
            "ground_truth_sql": "select count(t1.hero_id) from hero_power as t1 inner join superpower as t2 on t1.power_id = t2.id where t2.power_name = 'stealth'",
            "res": 0
        },
        {
            "sql_idx": 271,
            "predicted_sql": "select s.full_name from superhero s join hero_attribute ha on s.id = ha.hero_id join attribute a on ha.attribute_id = a.id where a.attribute_name = 'strength' order by ha.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.full_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t3.attribute_name = 'strength' order by t2.attribute_value desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 272,
            "predicted_sql": "select s.superhero_name from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'dark horse comics' order by h.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t3.id = t2.attribute_id inner join publisher as t4 on t4.id = t1.publisher_id where t4.publisher_name = 'dark horse comics' and t3.attribute_name = 'durability' order by t2.attribute_value desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 273,
            "predicted_sql": "select s.eye_colour_id as eyes, s.hair_colour_id as hair, s.skin_colour_id as skin_colour from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'dark horse comics' and s.gender_id = ( select id from gender where gender = 'female' )",
            "ground_truth_sql": "select t1.eye_colour_id, t1.hair_colour_id, t1.skin_colour_id from superhero as t1 inner join publisher as t2 on t2.id = t1.publisher_id inner join gender as t3 on t3.id = t1.gender_id where t2.publisher_name = 'dark horse comics' and t3.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 274,
            "predicted_sql": "select s.superhero_name, p.publisher_name from superhero s join publisher p on s.publisher_id = p.id where s.hair_colour_id = s.skin_colour_id and s.hair_colour_id = s.eye_colour_id",
            "ground_truth_sql": "select t1.superhero_name, t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.eye_colour_id = t1.hair_colour_id and t1.eye_colour_id = t1.skin_colour_id",
            "res": 0
        },
        {
            "sql_idx": 275,
            "predicted_sql": "select (count(case when t1.skin_colour_id = ( select id from colour where colour = 'blue' ) then 1 else null end) * 100.0 / count(t1.id)) as percentage from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id where t2.gender = 'female'",
            "ground_truth_sql": "select cast(count(case when t3.colour = 'blue' then t1.id else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.gender = 'female'",
            "res": 0
        },
        {
            "sql_idx": 276,
            "predicted_sql": "select count(distinct hp.power_id) as number_of_powers from superhero s join hero_power hp on s.id = hp.hero_id where s.superhero_name = 'amazo'",
            "ground_truth_sql": "select count(t1.power_id) from hero_power as t1 inner join superhero as t2 on t1.hero_id = t2.id where t2.superhero_name = 'amazo'",
            "res": 0
        },
        {
            "sql_idx": 277,
            "predicted_sql": "select s.height_cm from superhero s join colour c on s.eye_colour_id = c.id where c.colour = 'amber'",
            "ground_truth_sql": "select t1.height_cm from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'amber'",
            "res": 0
        },
        {
            "sql_idx": 278,
            "predicted_sql": "select s.superhero_name from superhero s join colour c on s.eye_colour_id = c.id and s.hair_colour_id = c.id where c.colour = 'black'",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id and t1.hair_colour_id = t2.id where t2.colour = 'black'",
            "res": 0
        },
        {
            "sql_idx": 279,
            "predicted_sql": "select superhero_name from superhero where alignment_id = ( select id from alignment where alignment = 'neutral' )",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id where t2.alignment = 'neutral'",
            "res": 0
        },
        {
            "sql_idx": 280,
            "predicted_sql": "select count(distinct h.id) as hero_count from hero_attribute ha join attribute a on ha.attribute_id = a.id join superhero s on ha.hero_id = s.id where a.attribute_name = 'strength' and ha.attribute_value = ( select max(attribute_value) from hero_attribute ha join attribute a on ha.attribute_id = a.id where a.attribute_name = 'strength' )",
            "ground_truth_sql": "select count(t1.hero_id) from hero_attribute as t1 inner join attribute as t2 on t1.attribute_id = t2.id where t2.attribute_name = 'strength' and t1.attribute_value = ( select max(attribute_value) from hero_attribute )",
            "res": 0
        },
        {
            "sql_idx": 281,
            "predicted_sql": "select (count(case when t1.gender = 'female' then 1 end) * 100.0 / count(t1.publisher_id)) as percentage from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t2.publisher_name = 'marvel comics'",
            "ground_truth_sql": "select cast(count(case when t2.publisher_name = 'marvel comics' and t3.gender = 'female' then 1 else null end) as double) * 100 / count(case when t2.publisher_name = 'marvel comics' then 1 else null end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id inner join gender as t3 on t1.gender_id = t3.id",
            "res": 0
        },
        {
            "sql_idx": 282,
            "predicted_sql": "select ( select weight_kg from superhero where full_name = 'emil blonsky' ) - ( select weight_kg from superhero where full_name = 'charles chandler' ) as weight_difference",
            "ground_truth_sql": "select ( select weight_kg from superhero where full_name like 'emil blonsky' ) - ( select weight_kg from superhero where full_name like 'charles chandler' ) as calculate",
            "res": 0
        },
        {
            "sql_idx": 283,
            "predicted_sql": "select avg(height_cm) as average_height from superhero",
            "ground_truth_sql": "select cast(sum(height_cm) as double) / count(id) from superhero",
            "res": 0
        },
        {
            "sql_idx": 284,
            "predicted_sql": "select sp.power_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where s.superhero_name = 'abomination'",
            "ground_truth_sql": "select t3.power_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t1.superhero_name = 'abomination'",
            "res": 0
        },
        {
            "sql_idx": 285,
            "predicted_sql": "select s.superhero_name from superhero s join hero_attribute ha on s.id = ha.hero_id where ha.attribute_name = 'speed' order by ha.attribute_value desc limit 1",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.idwhere t3.attribute_name = 'speed' and t2.attribute_value = (select max(attribute_value) from hero_attribute as t2b where t2b.attribute_id = t3.id ) limit 1",
            "res": 0
        },
        {
            "sql_idx": 286,
            "predicted_sql": "select a.attribute_name, ha.attribute_value from hero_attribute ha join attribute a on ha.attribute_id = a.id join superhero s on ha.hero_id = s.id where s.superhero_name = '3-d man'",
            "ground_truth_sql": "select t3.attribute_name, t2.attribute_value from superhero as t1 inner join hero_attribute as t2 on t1.id = t2.hero_id inner join attribute as t3 on t2.attribute_id = t3.id where t1.superhero_name = '3-d man'",
            "res": 0
        },
        {
            "sql_idx": 287,
            "predicted_sql": "select s.superhero_name from superhero s join colour c on s.eye_colour_id = c.id and s.hair_colour_id = c.id where c.colour in ('blue', 'brown')",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id inner join colour as t3 on t1.hair_colour_id = t3.id where t2.colour = 'blue' and t3.colour = 'brown'",
            "res": 0
        },
        {
            "sql_idx": 288,
            "predicted_sql": "select t.publisher_name from publisher as t join superhero as t2 on t.id = t2.publisher_id where t2.superhero_name in ('hawkman', 'karate kid', 'speedy')",
            "ground_truth_sql": "select t2.publisher_name from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id where t1.superhero_name in ('hawkman', 'karate kid', 'speedy')",
            "res": 0
        },
        {
            "sql_idx": 289,
            "predicted_sql": "select (count(case when t2.colour = 'blue' then 1 else null end) * 100.0 / count(t1.id)) as percentage from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t2.colour = 'blue'",
            "ground_truth_sql": "select cast(count(case when t2.colour = 'blue' then 1 else null end) as double) * 100 / count(t1.id) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 290,
            "predicted_sql": "select sum(case when t.gender_id = 1 then 1 else 0 end) as male_count, sum(case when t.gender_id = 2 then 1 else 0 end) as female_count, cast(sum(case when t.gender_id = 1 then 1 else 0 end) as decimal(10, 2)) / sum(case when t.gender_id = 2 then 1 else 0 end) as ratio from superhero t",
            "ground_truth_sql": "select cast(count(case when t2.gender = 'male' then t1.id else null end) as double) / count(case when t2.gender = 'female' then t1.id else null end) from superhero as t1 inner join gender as t2 on t1.gender_id = t2.id",
            "res": 0
        },
        {
            "sql_idx": 291,
            "predicted_sql": "select c.colour from superhero s join colour c on s.eye_colour_id = c.id where s.full_name = 'karen beecher-duncan'",
            "ground_truth_sql": "select t2.colour from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.full_name = 'karen beecher-duncan'",
            "res": 0
        },
        {
            "sql_idx": 292,
            "predicted_sql": "select sum(case when t1.eye_colour_id = 7 then 1 else 0 end) - sum(case when t1.eye_colour_id = 1 then 1 else 0 end) as difference from superhero as t1 where t1.weight_kg = 0 or t1.weight_kg is null",
            "ground_truth_sql": "select sum(case when t2.id = 7 then 1 else 0 end) - sum(case when t2.id = 1 then 1 else 0 end) from superhero as t1 inner join colour as t2 on t1.eye_colour_id = t2.id where t1.weight_kg = 0 or t1.weight_kg is null",
            "res": 0
        },
        {
            "sql_idx": 293,
            "predicted_sql": "select count(*) as green_skinned_villains_count from superhero s join alignment a on s.alignment_id = a.id join colour c on s.skin_colour_id = c.id where a.alignment = 'bad' and c.colour = 'green'",
            "ground_truth_sql": "select count(t1.id) from superhero as t1 inner join alignment as t2 on t1.alignment_id = t2.id inner join colour as t3 on t1.skin_colour_id = t3.id where t2.alignment = 'bad' and t3.colour = 'green'",
            "res": 0
        },
        {
            "sql_idx": 294,
            "predicted_sql": "select s.superhero_name from superhero s join hero_power hp on s.id = hp.hero_id join superpower p on hp.power_id = p.id where p.power_name = 'wind control' order by s.superhero_name asc",
            "ground_truth_sql": "select t1.superhero_name from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id where t3.power_name = 'wind control' order by t1.superhero_name",
            "res": 0
        },
        {
            "sql_idx": 295,
            "predicted_sql": "select g.gender from gender g join superhero s on g.id = s.gender_id join hero_power hp on s.id = hp.hero_id join superpower sp on hp.power_id = sp.id where sp.power_name = 'phoenix force'",
            "ground_truth_sql": "select t4.gender from superhero as t1 inner join hero_power as t2 on t1.id = t2.hero_id inner join superpower as t3 on t2.power_id = t3.id inner join gender as t4 on t1.gender_id = t4.id where t3.power_name = 'phoenix force'",
            "res": 0
        },
        {
            "sql_idx": 296,
            "predicted_sql": "select ( select count(*) from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'dc comics' ) - ( select count(*) from superhero s join publisher p on s.publisher_id = p.id where p.publisher_name = 'marvel comics' ) as difference_in_superheroes",
            "ground_truth_sql": "select sum(case when t2.publisher_name = 'dc comics' then 1 else 0 end) - sum(case when t2.publisher_name = 'marvel comics' then 1 else 0 end) from superhero as t1 inner join publisher as t2 on t1.publisher_id = t2.id",
            "res": 0
        }
    ],
    "codebase_community": [
        {
            "sql_idx": 297,
            "predicted_sql": "select displayname, max(reputation) as highestreputation from users where displayname in ('harlan', 'jarrod dixon') group by displayname",
            "ground_truth_sql": "select displayname from users where displayname in ('harlan', 'jarrod dixon') and reputation = ( select max(reputation) from users where displayname in ('harlan', 'jarrod dixon') )",
            "res": 0
        },
        {
            "sql_idx": 298,
            "predicted_sql": "select displayname from users where year(creationdate) = 2011",
            "ground_truth_sql": "select displayname from users where date_format(cast(creationdate as datetime), '%y') = '2011'",
            "res": 0
        },
        {
            "sql_idx": 299,
            "predicted_sql": "select count(*) as numberofusers from users where lastaccessdate > '2014-09-01'",
            "ground_truth_sql": "select count(id) from users where date(lastaccessdate) > '2014-09-01'",
            "res": 0
        },
        {
            "sql_idx": 300,
            "predicted_sql": "select u.displayname from users u join posts p on u.id = p.owneruserid where p.title = 'eliciting priors from experts'",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'eliciting priors from experts'",
            "res": 0
        },
        {
            "sql_idx": 301,
            "predicted_sql": "select count(*) as numberofposts from posts where ownerdisplayname = 'csgillespie'",
            "ground_truth_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "res": 0
        },
        {
            "sql_idx": 302,
            "predicted_sql": "select u.displayname from users u join posts p on u.id = p.owneruserid join posthistory ph on p.id = ph.postid where p.title = 'examples for teaching: correlation does not mean causation' order by ph.creationdate desc limit 1",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.lasteditoruserid = t2.id where t1.title = 'examples for teaching: correlation does not mean causation'",
            "res": 0
        },
        {
            "sql_idx": 303,
            "predicted_sql": "select count(*) from posts p join users u on p.owneruserid = u.id where u.age > 65 and p.score > 19",
            "ground_truth_sql": "select count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score >= 20 and t2.age > 65",
            "res": 0
        },
        {
            "sql_idx": 304,
            "predicted_sql": "select p.body from posts p join tags t on p.id = t.excerptpostid where t.tagname = 'bayesian'",
            "ground_truth_sql": "select t2.body from tags as t1 inner join posts as t2 on t2.id = t1.excerptpostid where t1.tagname = 'bayesian'",
            "res": 0
        },
        {
            "sql_idx": 305,
            "predicted_sql": "select avg(p.score) as averagescore from posts p join users u on p.owneruserid = u.id where u.displayname = 'csgillespie'",
            "ground_truth_sql": "select avg(t1.score) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'csgillespie'",
            "res": 0
        },
        {
            "sql_idx": 306,
            "predicted_sql": "select (count(case when u.age > 65 then 1 end) * 100.0 / count(*)) as elderuserpercentage from posts p join users u on p.owneruserid = u.id where p.score > 5",
            "ground_truth_sql": "select cast(sum(case when t2.age > 65 then 1 else 0 end) as double) * 100 / count(t1.id) from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.score > 5",
            "res": 0
        },
        {
            "sql_idx": 307,
            "predicted_sql": "select p.favoritecount from posts p join comments c on p.id = c.postid where c.creationdate = '2014-04-23 20:29:39' and c.userid = 3025",
            "ground_truth_sql": "select t1.favoritecount from posts as t1 inner join comments as t2 on t1.id = t2.postid where t2.creationdate = '2014-04-23 20:29:39.0' and t2.userid = 3025",
            "res": 0
        },
        {
            "sql_idx": 308,
            "predicted_sql": "select p.closeddate is null as well_finished from posts p join comments c on p.id = c.postid where c.creationdate = '2013-07-12 09:08:18.0' and c.userid = 23853",
            "ground_truth_sql": "select case when t2.closeddate is null then 'not well-finished' else 'well-finished' end as resylt from comments as t1 inner join posts as t2 on t1.postid = t2.id where t1.userid = 23853 and t1.creationdate = '2013-07-12 09:08:18.0'",
            "res": 0
        },
        {
            "sql_idx": 309,
            "predicted_sql": "select count(*) as numberofposts from posts where ownerdisplayname = 'tiago pasqualini'",
            "ground_truth_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'tiago pasqualini'",
            "res": 0
        },
        {
            "sql_idx": 310,
            "predicted_sql": "select u.displayname from users u join votes v on u.id = v.userid where v.id = 6347",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join votes as t2 on t1.id = t2.userid where t2.id = 6347",
            "res": 0
        },
        {
            "sql_idx": 311,
            "predicted_sql": "select (select count(*) from posts where owneruserid = 24) as postcount, (select count(*) from votes where userid = 24) as votecount, (select count(*) from posts where owneruserid = 24) / (select count(*) from votes where userid = 24) as posttovoteratio",
            "ground_truth_sql": "select cast(count(distinct t2.id) as double) / count(distinct t1.id) from votes as t1 inner join posts as t2 on t1.userid = t2.owneruserid where t1.userid = 24",
            "res": 0
        },
        {
            "sql_idx": 312,
            "predicted_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
            "ground_truth_sql": "select viewcount from posts where title = 'integration of weka and/or rapidminer into informatica powercenter/developer'",
            "res": 1
        },
        {
            "sql_idx": 313,
            "predicted_sql": "select text from comments where score = 17",
            "ground_truth_sql": "select text from comments where score = 17",
            "res": 1
        },
        {
            "sql_idx": 314,
            "predicted_sql": "select userdisplayname from comments where text = 'thank you user93!'",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.text = 'thank you user93!'",
            "res": 0
        },
        {
            "sql_idx": 315,
            "predicted_sql": "select u.displayname, u.reputation from users u join posts p on u.id = p.owneruserid where p.title = 'understanding what dassault isight is doing?'",
            "ground_truth_sql": "select t1.displayname, t1.reputation from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t2.title = 'understanding what dassault isight is doing?'",
            "res": 0
        },
        {
            "sql_idx": 316,
            "predicted_sql": "select u.displayname from users u join posts p on u.id = p.owneruserid where p.title = 'open source tools for visualizing multi-dimensional data'",
            "ground_truth_sql": "select t2.displayname from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t1.title = 'open source tools for visualizing multi-dimensional data?'",
            "res": 0
        },
        {
            "sql_idx": 317,
            "predicted_sql": "select c.text, c.creationdate, c.userid, c.userdisplayname from comments c join posthistory ph on c.postid = ph.postid where ph.text like '%why square the difference instead of taking the absolute value in standard deviation?'",
            "ground_truth_sql": "select t2.comment from posts as t1 inner join posthistory as t2 on t1.id = t2.postid where t1.title = 'why square the difference instead of taking the absolute value in standard deviation?'",
            "res": 0
        },
        {
            "sql_idx": 318,
            "predicted_sql": "select u.displayname from users u join votes v on u.id = v.userid join posts p on v.postid = p.id where v.bountyamount = 50 and p.title like '%variance%'",
            "ground_truth_sql": "select t3.displayname, t1.title from posts as t1 inner join votes as t2 on t1.id = t2.postid inner join users as t3 on t3.id = t2.userid where t2.bountyamount = 50 and t1.title like '%variance%'",
            "res": 0
        },
        {
            "sql_idx": 319,
            "predicted_sql": "select avg(p.viewcount) as averageviewcount, p.title, c.text as comment from posts p join comments c on p.id = c.postid where p.tags like '%<humor>%' group by p.title, c.text",
            "ground_truth_sql": "select avg(t2.viewcount) as average_view_count, t2.title, t1.text from comments as t1 inner join posts as t2 on t2.id = t1.postid where t2.tags = '<humor>' group by t2.title, t1.text",
            "res": 0
        },
        {
            "sql_idx": 320,
            "predicted_sql": "select count(distinct userid) as numberofusers from badges group by userid having count(name) > 5",
            "ground_truth_sql": "select count(userid) from ( select userid, count(name) as num from badges group by userid ) as t where t.num > 5",
            "res": 0
        },
        {
            "sql_idx": 321,
            "predicted_sql": "select u.id as userid, u.displayname from users u join ( select ph.postid, count(ph.id) as historycount from posthistory ph group by ph.postid having historycount = 1 ) ph on u.id = ph.postid join posts p on ph.postid = p.id where p.viewcount >= 1000",
            "ground_truth_sql": "select t2.userid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t3.viewcount >= 1000 group by t2.userid having count(distinct t2.posthistorytypeid) = 1",
            "res": 0
        },
        {
            "sql_idx": 322,
            "predicted_sql": "select (count(case when year(b.date) = 2010 then 1 end) * 100.0 / count(b.name)) - (count(case when year(b.date) = 2011 then 1 end) * 100.0 / count(b.name)) as percentage_difference from badges b where b.name = 'student'",
            "ground_truth_sql": "select cast(sum(case when date_format(cast(date as datetime), '%y') = '2010' then 1 else 0 end) as double) * 100 / count(id) - cast(sum(case when date_format(cast(date as datetime), '%y') = '2011' then 1 else 0 end) as double) * 100 / count(id) from badges where name = 'student'",
            "res": 0
        },
        {
            "sql_idx": 323,
            "predicted_sql": "select avg(u.upvotes) as average_up_votes, avg(u.age) as average_user_age from users u join ( select userid from posts group by userid having count(id) > 10 ) as filtered_users on u.id = filtered_users.userid",
            "ground_truth_sql": "select avg(t1.upvotes), avg(t1.age) from users as t1 inner join ( select owneruserid, count(*) as post_count from posts group by owneruserid having post_count > 10 ) as t2 on t1.id = t2.owneruserid",
            "res": 0
        },
        {
            "sql_idx": 324,
            "predicted_sql": "select sum(case when year(creationdate) = 2010 then 1 else 0 end) as votes_2010, sum(case when year(creationdate) = 2011 then 1 else 0 end) as votes_2011, sum(case when year(creationdate) = 2010 then 1 else 0 end) * 1.0 / sum(case when year(creationdate) = 2011 then 1 else 0 end) as ratio from votes",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(creationdate as datetime), '%y') = '2010' then 1 else 0 end ) as double) / sum( case when date_format(cast(creationdate as datetime), '%y') = '2011' then 1 else 0 end ) from votes",
            "res": 0
        },
        {
            "sql_idx": 325,
            "predicted_sql": "select p.id from posts p join users u on p.owneruserid = u.id where u.displayname = 'slashnick' order by p.answercount desc limit 1",
            "ground_truth_sql": "select t2.postid from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'slashnick' order by t3.answercount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 326,
            "predicted_sql": "select p.owneruserid, u.displayname, sum(p.viewcount) as totalviewcount from posts p join users u on p.owneruserid = u.id where u.displayname in ('harvey motulsky', 'noah snyder') group by p.owneruserid, u.displayname order by totalviewcount desc limit 1",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t2.postid = t3.id where t1.displayname = 'harvey motulsky' or t1.displayname = 'noah snyder' group by t1.displayname order by sum(t3.viewcount) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 327,
            "predicted_sql": "select distinct t1.tags from posts as t1 inner join users as t2 on t1.owneruserid = t2.id where t2.displayname = 'mark meckes' and t1.commentcount = 0",
            "ground_truth_sql": "select t3.tags from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid where t1.displayname = 'mark meckes' and t3.commentcount = 0",
            "res": 0
        },
        {
            "sql_idx": 328,
            "predicted_sql": "select (count(case when t2.tagname = 'r' then 1 else null end) * 100.0 / count(t1.id)) as percentage from posts as t1 inner join posttags as t2 on t1.id = t2.postid where t1.owneruserid = 0",
            "ground_truth_sql": "select cast(sum(case when t3.tagname = 'r' then 1 else 0 end) as double) * 100 / count(t1.id) from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join tags as t3 on t3.excerptpostid = t2.postid where t1.displayname = 'community'",
            "res": 0
        },
        {
            "sql_idx": 329,
            "predicted_sql": "select sum(case when u.displayname = 'mornington' then p.viewcount else 0 end) - sum(case when u.displayname = 'amos' then p.viewcount else 0 end) as difference_in_view_count from posts p join users u on p.owneruserid = u.id",
            "ground_truth_sql": "select sum(case when t1.displayname = 'mornington' then t3.viewcount else 0 end) - sum(case when t1.displayname = 'amos' then t3.viewcount else 0 end) as diff from users as t1 inner join posthistory as t2 on t1.id = t2.userid inner join posts as t3 on t3.id = t2.postid",
            "res": 0
        },
        {
            "sql_idx": 330,
            "predicted_sql": "select avg(monthly_count) as average_monthly_links from ( select count(*) as monthly_count from postlinks where year(creationdate) = 2010 group by month(creationdate) ) as monthly_counts",
            "ground_truth_sql": "select cast(count(t1.id) as double) / 12 from postlinks as t1 inner join posts as t2 on t1.postid = t2.id where t2.answercount <= 2 and date_format(cast(t1.creationdate as datetime), '%y') = '2010'",
            "res": 0
        },
        {
            "sql_idx": 331,
            "predicted_sql": "select min(v.creationdate) as firstvotedate from votes v join users u on v.userid = u.id where u.displayname = 'chl'",
            "ground_truth_sql": "select t2.creationdate from users as t1 inner join votes as t2 on t1.id = t2.userid where t1.displayname = 'chl' order by t2.creationdate limit 1",
            "res": 0
        },
        {
            "sql_idx": 332,
            "predicted_sql": "select u.displayname from users u join badges b on u.id = b.userid where b.name = 'autobiographer' order by b.date asc limit 1",
            "ground_truth_sql": "select t1.displayname from users as t1 inner join badges as t2 on t1.id = t2.userid where t2.name = 'autobiographer' order by t2.date limit 1",
            "res": 0
        },
        {
            "sql_idx": 333,
            "predicted_sql": "select count(distinct u.id) as numberofusers from users u join posts p on u.id = p.owneruserid where u.location = 'united kingdom' and p.favoritecount >= 4",
            "ground_truth_sql": "select count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.location = 'united kingdom' and t2.favoritecount >= 4",
            "res": 0
        },
        {
            "sql_idx": 334,
            "predicted_sql": "select p.id, p.title from posts p join users u on p.owneruserid = u.id where u.displayname = 'harvey motulsky' order by p.viewcount desc limit 1",
            "ground_truth_sql": "select t2.id, t2.title from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where t1.displayname = 'harvey motulsky' order by t2.viewcount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 335,
            "predicted_sql": "select p.id as postid, p.ownerdisplayname from posts p where year(p.creationdate) = 2010 order by p.favoritecount desc limit 1",
            "ground_truth_sql": "select t2.owneruserid, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid where date_format(cast(t1.creationdate as datetime), '%y') = '2010' order by t2.favoritecount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 336,
            "predicted_sql": "select (count(case when u.reputation > 1000 then 1 end) * 100.0 / count(*)) as percentage from posts p join users u on p.owneruserid = u.id where year(p.creationdate) = 2011",
            "ground_truth_sql": "select cast(sum( case when date_format(cast(t2.creaiondate as datetime), '%y') = '2011' and t1.reputation > 1000 then 1 else 0 end ) as double) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid",
            "res": 0
        },
        {
            "sql_idx": 337,
            "predicted_sql": "select sum(p.viewcount) as totalviews, u.displayname from posts p join users u on p.owneruserid = u.id where p.title = 'computer game datasets' order by p.lasactivitydate desc limit 1",
            "ground_truth_sql": "select t2.viewcount, t3.displayname from posthistory as t1 inner join posts as t2 on t1.postid = t2.id inner join users as t3 on t2.lasteditoruserid = t3.id where t1.text = 'computer game datasets'",
            "res": 0
        },
        {
            "sql_idx": 338,
            "predicted_sql": "select max(p.score) as highestscorepostid, sum(c.commentcount) as totalcomments from posts p join comments c on p.id = c.postid where p.score = ( select max(score) from posts )",
            "ground_truth_sql": "select count(t2.id) from posts as t1 inner join comments as t2 on t1.id = t2.postid group by t1.id order by t1.score desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 339,
            "predicted_sql": "select c.text, u.displayname from comments c join users u on c.userid = u.id join posts p on c.postid = p.id where p.title = 'analysing wind data with r' order by c.creationdate desc limit 10",
            "ground_truth_sql": "select t3.text, t1.displayname from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join comments as t3 on t2.id = t3.postid where t2.title = 'analysing wind data with r' order by t1.creationdate desc limit 10",
            "res": 0
        },
        {
            "sql_idx": 340,
            "predicted_sql": "select (count(case when p.score > 50 then 1 end) * 100.0 / count(p.id)) as percentage from posts p join users u on p.owneruserid = u.id where u.reputation = ( select max(reputation) from users )",
            "ground_truth_sql": "select cast(sum(case when t2.score > 50 then 1 else 0 end) as double) * 100 / count(t1.id) from users as t1 inner join posts as t2 on t1.id = t2.owneruserid inner join ( select max(reputation) as max_reputation from users ) as t3 on t1.reputation = t3.max_reputation",
            "res": 0
        },
        {
            "sql_idx": 341,
            "predicted_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
            "ground_truth_sql": "select excerptpostid, wikipostid from tags where tagname = 'sample'",
            "res": 1
        },
        {
            "sql_idx": 342,
            "predicted_sql": "select u.reputation, u.upvotes from users u join comments c on u.id = c.userid where c.text = 'fine, you win :)'",
            "ground_truth_sql": "select t2.reputation, t2.upvotes from comments as t1 inner join users as t2 on t1.userid = t2.id where t1.text = 'fine, you win :)'",
            "res": 0
        },
        {
            "sql_idx": 343,
            "predicted_sql": "select c.text from comments c join posts p on c.postid = p.id where p.viewcount between 100 and 150 order by c.score desc limit 1",
            "ground_truth_sql": "select text from comments where postid in ( select id from posts where viewcount between 100 and 150 ) order by score desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 344,
            "predicted_sql": "select count(*) from comments c join posts p on c.postid = p.id where p.commentcount = 1 and c.score = 0",
            "ground_truth_sql": "select count(t1.id) from comments as t1 inner join posts as t2 on t1.postid = t2.id where t2.commentcount = 1 and t2.score = 0",
            "res": 0
        },
        {
            "sql_idx": 345,
            "predicted_sql": "select (count(case when u.upvotes = 0 then 1 end) * 100.0 / count(*)) as percentage from comments c join users u on c.userid = u.id where c.score between 5 and 10",
            "ground_truth_sql": "select cast(sum(case when t1.upvotes = 0 then 1 else 0 end) as double) * 100 / count(t1.id) as per from users as t1 inner join comments as t2 on t1.id = t2.userid where t2.score between 5 and 10",
            "res": 0
        }
    ],
    "card_games": [
        {
            "sql_idx": 346,
            "predicted_sql": "select * from cards where cardkingdomfoilid is not null and cardkingdomid is not null",
            "ground_truth_sql": "select id from cards where not cardkingdomfoilid is null and not cardkingdomid is null",
            "res": 0
        },
        {
            "sql_idx": 347,
            "predicted_sql": "select c.name from cards c where c.bordercolor = 'borderless' and c.cardkingdomfoilid is null and c.cardkingdomid is not null",
            "ground_truth_sql": "select id from cards where bordercolor = 'borderless' and ( cardkingdomid is null or cardkingdomid is null )",
            "res": 0
        },
        {
            "sql_idx": 348,
            "predicted_sql": "select c.name from cards c join legalities l on c.id = l.id where c.rarity = 'mythic' and l.status = 'banned' and l.format = 'gladiator'",
            "ground_truth_sql": "select distinct t1.id from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'gladiator' and t2.status = 'banned' and t1.rarity = 'mythic'",
            "res": 0
        },
        {
            "sql_idx": 349,
            "predicted_sql": "select distinct t1.status from legalities t1 inner join cards t2 on t2.uuid = t1.uuid where t2.types = 'artifact' and t2.side is null and t1.format = 'vintage'",
            "ground_truth_sql": "select distinct t2.status from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.type = 'artifact' and t2.format = 'vintage' and t1.side is null",
            "res": 0
        },
        {
            "sql_idx": 350,
            "predicted_sql": "select c.id, c.artist from cards c join legalities l on c.id = l.id where l.format = 'commander' and (c.power = '*' or c.power is null) and l.status = 'legal'",
            "ground_truth_sql": "select t1.id, t1.artist from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'legal' and t2.format = 'commander' and ( t1.power is null or t1.power = '*' )",
            "res": 0
        },
        {
            "sql_idx": 351,
            "predicted_sql": "select c.id, c.text, r.text as ruling_text, c.hascontentwarning from cards c join rulings r on c.uuid = r.uuid where c.artist = 'stephen daniel'",
            "ground_truth_sql": "select t1.id, t2.text, t1.hascontentwarning from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.artist = 'stephen daniele'",
            "res": 0
        },
        {
            "sql_idx": 352,
            "predicted_sql": "select c.name as card_name, c.artist, c.ispromo from cards c join rulings r on c.uuid = r.uuid where c.ispromo = 1 group by c.name, c.artist, c.ispromo order by count(r.id) desc limit 1",
            "ground_truth_sql": "select t1.name, t1.artist, t1.ispromo from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where t1.ispromo = 1 and t1.artist = ( select artist from cards where ispromo = 1 group by artist having count(distinct uuid) = (select max(card_counts.max_count) from (select count(distinct uuid) as max_count from cards where ispromo = 1 group by artist) as card_counts))limit 1",
            "res": 0
        },
        {
            "sql_idx": 353,
            "predicted_sql": "select cast(sum(case when language = 'chinese simplified' then 1 else 0 end) as decimal(10, 2)) * 100 / count(*) as percentage from set_translations",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'chinese simplified' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid",
            "res": 0
        },
        {
            "sql_idx": 354,
            "predicted_sql": "select count(*) as infinite_power_cards from cards where power = '*'",
            "ground_truth_sql": "select count(*) from cards where power = '*'",
            "res": 0
        },
        {
            "sql_idx": 355,
            "predicted_sql": "select bordercolor from cards where name = 'ancestor''s chosen'",
            "ground_truth_sql": "select distinct bordercolor from cards where name = 'ancestor''s chosen'",
            "res": 0
        },
        {
            "sql_idx": 356,
            "predicted_sql": "select l.format from cards c join legalities l on c.id = l.uuid where c.name = 'benalish knight'",
            "ground_truth_sql": "select t2.format from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.name = 'benalish knight'",
            "res": 0
        },
        {
            "sql_idx": 357,
            "predicted_sql": "select (count(case when bordercolor = 'borderless' then 1 end) * 100.0 / count(*)) as percentage_borderless_cards from cards",
            "ground_truth_sql": "select cast(sum(case when bordercolor = 'borderless' then 1 else 0 end) as double) * 100 / count(id) from cards",
            "res": 0
        },
        {
            "sql_idx": 358,
            "predicted_sql": "select (count(case when f.language = 'french' then 1 end) * 100.0 / count(*)) as percentage from foreign_data f join cards c on f.uuid = c.uuid where c.isstoryspotlight = 1",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.isstoryspotlight = 1",
            "res": 0
        },
        {
            "sql_idx": 359,
            "predicted_sql": "select count(*) from cards where originaltype = 'summon - angel' and subtypes not like '%angel%'",
            "ground_truth_sql": "select count(id) from cards where originaltype = 'summon - angel' and subtypes <> 'angel'",
            "res": 0
        },
        {
            "sql_idx": 360,
            "predicted_sql": "select id from cards where dueldeck = 'a'",
            "ground_truth_sql": "select id from cards where dueldeck = 'a'",
            "res": 1
        },
        {
            "sql_idx": 361,
            "predicted_sql": "select count(*) as white_border_banned_cards from cards where bordercolor = 'white' and status = 'banned'",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.status = 'banned' and t1.bordercolor = 'white'",
            "res": 0
        },
        {
            "sql_idx": 362,
            "predicted_sql": "select c.name from cards c join foreign_data fd on c.scryfallid = fd.scryfallid where c.originaltype = 'artifact' and c.colors = 'b' and fd.language is not null",
            "ground_truth_sql": "select distinct t1.name from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.originaltype = 'artifact' and t1.colors = 'b'",
            "res": 0
        },
        {
            "sql_idx": 363,
            "predicted_sql": "select manacost from cards where layout = 'normal' and frameversion = '2003' and bordercolor = 'black' and availability = 'mtgo, paper'",
            "ground_truth_sql": "select manacost from cards where availability = 'mtgo, paper' and bordercolor = 'black' and frameversion = 2003 and layout = 'normal'",
            "res": 0
        },
        {
            "sql_idx": 364,
            "predicted_sql": "select (count(case when isstoryspotlight = 1 and istextless = 0 then id end) * 100.0 / count(id)) as percentage from cards",
            "ground_truth_sql": "select cast(sum(case when istextless = 0 and isstoryspotlight = 1 then 1 else 0 end) as double) * 100 / count(id) from cards",
            "res": 0
        },
        {
            "sql_idx": 365,
            "predicted_sql": "select count(distinct st.setcode) as brazilian_portuguese_translated_sets from set_translations st join sets s on st.setcode = s.code where st.language = 'portuguese (brasil)' and s.block = 'commander'",
            "ground_truth_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t2.language = 'portuguese (brazil)' and t1.block = 'commander'",
            "res": 0
        },
        {
            "sql_idx": 366,
            "predicted_sql": "select distinct t1.subtypes, t1.supertypes from cards t1 inner join set_translations t2 on t1.setcode = t2.setcode where t2.language = 'german' and t1.subtypes is not null and t1.supertypes is not null",
            "ground_truth_sql": "select t1.subtypes, t1.supertypes from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t2.language = 'german' and not t1.subtypes is null and not t1.supertypes is null",
            "res": 0
        },
        {
            "sql_idx": 367,
            "predicted_sql": "select count(*) from cards where power is null or power = '*' and text like '%triggered ability%'",
            "ground_truth_sql": "select count(distinct t1.id) from cards as t1 inner join rulings as t2 on t1.uuid = t2.uuid where ( t1.power is null or t1.power = '*' ) and t2.text like '%triggered ability%'",
            "res": 0
        },
        {
            "sql_idx": 368,
            "predicted_sql": "select count(distinct c.id) as card_count from cards c join rulings r on c.id = r.uuid join legalities l on c.id = l.id where l.format = 'premodern' and r.text = 'this is a triggered mana ability.' and c.side is null",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid inner join rulings as t3 on t1.uuid = t3.uuid where t2.format = 'premodern' and t3.text = 'this is a triggered mana ability.' and t1.side is null",
            "res": 0
        },
        {
            "sql_idx": 369,
            "predicted_sql": "select fd.name from cards c join foreign_data fd on c.id = fd.id where c.artist = 'matthew d. wilson' and c.bordercolor = 'black' and c.layout = 'normal' and c.types = 'creature' and fd.language = 'french'",
            "ground_truth_sql": "select name from foreign_data where uuid in ( select uuid from cards where types = 'creature' and layout = 'normal' and bordercolor = 'black' and artist = 'matthew d. wilson' ) and language = 'french'",
            "res": 0
        },
        {
            "sql_idx": 370,
            "predicted_sql": "select t.language from set_translations t join sets s on t.setcode = s.code where s.block = 'ravnica' and s.basesetsize = 180",
            "ground_truth_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.block = 'ravnica' and t1.basesetsize = 180",
            "res": 0
        },
        {
            "sql_idx": 371,
            "predicted_sql": "select (count(case when c.hascontentwarning = 0 then 1 end) * 100.0 / count(*)) as percentage from cards c join legalities l on c.uuid = l.uuid where l.format = 'commander' and l.status = 'legal'",
            "ground_truth_sql": "select cast(sum(case when t1.hascontentwarning = 0 then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t2.format = 'commander' and t2.status = 'legal'",
            "res": 0
        },
        {
            "sql_idx": 372,
            "predicted_sql": "select (count(case when language = 'french' and (power is null or power = '*') then 1 end) * 100.0 / count(case when power is null or power = '*' then 1 end)) as percentage from foreign_data",
            "ground_truth_sql": "select cast(sum(case when t2.language = 'french' then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join foreign_data as t2 on t1.uuid = t2.uuid where t1.power is null or t1.power = '*'",
            "res": 0
        },
        {
            "sql_idx": 373,
            "predicted_sql": "select language from foreign_data where multiverseid = 149934",
            "ground_truth_sql": "select language from foreign_data where multiverseid = 149934",
            "res": 1
        },
        {
            "sql_idx": 374,
            "predicted_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as decimal(10, 2)) / count(*) * 100 as proportion from cards",
            "ground_truth_sql": "select cast(sum(case when istextless = 1 and layout = 'normal' then 1 else 0 end) as double) * 100 / count(*) from cards",
            "res": 0
        },
        {
            "sql_idx": 375,
            "predicted_sql": "select distinct t.language from set_translations t join sets s on t.setcode = s.code where s.mcmname = 'archenemy' and t.setcode = 'arc'",
            "ground_truth_sql": "select t2.language from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.mcmname = 'archenemy' and t2.setcode = 'arc'",
            "res": 0
        },
        {
            "sql_idx": 376,
            "predicted_sql": "select f.language from foreign_data f join cards c on f.name = c.asciiname where c.name = 'a pedra fellwar'",
            "ground_truth_sql": "select distinct language from foreign_data where name = 'a pedra fellwar'",
            "res": 0
        },
        {
            "sql_idx": 377,
            "predicted_sql": "select name, convertedmanacost from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
            "ground_truth_sql": "select name from cards where name in ('serra angel', 'shrine keeper') order by convertedmanacost desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 378,
            "predicted_sql": "select t.translation from set_translations t join cards c on t.setcode = c.setcode where t.language = 'italian' and c.name = 'ancestor''s chosen'",
            "ground_truth_sql": "select translation from set_translations where setcode in ( select setcode from cards where name = 'ancestor''s chosen' ) and language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 379,
            "predicted_sql": "select f.language, f.name, f.text from foreign_data f join cards c on f.name = c.asciiname where c.name = 'ancestor''s chosen' and f.language = 'korean'",
            "ground_truth_sql": "select case when sum( case when t2.language = 'korean' and not t2.translation is null then 1 else 0 end ) > 0 then 'yes' else 'no' end from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t1.name = 'ancestor''s chosen'",
            "res": 0
        },
        {
            "sql_idx": 380,
            "predicted_sql": "select count(*) as card_count from cards c join set_translations st on c.setcode = st.setcode where st.translation = 'hauptset zehnte edition' and c.artist = 'adam rex'",
            "ground_truth_sql": "select count(t1.id) from cards as t1 inner join set_translations as t2 on t2.setcode = t1.setcode where t2.translation = 'hauptset zehnte edition' and t1.artist = 'adam rex'",
            "res": 0
        },
        {
            "sql_idx": 381,
            "predicted_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
            "ground_truth_sql": "select t2.translation from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.name = 'eighth edition' and t2.language = 'chinese simplified'",
            "res": 0
        },
        {
            "sql_idx": 382,
            "predicted_sql": "select s.name as setname from sets s join cards c on s.code = c.setcode where c.name = 'angel of mercy' and (s.mtgocode is not null or s.isonlineonly = 1)",
            "ground_truth_sql": "select case when not t2.mtgocode is null then 'yes' else 'no' end from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'angel of mercy'",
            "res": 0
        },
        {
            "sql_idx": 383,
            "predicted_sql": "select count(distinct st.id) as italian_translated_sets from sets s join set_translations st on s.code = st.setcode where s.block = 'ice age' and st.language = 'italian' and st.translation is not null",
            "ground_truth_sql": "select count(distinct t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where t1.block = 'ice age' and t2.language = 'italian' and not t2.translation is null",
            "res": 0
        },
        {
            "sql_idx": 384,
            "predicted_sql": "select s.isforeignonly from sets s join cards c on s.code = c.setcode where c.name = 'adarkar valkyrie'",
            "ground_truth_sql": "select case when isforeignonly = 1 then 'yes' else 'no' end from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t1.name = 'adarkar valkyrie'",
            "res": 0
        },
        {
            "sql_idx": 385,
            "predicted_sql": "select count(distinct t1.id) from sets as t1 inner join set_translations as t2 on t1.code = t2.setcode where t2.language = 'italian' and t1.basesetsize < 100",
            "ground_truth_sql": "select count(t1.id) from sets as t1 inner join set_translations as t2 on t2.setcode = t1.code where not t2.translation is null and t1.basesetsize < 100 and t2.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 386,
            "predicted_sql": "select distinct artist from cards where artist in ('jeremy jarvis', 'aaron miller', 'chippy') and setcode = ( select code from sets where name = 'coldsnap' )",
            "ground_truth_sql": "select t1.artist from cards as t1 inner join sets as t2 on t2.code = t1.setcode where ( t2.name = 'coldsnap' and t1.artist = 'chippy' ) or ( t2.name = 'coldsnap' and t1.artist = 'aaron miller' ) or ( t2.name = 'coldsnap' and t1.artist = 'jeremy jarvis' ) group by t1.artist",
            "res": 0
        },
        {
            "sql_idx": 387,
            "predicted_sql": "select count(*) from cards as t1 inner join sets as t2 on t1.setcode = t2.code where t2.name = 'coldsnap' and t1.convertedmanacost > 5 and (t1.power = '*' or t1.power is null)",
            "ground_truth_sql": "select sum(case when t1.power = '*' or t1.power is null then 1 else 0 end) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap' and t1.convertedmanacost > 5",
            "res": 0
        },
        {
            "sql_idx": 388,
            "predicted_sql": "select f.flavortext from foreign_data f join cards c on f.name = c.name where f.language = 'italian' and c.name = 'ancestor''s chosen'",
            "ground_truth_sql": "select t2.flavortext from cards as t1 inner join foreign_data as t2 on t2.uuid = t1.uuid where t1.name = 'ancestor''s chosen' and t2.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 389,
            "predicted_sql": "select r.text from rulings r join cards c on r.uuid = c.uuid join set_translations st on c.setcode = st.setcode where st.language = 'italian' and c.name = 'coldsnap'",
            "ground_truth_sql": "select distinct t1.text from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian'",
            "res": 0
        },
        {
            "sql_idx": 390,
            "predicted_sql": "select t1.name from cards as t1 inner join set_translations as t2 on t1.setcode = t2.setcode where t2.language = 'italian' and t1.setcode = 'coldsnap' order by t1.convertedmanacost desc limit 1",
            "ground_truth_sql": "select t2.name from foreign_data as t1 inner join cards as t2 on t2.uuid = t1.uuid inner join sets as t3 on t3.code = t2.setcode where t3.name = 'coldsnap' and t1.language = 'italian' order by t2.convertedmanacost desc",
            "res": 0
        },
        {
            "sql_idx": 391,
            "predicted_sql": "select (count(case when c.convertedmanacost = 7 then 1 end) * 100.0 / count(*)) as percentage from cards c join sets s on c.setcode = s.code where s.name = 'coldsnap'",
            "ground_truth_sql": "select cast(sum(case when t1.convertedmanacost = 7 then 1 else 0 end) as double) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 392,
            "predicted_sql": "select (count(case when cardkingdomfoilid is not null and cardkingdomid is not null then 1 end) * 100.0 / count(*)) as percentage from cards where setcode = 'coldsnap'",
            "ground_truth_sql": "select cast(sum( case when not t1.cardkingdomfoilid is null and not t1.cardkingdomid is null then 1 else 0 end ) as double) * 100 / count(t1.id) from cards as t1 inner join sets as t2 on t2.code = t1.setcode where t2.name = 'coldsnap'",
            "res": 0
        },
        {
            "sql_idx": 393,
            "predicted_sql": "select format, count(*) as banned_count from legalities where status = 'banned' group by format order by banned_count desc limit 1",
            "ground_truth_sql": "select t2.format, t1.name from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid inner join ( select format from legalities where status = 'banned' group by format order by count(*) desc limit 1 ) as maxbanned on maxbanned.format = t2.format where t2.status = 'banned'",
            "res": 0
        },
        {
            "sql_idx": 394,
            "predicted_sql": "select c.name as card_name, l.format as banned_play_format from cards c join legalities l on c.uuid = l.uuid where c.edhrecrank = 1 and l.status = 'banned'",
            "ground_truth_sql": "select t1.name, t2.format from cards as t1 inner join legalities as t2 on t2.uuid = t1.uuid where t1.edhrecrank = 1 and t2.status = 'banned' group by t1.name, t2.format",
            "res": 0
        },
        {
            "sql_idx": 395,
            "predicted_sql": "select c.name as card_name, l.format from cards c join legalities l on c.uuid = l.uuid join sets s on c.setcode = s.code where s.name = 'hour of devastation' and l.status = 'legal'",
            "ground_truth_sql": "select distinct t2.name, case when t1.status = 'legal' then t1.format else null end from legalities as t1 inner join cards as t2 on t2.uuid = t1.uuid where t2.setcode in ( select code from sets where name = 'hour of devastation' )",
            "res": 0
        },
        {
            "sql_idx": 396,
            "predicted_sql": "select distinct st.setcode from set_translations st where st.language = 'korean' and st.setcode not in ( select distinct st2.setcode from set_translations st2 where st2.language = 'japanese' )",
            "ground_truth_sql": "select name from sets where code in ( select setcode from set_translations where language = 'korean' and not language like '%japanese%' )",
            "res": 0
        },
        {
            "sql_idx": 397,
            "predicted_sql": "select distinct c.frameversion, c.name as card_name from cards c where c.artist = 'allen williams' union select distinct l.format, l.status from legalities l where l.status = 'banned'",
            "ground_truth_sql": "select distinct t1.frameversion, t1.name, case when t2.status = 'banned' then t1.name else 'no' end from cards as t1 inner join legalities as t2 on t1.uuid = t2.uuid where t1.artist = 'allen williams'",
            "res": 0
        }
    ],
    "toxicology": [
        {
            "sql_idx": 398,
            "predicted_sql": "select bond_type from bond group by bond_type order by count(bond_id) desc limit 1",
            "ground_truth_sql": "select t.bond_type from ( select bond_type, count(bond_id) from bond group by bond_type order by count(bond_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 399,
            "predicted_sql": "select avg(case when a.element = 'o' then 1 else 0 end) as average_oxygen_atoms from atom a join connected c on a.atom_id = c.atom_id join bond b on c.bond_id = b.bond_id where b.bond_type = '-'",
            "ground_truth_sql": "select avg(oxygen_count) from ( select t1.molecule_id, count(t1.element) as oxygen_count from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-' and t1.element = 'o' group by t1.molecule_id ) as oxygen_counts",
            "res": 0
        },
        {
            "sql_idx": 400,
            "predicted_sql": "select avg(case when t1.bond_type = '-' then 1 else 0 end) as avg_single_bonded from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "ground_truth_sql": "select avg(single_bond_count) from ( select t3.molecule_id, count(t1.bond_type) as single_bond_count from bond as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id inner join molecule as t3 on t3.molecule_id = t2.molecule_id where t1.bond_type = '-' and t3.label = '+' group by t3.molecule_id ) as subquery",
            "res": 0
        },
        {
            "sql_idx": 401,
            "predicted_sql": "select m.molecule_id from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = '#' and m.label = '+'",
            "ground_truth_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '#' and t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 402,
            "predicted_sql": "select (count(case when t3.element = 'c' then 1 else null end) * 100.0 / count(t2.atom_id)) as percentage from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '='",
            "ground_truth_sql": "select cast(count(distinct case when t1.element = 'c' then t1.atom_id else null end) as double) * 100 / count(distinct t1.atom_id) from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '='",
            "res": 0
        },
        {
            "sql_idx": 403,
            "predicted_sql": "select distinct a.element from atom a join connected c on a.atom_id = c.atom_id where c.bond_id = 'tr004_8_9'",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id = 'tr004_8_9'",
            "res": 0
        },
        {
            "sql_idx": 404,
            "predicted_sql": "select distinct a1.element, a2.element from atom a1 join connected c on a1.atom_id = c.atom_id join bond b on c.bond_id = b.bond_id join atom a2 on c.atom_id2 = a2.atom_id where b.bond_type = '='",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id inner join connected as t3 on t1.atom_id = t3.atom_id where t2.bond_type = '='",
            "res": 0
        },
        {
            "sql_idx": 405,
            "predicted_sql": "select m.label from atom a join molecule m on a.molecule_id = m.molecule_id where a.element = 'h' group by m.label order by count(m.label) desc limit 1",
            "ground_truth_sql": "select t.label from ( select t2.label, count(t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.element = 'h' group by t2.label order by count(t2.molecule_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 406,
            "predicted_sql": "select t3.element from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id inner join ( select t1.molecule_id from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id inner join connected as t3 on t2.bond_id = t3.bond_id where t1.label = '-' group by t1.molecule_id ) as t3 on t1.molecule_id = t3.molecule_id group by t3.element order by count(t3.element) asc limit 1",
            "ground_truth_sql": "select t.element from ( select t1.element, count(distinct t1.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '-' group by t1.element order by count(distinct t1.molecule_id) asc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 407,
            "predicted_sql": "select b.bond_type from bond b join connected c on b.bond_id = c.bond_id where (c.atom_id = 'tr004_8' and c.atom_id2 = 'tr004_20') or (c.atom_id = 'tr004_20' and c.atom_id2 = 'tr004_8')",
            "ground_truth_sql": "select t1.bond_type from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.atom_id = 'tr004_8' and t2.atom_id2 = 'tr004_20' or t2.atom_id2 = 'tr004_8' and t2.atom_id = 'tr004_20'",
            "res": 0
        },
        {
            "sql_idx": 408,
            "predicted_sql": "select count(distinct a.atom_id) as distinct_atoms from atom a join bond b on a.molecule_id = b.molecule_id where a.element in ('i', 's') and b.bond_type = '-'",
            "ground_truth_sql": "select count(distinct case when t1.element = 'i' then t1.atom_id else null end) as iodine_nums, count(distinct case when t1.element = 's' then t1.atom_id else null end) as sulfur_nums from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '-'",
            "res": 0
        },
        {
            "sql_idx": 409,
            "predicted_sql": "select (count(distinct t1.molecule_id) - sum(case when t2.element = 'f' then 1 else 0 end)) * 100.0 / count(distinct t1.molecule_id) as percentage from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '+'",
            "ground_truth_sql": "select cast(count(distinct case when t1.element <> 'f' then t2.molecule_id else null end) as double) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 410,
            "predicted_sql": "select sum(case when t2.bond_type = '#' then 1 else 0 end) * 100.0 / count(t1.molecule_id) as percent from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t1.label = '+'",
            "ground_truth_sql": "select cast(count(distinct case when t2.label = '+' then t2.molecule_id else null end) as double) * 100 / count(distinct t2.molecule_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#'",
            "res": 0
        },
        {
            "sql_idx": 411,
            "predicted_sql": "select element from atom where molecule_id = 'tr000' order by element asc limit 3",
            "ground_truth_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr000' order by t.element limit 3",
            "res": 0
        },
        {
            "sql_idx": 412,
            "predicted_sql": "select round(sum(case when bond_type = '=' then 1 else 0 end) * 100.0 / count(bond_id), 5) as double_bond_percentage from bond where molecule_id = 'tr008'",
            "ground_truth_sql": "select round( cast(count(case when t.bond_type = '=' then t.bond_id else null end) as double) * 100 / count(t.bond_id), 5 ) from bond as t where t.molecule_id = 'tr008'",
            "res": 0
        },
        {
            "sql_idx": 413,
            "predicted_sql": "select round(sum(case when label = '+' then 1 else 0 end) * 100.0 / count(molecule_id), 3) as carcinogenic_percentage from molecule",
            "ground_truth_sql": "select round( cast(count(case when t.label = '+' then t.molecule_id else null end) as double) * 100 / count(t.molecule_id), 3 ) from molecule as t",
            "res": 0
        },
        {
            "sql_idx": 414,
            "predicted_sql": "select round(sum(case when a.element = 'h' then 1 else 0 end) * 100.0 / count(a.atom_id), 4) as hydrogen_percentage from atom a join molecule m on a.molecule_id = m.molecule_id where m.molecule_id = 'tr206'",
            "ground_truth_sql": "select round( cast(count(case when t.element = 'h' then t.atom_id else null end) as double) * 100 / count(t.atom_id), 4 ) from atom as t where t.molecule_id = 'tr206'",
            "res": 0
        },
        {
            "sql_idx": 415,
            "predicted_sql": "select a.element, m.label from atom a join molecule m on a.molecule_id = m.molecule_id where m.molecule_id = 'tr060'",
            "ground_truth_sql": "select distinct t1.element, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr060'",
            "res": 0
        },
        {
            "sql_idx": 416,
            "predicted_sql": "select bond_type, carcinogenic from molecule as m join bond as b on m.molecule_id = b.molecule_id where m.molecule_id = 'tr010' group by bond_type, carcinogenic order by count(bond_id) desc limit 1",
            "ground_truth_sql": "select t.bond_type from ( select t1.bond_type, count(t1.molecule_id) from bond as t1 where t1.molecule_id = 'tr010' group by t1.bond_type order by count(t1.molecule_id) desc limit 1 ) as t",
            "res": 0
        },
        {
            "sql_idx": 417,
            "predicted_sql": "select m.molecule_id from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = '-' and m.label = '-' group by m.molecule_id order by m.molecule_id asc limit 3",
            "ground_truth_sql": "select distinct t2.molecule_id from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-' and t2.label = '-' order by t2.molecule_id limit 3",
            "res": 0
        },
        {
            "sql_idx": 418,
            "predicted_sql": "select count(distinct bond_id) as bond_count from connected where atom_id = 'tr009_12' or atom_id2 = 'tr009_12'",
            "ground_truth_sql": "select count(t2.bond_id) from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t1.molecule_id = 'tr009' and t2.atom_id = concat(t1.molecule_id, '_1') or t2.atom_id2 = concat(t1.molecule_id, '_2')",
            "res": 0
        },
        {
            "sql_idx": 419,
            "predicted_sql": "select b.bond_type, c.atom_id, c.atom_id2 from bond b join connected c on b.bond_id = c.bond_id where b.molecule_id = 'tr001_6_9'",
            "ground_truth_sql": "select t1.bond_type, t2.atom_id, t2.atom_id2 from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id where t2.bond_id = 'tr001_6_9'",
            "res": 0
        },
        {
            "sql_idx": 420,
            "predicted_sql": "select count(*) as connection_count from connected where atom_id like 'tr%_19'",
            "ground_truth_sql": "select count(t.bond_id) from connected as t where substr(t.atom_id, -2) = '19'",
            "res": 0
        },
        {
            "sql_idx": 421,
            "predicted_sql": "select a.element from atom a where a.molecule_id = 'tr004'",
            "ground_truth_sql": "select distinct t.element from atom as t where t.molecule_id = 'tr004'",
            "res": 0
        },
        {
            "sql_idx": 422,
            "predicted_sql": "select distinct m.molecule_id from molecule m join atom a on m.molecule_id = a.molecule_id where a.atom_id like '21%' and a.atom_id like '%25' and m.label = '+'",
            "ground_truth_sql": "select distinct t2.molecule_id from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where substr(t1.atom_id, -2) between '21' and '25' and t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 423,
            "predicted_sql": "select b.bond_id from bond b join connected c on b.bond_id = c.bond_id join atom a on c.atom_id = a.atom_id where a.element = 'p' intersect select b.bond_id from bond b join connected c on b.bond_id = c.bond_id join atom a on c.atom_id2 = a.atom_id where a.element = 'n'",
            "ground_truth_sql": "select t2.bond_id from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t2.bond_id in ( select t3.bond_id from connected as t3 inner join atom as t4 on t3.atom_id = t4.atom_id where t4.element = 'p' ) and t1.element = 'n'",
            "res": 0
        },
        {
            "sql_idx": 424,
            "predicted_sql": "select m.label from molecule m join bond b on m.molecule_id = b.molecule_id where b.bond_type = ' = ' group by m.molecule_id, m.label order by count(b.bond_id) desc limit 1",
            "ground_truth_sql": "select t1.label from molecule as t1 inner join ( select t.molecule_id, count(t.bond_type) from bond as t where t.bond_type = '=' group by t.molecule_id order by count(t.bond_type) desc limit 1 ) as t2 on t1.molecule_id = t2.molecule_id",
            "res": 0
        },
        {
            "sql_idx": 425,
            "predicted_sql": "select avg(bond_count) as average_bond_count from ( select count(distinct bond_id) as bond_count from connected where atom_id in ( select atom_id from atom where element = 'i' ) group by atom_id ) as subquery",
            "ground_truth_sql": "select cast(count(t2.bond_id) as double) / count(t1.atom_id) from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id where t1.element = 'i'",
            "res": 0
        },
        {
            "sql_idx": 426,
            "predicted_sql": "select distinct a.element from atom a where a.atom_id not in ( select c.atom_id from connected c )",
            "ground_truth_sql": "select distinct t.element from atom as t where not t.element in ( select distinct t1.element from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id )",
            "res": 0
        },
        {
            "sql_idx": 427,
            "predicted_sql": "select a1.atom_id, a2.atom_id from atom a1 join connected c on a1.atom_id = c.atom_id join bond b on c.bond_id = b.bond_id where b.bond_type = '#' and a1.molecule_id = 'tr041'",
            "ground_truth_sql": "select t2.atom_id, t2.atom_id2 from atom as t1 inner join connected as t2 on t1.atom_id = t2.atom_id inner join bond as t3 on t2.bond_id = t3.bond_id where t3.bond_type = '#' and t3.molecule_id = 'tr041'",
            "res": 0
        },
        {
            "sql_idx": 428,
            "predicted_sql": "select a.element from atom a join connected c on a.atom_id = c.atom_id where c.bond_id = 'tr144_8_19'",
            "ground_truth_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr144_8_19'",
            "res": 0
        },
        {
            "sql_idx": 429,
            "predicted_sql": "select distinct a1.element, a2.element from atom a1 join connected c on a1.atom_id = c.atom_id join bond b on c.bond_id = b.bond_id join atom a2 on c.atom_id2 = a2.atom_id where b.bond_type = '#'",
            "ground_truth_sql": "select distinct t3.element from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '#'",
            "res": 0
        },
        {
            "sql_idx": 430,
            "predicted_sql": "select round(sum(case when t1.label = '+' then 1 else 0 end) * 100.0 / count(t2.bond_id), 5) as proportion from molecule as t1 inner join bond as t2 on t1.molecule_id = t2.molecule_id where t2.bond_type = '-'",
            "ground_truth_sql": "select round( cast(count(case when t2.label = '+' then t1.bond_id else null end) as double) * 100 / count(t1.bond_id), 5 ) from bond as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t1.bond_type = '-'",
            "res": 0
        },
        {
            "sql_idx": 431,
            "predicted_sql": "select count(distinct c.atom_id) as total_atoms from connected c join bond b on c.bond_id = b.bond_id join molecule m on b.molecule_id = m.molecule_id join atom a on c.atom_id = a.atom_id where b.bond_type = '#' and (a.element = 'p' or a.element = 'br')",
            "ground_truth_sql": "select count(t1.atom_id) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '#' and t1.element in ('p', 'br')",
            "res": 0
        },
        {
            "sql_idx": 432,
            "predicted_sql": "select (count(case when t3.element = 'cl' then 1 else null end) * 100.0 / count(t3.atom_id)) as percent from bond as t1 inner join connected as t2 on t1.bond_id = t2.bond_id inner join atom as t3 on t2.atom_id = t3.atom_id where t1.bond_type = '-'",
            "ground_truth_sql": "select cast(count(case when t.element = 'cl' then t.atom_id else null end) as double) * 100 / count(t.atom_id) from ( select t1.atom_id, t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id inner join bond as t3 on t2.molecule_id = t3.molecule_id where t3.bond_type = '-' ) as t",
            "res": 0
        },
        {
            "sql_idx": 433,
            "predicted_sql": "select a1.element, a2.element from atom a1 join connected c on a1.atom_id = c.atom_id join atom a2 on c.atom_id2 = a2.atom_id where c.bond_id = 'tr001_10_11'",
            "ground_truth_sql": "select t2.element from connected as t1 inner join atom as t2 on t1.atom_id = t2.atom_id where t1.bond_id = 'tr001_10_11'",
            "res": 0
        },
        {
            "sql_idx": 434,
            "predicted_sql": "select (count(case when a.element = 'cl' then 1 else null end) * 100.0 / count(m.molecule_id)) as percentage from molecule m join atom a on m.molecule_id = a.molecule_id where m.label = '+'",
            "ground_truth_sql": "select cast(count(case when t1.element = 'cl' then t1.element else null end) as double) * 100 / count(t1.element) from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+'",
            "res": 0
        },
        {
            "sql_idx": 435,
            "predicted_sql": "select count(distinct t1.element) as toxicology_element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and substr(t1.atom_id, 7, 1) = '4'",
            "ground_truth_sql": "select distinct t1.element from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.label = '+' and substr(t1.atom_id, -1) = '4' and length(t1.atom_id) = 7",
            "res": 0
        },
        {
            "sql_idx": 436,
            "predicted_sql": "select sum(case when a.element = 'h' then 1 else 0 end) / count(a.atom_id) as hydrogen_ratio, m.label from atom a join molecule m on a.molecule_id = m.molecule_id where a.molecule_id = 'tr006' group by m.label",
            "ground_truth_sql": "with subquery as (select distinct t1.atom_id, t1.element, t1.molecule_id, t2.label from atom as t1 inner join molecule as t2 on t1.molecule_id = t2.molecule_id where t2.molecule_id = 'tr006') select cast(count(case when element = 'h' then atom_id else null end) as decimal(10, 2)) / nullif(count(atom_id), 0) as ratio, label from subquery group by label",
            "res": 0
        },
        {
            "sql_idx": 437,
            "predicted_sql": "select m.molecule_id from molecule m where m.label = '-' group by m.molecule_id having count(m.molecule_id) > 5",
            "ground_truth_sql": "select t.molecule_id from ( select t1.molecule_id, count(t2.atom_id) from molecule as t1 inner join atom as t2 on t1.molecule_id = t2.molecule_id where t1.label = '-' group by t1.molecule_id having count(t2.atom_id) > 5 ) as t",
            "res": 0
        }
    ],
    "california_schools": [
        {
            "sql_idx": 438,
            "predicted_sql": "select count(distinct s.cdscode) as numberofschools from satscores s join schools sc on s.cds = sc.cdscode where s.avgscrmath > 400 and sc.virtual = 'f'",
            "ground_truth_sql": "select count(distinct t2.school) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f' and t1.avgscrmath > 400",
            "res": 0
        },
        {
            "sql_idx": 439,
            "predicted_sql": "select cdscode from frpm where (enrollment__k_12__ = 0 or enrollment__k_12__ is null) and (enrollment__ages_5_17__ = 0 or enrollment__ages_5_17__ is null) and (enrollment__k_12__ + enrollment__ages_5_17__ > 500)",
            "ground_truth_sql": "select t2.cdscode from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.enrollment (k-12) + t2.enrollment (ages 5-17) > 500",
            "res": 0
        },
        {
            "sql_idx": 440,
            "predicted_sql": "select max(t2.percent (%) eligible free (ages 5-17)) as highest_eligible_free_rate from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where t1.avgscrread > 500 and t1.avgscrmath > 500 and t1.avgscrwrite > 500 and t1.numge1500 / t1.numtsttakr > 0.3",
            "ground_truth_sql": "select max( cast(t1.free meal count (ages 5-17) as double) / t1.enrollment (ages 5-17) ) from frpm as t1 inner join satscores as t2 on t1.cdscode = t2.cds where cast(t2.numge1500 as double) / t2.numtsttakr > 0.3",
            "res": 0
        },
        {
            "sql_idx": 441,
            "predicted_sql": "select s.cdscode, s.charternum, avg(s.avgscrwrite) as avg_score from satscores s where s.avgscrwrite > 499 group by s.cdscode, s.charternum order by avg_score desc",
            "ground_truth_sql": "select charternum, avgscrwrite, rank() over (order by avgscrwrite desc) as writingscorerank from schools as t1 inner join satscores as t2 on t1.cdscode = t2.cds where t2.avgscrwrite > 499 and not charternum is null",
            "res": 0
        },
        {
            "sql_idx": 442,
            "predicted_sql": "select s.school, concat(s.street, ', ', s.city, ', ', s.state, ' ', s.zip) as fullstreetaddress from schools s join frpm f on s.cdscode = f.cdscode where f.enrollment (k-12) - f.enrollment (ages 5-17) > 30",
            "ground_truth_sql": "select t1.school, t1.street from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.enrollment (k-12) - t2.enrollment (ages 5-17) > 30",
            "res": 0
        },
        {
            "sql_idx": 443,
            "predicted_sql": "select distinct s.school from schools s join frpm f on s.cdscode = f.cdscode where f.percent (%) eligible free (k-12) > 0.1 and s.numge1500 >= 1500",
            "ground_truth_sql": "select t2.school name from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where cast(t2.free meal count (k-12) as double) / t2.enrollment (k-12) > 0.1 and t1.numge1500 > 0",
            "res": 0
        },
        {
            "sql_idx": 444,
            "predicted_sql": "select distinct s.school, s.fundingtype from schools s join frpm f on s.cdscode = f.cdscode where s.county = 'riverside' and f.avgscrmath > 400",
            "ground_truth_sql": "select t1.sname, t2.charter funding type from satscores as t1 inner join frpm as t2 on t1.cds = t2.cdscode where t2.district name like 'riverside%' group by t1.sname, t2.charter funding type having cast(sum(t1.avgscrmath) as double) / count(t1.cds) > 400",
            "res": 0
        },
        {
            "sql_idx": 445,
            "predicted_sql": "select s.school, concat(s.street, ', ', s.city, ', ', s.state, ' ', s.zip) as fullcommunicationaddress from schools s join frpm f on s.cdscode = f.cdscode where s.county = 'monterey' and f.free meal count (ages 5-17) > 800",
            "ground_truth_sql": "select t1.school name, t2.street, t2.city, t2.state, t2.zip from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'monterey' and t1.free meal count (ages 5-17) > 800 and t1.school type = 'high schools (public)'",
            "res": 0
        },
        {
            "sql_idx": 446,
            "predicted_sql": "select s.school, s.opendate, s.closeddate, avg(sats.avgscrwrite) as averagescoreinwriting from schools s join satscores sats on s.cdscode = sats.cds where (s.opendate > '1991-01-01' or s.closeddate < '2000-01-01') group by s.school, s.opendate, s.closeddate",
            "ground_truth_sql": "select t2.school, t1.avgscrwrite, t2.phone from schools as t2 left join satscores as t1 on t2.cdscode = t1.cds where date_format(cast(t2.opendate as datetime), '%y') > '1991' or date_format(cast(t2.closeddate as datetime), '%y') < '2000'",
            "res": 0
        },
        {
            "sql_idx": 447,
            "predicted_sql": "select s.school, s.doctype from schools s join frpm f on s.cdscode = f.cdscode where s.fundingtype = 'locally funded' and (f.enrollment (k-12) - f.enrollment (ages 5-17)) > ( select avg(f.enrollment (k-12) - f.enrollment (ages 5-17)) from frpm f join schools s on f.cdscode = s.cdscode where s.fundingtype = 'locally funded' )",
            "ground_truth_sql": "select t2.school, t2.doc from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.fundingtype = 'locally funded' and ( t1.enrollment (k-12) - t1.enrollment (ages 5-17) ) > ( select avg(t3.enrollment (k-12) - t3.enrollment (ages 5-17)) from frpm as t3 inner join schools as t4 on t3.cdscode = t4.cdscode where t4.fundingtype = 'locally funded' )",
            "res": 0
        },
        {
            "sql_idx": 448,
            "predicted_sql": "select s.school, f.percent (%) eligible free (k-12) as eligiblefreerate from frpm f join schools s on f.cdscode = s.cdscode order by f.percent (%) eligible free (k-12) desc limit 10, 2",
            "ground_truth_sql": "select cast(free meal count (k-12) as double) / enrollment (k-12) from frpm order by enrollment (k-12) desc limit 2 offset 9",
            "res": 0
        },
        {
            "sql_idx": 449,
            "predicted_sql": "select s.school, f.frpm count (k-12), f.enrollment (k-12), (f.frpm count (k-12) / f.enrollment (k-12)) as eligiblefreereducedmealrate from frpm f join schools s on f.school code = s.cdscode where f.nslp provision status = '66' order by f.frpm count (k-12) desc limit 5",
            "ground_truth_sql": "select cast(t1.frpm count (k-12) as double) / t1.enrollment (k-12) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.soc = 66 order by t1.frpm count (k-12) desc limit 5",
            "res": 0
        },
        {
            "sql_idx": 450,
            "predicted_sql": "select s.street, s.city, s.zip, s.state from schools s join frpm f on s.cdscode = f.cdscode order by f.percent_('% eligible frpm (k-12)') asc limit 1",
            "ground_truth_sql": "select t2.street, t2.city, t2.state, t2.zip from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by cast(t1.numge1500 as double) / t1.numtsttakr asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 451,
            "predicted_sql": "select admfname1, admlname1, admfname2, admlname2, admfname3, admlname3 from schools s join frpm f on s.cdscode = f.cdscode where f.numge1500 = ( select max(numge1500) from frpm ) limit 1",
            "ground_truth_sql": "select t2.admfname1, t2.admlname1, t2.admfname2, t2.admlname2, t2.admfname3, t2.admlname3 from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.numge1500 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 452,
            "predicted_sql": "select avg(s.numtsttakr) as average_test_takers from satscores s join schools sc on s.cds = sc.cdscode where sc.county = 'fresno' and sc.opendate between '1980-01-01' and '1980-12-31'",
            "ground_truth_sql": "select avg(t1.numtsttakr) from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where date_format(cast(t2.opendate as datetime), '%y') = '1980' and t2.county = 'fresno'",
            "res": 0
        },
        {
            "sql_idx": 453,
            "predicted_sql": "select t1.phone from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t2.district = 'fresno unified' order by t2.avgscrread asc limit 1",
            "ground_truth_sql": "select t2.phone from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.district = 'fresno unified' and not t1.avgscrread is null order by t1.avgscrread asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 454,
            "predicted_sql": "select s.cds, s.cname, s.dname, s.sname, avg(s.avgscrread) as avg_reading_score from satscores s join schools sc on s.cds = sc.cdscode where sc.virtual = 'f' group by s.cds, s.cname, s.dname, s.sname order by s.cname, avg_reading_score desc limit 5",
            "ground_truth_sql": "select school from ( select t2.school, t1.avgscrread, rank() over (partition by t2.county order by t1.avgscrread desc) as rnk from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.virtual = 'f') ranked_schools where rnk <= 5",
            "res": 0
        },
        {
            "sql_idx": 455,
            "predicted_sql": "select s.school, avg(s.avgscrwrite) as averagewritingscore from schools s join frpm f on s.cdscode = f.cdscode where f.school name = 'ricci ulrich' group by s.school",
            "ground_truth_sql": "select t2.school, t1.avgscrwrite from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode where t2.admfname1 = 'ricci' and t2.admlname1 = 'ulrich'",
            "res": 0
        },
        {
            "sql_idx": 456,
            "predicted_sql": "select s.state, sum(f.enrollment (k-12)) as totalenrollees from schools s join frpm f on s.cdscode = f.cdscode where s.doc = 31 group by s.state order by totalenrollees desc limit 1",
            "ground_truth_sql": "select t2.school from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.doc = 31 order by t1.enrollment (k-12) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 457,
            "predicted_sql": "select count(cdscode) / 12 as monthly_average_schools from schools where county = 'alameda' and doc = '52' and year(opendate) = 1980",
            "ground_truth_sql": "select cast(count(school) as double) / 12 from schools where doc = 52 and county = 'alameda' and date_format(cast(opendate as datetime), '%y') = '1980'",
            "res": 0
        },
        {
            "sql_idx": 458,
            "predicted_sql": "select (count(case when doc = 54 then 1 end) / count(case when doc = 52 then 1 end)) as ratio from schools where county = 'orange'",
            "ground_truth_sql": "select cast(sum(case when doc = 54 then 1 else 0 end) as double) / sum(case when doc = 52 then 1 else 0 end) from schools where statustype = 'merged' and county = 'orange'",
            "res": 0
        },
        {
            "sql_idx": 459,
            "predicted_sql": "select s.street, s.school from schools s join frpm f on s.cdscode = f.cdscode order by f.avgscrmath desc limit 6, 1",
            "ground_truth_sql": "select t2.mailstreet, t2.school from satscores as t1 inner join schools as t2 on t1.cds = t2.cdscode order by t1.avgscrmath desc limit 1 offset 6",
            "res": 0
        },
        {
            "sql_idx": 460,
            "predicted_sql": "select count(distinct t1.cdscode) as total_schools from schools as t1 inner join frpm as t2 on t1.cdscode = t2.cdscode where t1.county = 'los angeles' and t1.charter = 0 and t2.percent (%) eligible free (k-12) < 0.18",
            "ground_truth_sql": "select count(t2.school) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.charter = 0 and cast(t1.free meal count (k-12) as double) * 100 / t1.enrollment (k-12) < 0.18",
            "res": 0
        },
        {
            "sql_idx": 461,
            "predicted_sql": "select sum(enrollment_5_17) as total_students from frpm where school = 'state special school' and county name = 'fremont' and academic year = '2014-2015'",
            "ground_truth_sql": "select t1.enrollment (ages 5-17) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.edopscode = 'sss' and t2.city = 'fremont' and t1.academic year between 2014 and 2015",
            "res": 0
        },
        {
            "sql_idx": 462,
            "predicted_sql": "select s.school, f.percent (%) eligible frpm (ages 5-17) from schools s join frpm f on s.cdscode = f.cdscode where s.county = 'los angeles' and s.gsserved = 'k-9' group by s.school, f.percent (%) eligible frpm (ages 5-17) order by s.school",
            "ground_truth_sql": "select t2.school, t1.frpm count (ages 5-17) * 100 / t1.enrollment (ages 5-17) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'los angeles' and t2.gsserved = 'k-9'",
            "res": 0
        },
        {
            "sql_idx": 463,
            "predicted_sql": "select county, count(*) as numberofschools from schools where county in ('san diego', 'santa barbara') and virtual = 'f' group by county order by numberofschools desc limit 1",
            "ground_truth_sql": "select county, count(virtual) from schools where ( county = 'san diego' or county = 'santa barbara' ) and virtual = 'f' group by county order by count(virtual) desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 464,
            "predicted_sql": "select gsoffered from schools order by abs(longitude) desc limit 1",
            "ground_truth_sql": "select gsoffered from schools order by abs(longitude) desc limit 1",
            "res": 1
        },
        {
            "sql_idx": 465,
            "predicted_sql": "select count(distinct city) as numberofcities, count(distinct school) as numberofschools from frpm where nslp provision status = 'multiple provision types' and low grade = 'k' and high grade = '8'",
            "ground_truth_sql": "select t2.city, count(t2.cdscode) from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.magnet = 1 and t2.gsoffered = 'k-8' and t1.nslp provision status = 'multiple provision types' group by t2.city",
            "res": 0
        },
        {
            "sql_idx": 466,
            "predicted_sql": "select distinct cast(free_meal_count_k12 as decimal(10, 2)) / enrollment_k12 * 100 as percent_eligible_free_k12, district_code from frpm join schools on frpm.school_code = schools.cdscode where admfname1 = 'alusine'",
            "ground_truth_sql": "select t1.free meal count (k-12) * 100 / t1.enrollment (k-12), t1.district code from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.admfname1 = 'alusine'",
            "res": 0
        },
        {
            "sql_idx": 467,
            "predicted_sql": "select admemail1, admemail2, admemail3 from schools where county = 'san bernardino' and city = 'city of san bernardino city unified' and opendate between '2009-01-01' and '2010-12-31' and ( (soc = '62' and doc = '54') or (soc = '62' and doc = '54') )",
            "ground_truth_sql": "select t2.admemail1, t2.admemail2 from frpm as t1 inner join schools as t2 on t1.cdscode = t2.cdscode where t2.county = 'san bernardino' and t2.city = 'san bernardino' and t2.doc = 54 and date_format(cast(t2.opendate as datetime), '%y') between '2009' and '2010' and t2.soc = 62",
            "res": 0
        }
    ],
    "financial": [
        {
            "sql_idx": 468,
            "predicted_sql": "select count(distinct t.account_id) as number_of_accounts from trans t join account a on t.account_id = a.account_id join client c on a.district_id = c.district_id join district d on c.district_id = d.district_id where t.type = 'poplatek po obratu' and d.a3 = 'east bohemia'",
            "ground_truth_sql": "select count(t2.account_id) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where t1.a3 = 'east bohemia' and t2.frequency = 'poplatek po obratu'",
            "res": 0
        },
        {
            "sql_idx": 469,
            "predicted_sql": "select count(distinct district_id) as no_of_districts from client as t1 inner join account as t2 on t1.client_id = t2.client_id inner join district as t3 on t2.district_id = t3.district_id where t1.gender = 'f' and t3.a11 between 6000 and 10000",
            "ground_truth_sql": "select count(distinct t2.district_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' and t2.a11 between 6000 and 10000",
            "res": 0
        },
        {
            "sql_idx": 470,
            "predicted_sql": "select count(distinct c.client_id) as male_customers from client c join district d on c.district_id = d.district_id where c.gender = 'm' and d.a3 = 'north bohemia' and d.a11 > 8000",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a3 = 'north bohemia' and t2.a11 > 8000",
            "res": 0
        },
        {
            "sql_idx": 471,
            "predicted_sql": "select t1.account_id, t2.a11 - min(t2.a11) as salary_gap from client as t1 inner join account as t2 on t1.client_id = t2.account_id where t1.gender = 'f' order by t1.birth_date desc limit 1",
            "ground_truth_sql": "select t1.account_id, ( select max(a11) - min(a11) from district ) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join disp as t3 on t1.account_id = t3.account_id inner join client as t4 on t3.client_id = t4.client_id where t2.district_id = ( select district_id from client where gender = 'f' order by birth_date asc limit 1 ) order by t2.a11 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 472,
            "predicted_sql": "select t1.account_id from client as t1 inner join account as t2 on t1.client_id = t2.account_id inner join loan as t3 on t2.account_id = t3.account_id order by t1.birth_date desc, t3.amount desc limit 1",
            "ground_truth_sql": "select t1.account_id from account as t1 inner join disp as t2 on t1.account_id = t2.account_id inner join client as t3 on t2.client_id = t3.client_id inner join district as t4 on t4.district_id = t1.district_id where t2.client_id = ( select client_id from client order by birth_date desc limit 1 ) group by t4.a11, t1.account_id",
            "res": 0
        },
        {
            "sql_idx": 473,
            "predicted_sql": "select a.account_id, min(l.amount) as lowest_approved_amount from loan l join account a on l.account_id = a.account_id where year(l.date) = 1997 group by a.account_id order by lowest_approved_amount limit 1",
            "ground_truth_sql": "select t2.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t1.date as datetime), '%y') = '1997' and t2.frequency = 'poplatek tydne' order by t1.amount limit 1",
            "res": 0
        },
        {
            "sql_idx": 474,
            "predicted_sql": "select a.account_id, max(l.amount) as highest_approved_amount from account a join loan l on a.account_id = l.account_id where year(l.date) = 1993 and l.duration > 12 group by a.account_id order by highest_approved_amount desc",
            "ground_truth_sql": "select t1.account_id from loan as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t2.date as datetime), '%y') = '1993' and t1.duration > 12 order by t1.amount desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 475,
            "predicted_sql": "select count(distinct c.client_id) as female_customers from client c join account a on c.client_id = a.account_id join district d on c.district_id = d.district_id where c.gender = 'f' and c.birth_date < '1950-01-01' and d.a2 = 'sokolov'",
            "ground_truth_sql": "select count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'f' and date_format(cast(t2.birth_date as datetime), '%y') < '1950' and t1.a2 = 'sokolov'",
            "res": 0
        },
        {
            "sql_idx": 476,
            "predicted_sql": "select d.a2 from district d join client c on d.district_id = c.district_id where c.gender = 'f' and c.birth_date = '1976-01-29'",
            "ground_truth_sql": "select t1.a2 from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.birth_date = '1976-01-29' and t2.gender = 'f'",
            "res": 0
        },
        {
            "sql_idx": 477,
            "predicted_sql": "select (count(case when t2.gender = 'm' then 1 end) * 100.0 / count(t2.gender)) as male_percentage from district as t1 inner join client as t2 on t2.district_id = t1.district_id where t1.a3 = 'south bohemia' order by t1.a4 desc limit 1",
            "ground_truth_sql": "select cast(sum(t1.gender = 'm') as double) * 100 / count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t2.a3 = 'south bohemia' group by t2.a4 order by t2.a4 desc limit 1",
            "res": 0
        },
        {
            "sql_idx": 478,
            "predicted_sql": "select (sum(case when t1.date = '1998-12-27' then t1.balance else 0 end) - sum(case when t1.date = '1993-03-22' then t1.balance else 0 end)) * 100.0 / sum(case when t1.date = '1993-03-22' then t1.balance else 0 end) as increase_rate from trans t1 join loan l on t1.account_id = l.account_id where l.date = '1993-07-05' order by t1.date limit 1",
            "ground_truth_sql": "select cast(( sum(case when t3.date = '1998-12-27' then t3.balance else 0 end) - sum(case when t3.date = '1993-03-22' then t3.balance else 0 end) ) as double) * 100 / sum(case when t3.date = '1993-03-22' then t3.balance else 0 end) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join trans as t3 on t3.account_id = t2.account_id where t1.date = '1993-07-05'",
            "res": 0
        },
        {
            "sql_idx": 479,
            "predicted_sql": "select (sum(case when l.status = 'a' then l.amount else 0 end) / sum(l.amount)) * 100 as percentage from loan l",
            "ground_truth_sql": "select ( cast(sum(case when status = 'a' then amount else 0 end) as double) * 100 ) / sum(amount) from loan",
            "res": 0
        },
        {
            "sql_idx": 480,
            "predicted_sql": "select (count(case when l.status = 'c' then 1 end) * 100.0 / count(l.loan_id)) as percentage_running_no_issue from loan l where l.amount < 100000",
            "ground_truth_sql": "select cast(sum(status = 'c') as double) * 100 / count(account_id) from loan where amount < 100000",
            "res": 0
        },
        {
            "sql_idx": 481,
            "predicted_sql": "select d.a2 as district, d.a3 as state, ( (d.a13 - d.a12) / d.a12 ) * 100 as unemployment_rate_increment from district d join client c on d.district_id = c.district_id join loan l on c.client_id = l.account_id where l.status = 'd'",
            "ground_truth_sql": "select cast(( t3.a13 - t3.a12 ) as double) * 100 / t3.a12 from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.status = 'd'",
            "res": 0
        },
        {
            "sql_idx": 482,
            "predicted_sql": "select t3.a2 as district_name, count(t1.client_id) as female_count from client as t1 inner join account as t2 on t1.client_id = t2.account_id inner join district as t3 on t2.district_id = t3.district_id where t1.gender = 'f' group by t3.a2 order by female_count desc limit 9",
            "ground_truth_sql": "select t2.a2, count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'f' group by t2.district_id, t2.a2 order by count(t1.client_id) desc limit 9",
            "res": 0
        },
        {
            "sql_idx": 483,
            "predicted_sql": "select count(*) as approved_loans_count from loan l join account a on l.account_id = a.account_id where a.frequency = 'poplatek mesicne' and l.amount >= 250000 and l.status = 'approved' and l.date between '1995-01-01' and '1997-12-31'",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.date between '1995-01-01' and '1997-12-31' and t1.frequency = 'poplatek mesicne' and t2.amount >= 250000",
            "res": 0
        },
        {
            "sql_idx": 484,
            "predicted_sql": "select count(distinct account_id) as running_contracts from loan where status = 'c' and account_id in ( select account_id from account where district_id = 1 )",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and ( t3.status = 'c' or t3.status = 'd' )",
            "res": 0
        },
        {
            "sql_idx": 485,
            "predicted_sql": "select count(distinct t2.client_id) as male_clients from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t2.gender = 'm' and year(t1.a15) = 1995 order by t1.a15 desc limit 1, 1",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = ( select t3.a15 from district as t3 order by t3.a15 desc limit 1 offset 1 )",
            "res": 0
        },
        {
            "sql_idx": 486,
            "predicted_sql": "select d.a2 as district_name, count(t.trans_id) as withdrawal_count from trans t join account a on t.account_id = a.account_id join client c on a.client_id = c.client_id join district d on c.district_id = d.district_id where t.type = 'vydaj' and t.date like '1996-01%' group by d.a2 order by withdrawal_count desc limit 10",
            "ground_truth_sql": "select distinct t1.a2 from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join trans as t3 on t2.account_id = t3.account_id where t3.type = 'vydaj' and t3.date like '1996-01%' order by a2 asc limit 10",
            "res": 0
        },
        {
            "sql_idx": 487,
            "predicted_sql": "select count(distinct account_id) as running_contracts from loan where status = 'c' and district_id = 1",
            "ground_truth_sql": "select count(t1.account_id) from account as t1 inner join district as t2 on t1.district_id = t2.district_id inner join loan as t3 on t1.account_id = t3.account_id where t1.district_id = 1 and ( t3.status = 'c' or t3.status = 'd' )",
            "res": 0
        },
        {
            "sql_idx": 488,
            "predicted_sql": "select count(distinct t1.client_id) from client as t1 inner join account as t2 on t1.client_id = t2.account_id where t1.gender = 'm' and year(t2.date) = 1995 order by t1.a15 desc limit 1, 1",
            "ground_truth_sql": "select count(t1.client_id) from client as t1 inner join district as t2 on t1.district_id = t2.district_id where t1.gender = 'm' and t2.a15 = ( select t3.a15 from district as t3 order by t3.a15 desc limit 1 offset 1 )",
            "res": 0
        },
        {
            "sql_idx": 489,
            "predicted_sql": "select t.account_id from trans t join card c on t.account = c.card_id where t.type = 'vyber kartou' and t.amount < ( select avg(amount) from trans where year(t.date) = 1998 ) and year(t.date) = 1998",
            "ground_truth_sql": "select t1.account_id from trans as t1 inner join account as t2 on t1.account_id = t2.account_id where date_format(cast(t1.date as datetime), '%y') = '1998' and t1.operation = 'vyber kartou' and t1.amount < ( select avg(amount) from trans where date_format(cast(date as datetime), '%y') = '1998' )",
            "res": 0
        },
        {
            "sql_idx": 490,
            "predicted_sql": "select t1.type from account as t1 join client as t2 on t1.account_id = t2.client_id join district as t3 on t2.district_id = t3.district_id where t1.type != 'owner' and t3.a11 > 8000 and t3.a11 < 9000 group by t1.type",
            "ground_truth_sql": "select t3.type from district as t1 inner join account as t2 on t1.district_id = t2.district_id inner join disp as t3 on t2.account_id = t3.account_id where t3.type <> 'owner' and t1.a11 between 8000 and 9000",
            "res": 0
        },
        {
            "sql_idx": 491,
            "predicted_sql": "select avg(a15) as average_crimes from district where a15 > 4000 and exists ( select 1 from account where account_id = district.district_id and year(date) >= 1997 )",
            "ground_truth_sql": "select avg(t1.a15) from district as t1 inner join account as t2 on t1.district_id = t2.district_id where date_format(cast(t2.date as datetime), '%y') >= '1997' and t1.a15 > 4000",
            "res": 0
        },
        {
            "sql_idx": 492,
            "predicted_sql": "select t.amount from trans t join client c on t.account_id = c.client_id where c.client_id = 3356 and t.operation = 'vyber'",
            "ground_truth_sql": "select t4.trans_id from client as t1 inner join disp as t2 on t1.client_id = t2.client_id inner join account as t3 on t2.account_id = t3.account_id inner join trans as t4 on t3.account_id = t4.account_id where t1.client_id = 3356 and t4.operation = 'vyber'",
            "res": 0
        },
        {
            "sql_idx": 493,
            "predicted_sql": "select (count(case when c.gender = 'f' then 1 end) * 100.0 / count(*)) as percentage_women from client c join account a on c.client_id = a.account_id join district d on a.district_id = d.district_id where d.a11 > 10000",
            "ground_truth_sql": "select cast(sum(t2.gender = 'f') as double) * 100 / count(t2.client_id) from district as t1 inner join client as t2 on t1.district_id = t2.district_id where t1.a11 > 10000",
            "res": 0
        },
        {
            "sql_idx": 494,
            "predicted_sql": "select (sum(case when extract(year from l.date) = 1997 then l.amount else 0 end) - sum(case when extract(year from l.date) = 1996 then l.amount else 0 end)) / sum(case when extract(year from l.date) = 1996 then l.amount else 0 end) * 100 as growth_rate from loan l join account a on l.account_id = a.account_id join client c on a.district_id = c.district_id where c.gender = 'm'",
            "ground_truth_sql": "select cast(( sum( case when date_format(cast(t1.date as datetime), '%y') = '1997' then t1.amount else 0 end ) - sum( case when date_format(cast(t1.date as datetime), '%y') = '1996' then t1.amount else 0 end ) ) as double) * 100 / sum( case when date_format(cast(t1.date as datetime), '%y') = '1996' then t1.amount else 0 end ) from loan as t1 inner join account as t2 on t1.account_id = t2.account_id inner join disp as t3 on t3.account_id = t2.account_id inner join client as t4 on t4.client_id = t3.client_id where t4.gender = 'm' and t3.type = 'owner'",
            "res": 0
        },
        {
            "sql_idx": 495,
            "predicted_sql": "select count(distinct account_id) as request_count, sum(case when k_symbol = '3539' then 1 else 0 end) as total_debit_aim from trans where account_id = 3",
            "ground_truth_sql": "select t1.frequency, t2.k_symbol from account as t1 inner join ( select account_id, k_symbol, sum(amount) as total_amount from order group by account_id, k_symbol ) as t2 on t1.account_id = t2.account_id where t1.account_id = 3 and t2.total_amount = 3539",
            "res": 0
        },
        {
            "sql_idx": 496,
            "predicted_sql": "select (count(distinct case when c.gender = 'm' then d.client_id end) * 100.0 / count(distinct d.client_id)) as male_percentage from disp d join client c on d.client_id = c.client_id where d.type = 'poplatek tydne'",
            "ground_truth_sql": "select cast(sum(t1.gender = 'm') as double) * 100 / count(t1.client_id) from client as t1 inner join district as t3 on t1.district_id = t3.district_id inner join account as t2 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t2.account_id = t4.account_id where t2.frequency = 'poplatek tydne'",
            "res": 0
        },
        {
            "sql_idx": 497,
            "predicted_sql": "select t1.account_id from client as t1 inner join account as t2 on t1.client_id = t2.account_id inner join trans as t3 on t2.account_id = t3.account_id where t1.gender = 'f' order by t1.birth_date asc, t3.amount asc limit 1",
            "ground_truth_sql": "select t3.account_id from client as t1 inner join district as t2 on t1.district_id = t2.district_id inner join account as t3 on t2.district_id = t3.district_id inner join disp as t4 on t1.client_id = t4.client_id and t4.account_id = t3.account_id where t1.gender = 'f' order by t1.birth_date asc, t2.a11 asc limit 1",
            "res": 0
        },
        {
            "sql_idx": 498,
            "predicted_sql": "select avg(l.amount) as average_loan_amount from loan l join trans t on l.account_id = t.account_id where l.status = 'c' and t.operation = 'poplatek po obratu'",
            "ground_truth_sql": "select avg(t2.amount) from account as t1 inner join loan as t2 on t1.account_id = t2.account_id where t2.status in ('c', 'd') and t1.frequency = 'poplatek po obratu'",
            "res": 0
        },
        {
            "sql_idx": 499,
            "predicted_sql": "select c.client_id, timestampdiff(year, c.birth_date, curdate()) as age from client c join card on c.client_id = card.disp_id join disp d on card.disp_id = d.disp_id where card.type = 'gold' and d.type = 'owner'",
            "ground_truth_sql": "select t1.client_id, date_format(cast(current_timestamp() as datetime), '%y') - date_format(cast(t3.birth_date as datetime), '%y') from disp as t1 inner join card as t2 on t2.disp_id = t1.disp_id inner join client as t3 on t1.client_id = t3.client_id where t2.type = 'gold' and t1.type = 'owner'",
            "res": 0
        }
    ]
}